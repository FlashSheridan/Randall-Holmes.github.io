declareconstant "P_15";
declareconstant "P_14";
declareconstant "P_13B";
declareconstant "P_12A";
declareconstant "P_11";
declareconstant "P_10";
declareconstant "P_9";
declareconstant "P_8";
declareconstant "P_7";
declareconstant "P_6";
declareconstant "P_5";
declareconstant "P_4B";
declareconstant "P_4A";
declareconstant "P_3B";
declareconstant "P_3A";
declareconstant "P_2B";
declareconstant "P_2A";
declareconstant "P_1B";
declareconstant "P_1A";
declareconstant "Nb";
declareconstant "Na";
declareconstant "Kbs";
declareconstant "Kas";
declareconstant "Kab";
declareconstant "S";
declareconstant "B";
declareconstant "A";
declareconstant "AXIOM_20";
declareconstant "AXIOM_19";
declareconstant "AXIOM_17B";
declareconstant "AXIOM_17A";
declareconstant "AXIOM_16";
declareconstant "AXIOM_15B";
declareconstant "AXIOM_15A";
declareconstant "AXIOM_14B";
declareconstant "AXIOM_14A";
declareconstant "AXIOM_11B";
declareconstant "AXIOM_11A";
declareconstant "AXIOM_10";
declareconstant "AXIOM_09";
declareconstant "AXIOM_08";
declareconstant "AXIOM_7D";
declareconstant "AXIOM_7C";
declareconstant "AXIOM_7B";
declareconstant "AXIOM_7A";
declareconstant "AXIOM_04";
declareconstant "AXIOM_03B";
declareconstant "AXIOM_03A";
declareconstant "AXIOM_02";
declareconstant "AXIOM_01";
declareconstant "SAID_IMP2";
declareconstant "SAID_IMP1";
declareconstant "NECESSITATION";
declareconstant "BELIEVES_BELIEVES_IS_BELIEVES";
declareconstant "RECEIVEDFROM_IS_RECEIVED";
declareconstant "SHARED_KEY_IMP_SEES_KEY";
declareconstant "FRESH_TYPE";
declareconstant "CONTROLS_TYPE";
declareconstant "SEES_TYPE";
declareconstant "SAYS_AXIOM";
declareconstant "SAYS_TYPE";
declareconstant "SAID_AXIOM";
declareconstant "SAID_TYPE";
declareconstant "RECEIVED_AXIOM";
declareconstant "RECEIVE_FROM_TYPE";
declareconstant "RECEIVED_TYPE";
declareconstant "HOLDS_AXIOM";
declareconstant "HOLDS_TYPE";
declareconstant "BELIEVE_IMP";
declareconstant "BELIEVE_AND";
declareconstant "BELIEVE_TYPE";
declareconstant "MESSAGE_TYPE";
declareconstant "PROP_IS_MESSAGE";
declareconstant "PRINCIPAL_IS_MESSAGE";
declareconstant "KEY_IS_MESSAGE";
declareconstant "SV_TYPE";
declareconstant "PKA_TYPE";
declareconstant "PKS_TYPE";
declareconstant "PKE_TYPE";
declareconstant "SHARED_TYPE";
declareconstant "PED_AXIOM6";
declareconstant "PED_AXIOM5";
declareconstant "PED_AXIOM4";
declareconstant "PED_AXIOM3";
declareconstant "PED_AXIOM2";
declareconstant "PED_AXIOM1";
declareconstant "PED_TYPE";
declareconstant "PD_TYPE";
declareconstant "PE_TYPE";
declareconstant "PKEY_INV2";
declareconstant "PKEY_INV1";
declareconstant "KEYPAIR_TYPE";
declareconstant "SYMM_KEY_INV";
declareconstant "INV_TYPE";
declareconstant "SKEY_IS_KEY";
declareconstant "sKEY_IS_PKEY";
declareconstant "pKEY_IS_PKEY";
declareconstant "PKEY_IS_KEY";
declareconstant "SED_AXIOM3";
declareconstant "SED_AXIOM2";
declareconstant "SED_AXIOM1";
declareconstant "SED_TYPE";
declareconstant "SE_TYPE";
declareconstant "SD_TYPE";
declareconstant "IMP_FALSE";
declareconstant "IMP_TRUE";
declareconstant "IMP_TYPE";
declareconstant "NOT_FALSE";
declareconstant "NOT_TRUE";
declareconstant "NOT_TYPE";
declareconstant "OR_ASSOC";
declareconstant "OR_FALSE";
declareconstant "OR_TRUE";
declareconstant "OR_COMM";
declareconstant "OR_TYPE";
declareconstant "AND_ASSOC";
declareconstant "AND_FALSE";
declareconstant "AND_TRUE";
declareconstant "AND_COMM";
declareconstant "AND_TYPE";
declareconstant "sv";
declareconstant "pks";
declareconstant "pka";
declareconstant "pke";
declareconstant "shared_key";
declareconstant "keypair";
declareconstant "skey";
declareconstant "pkey";
declareconstant "Pkey";
declareconstant "Skey";
declareconstant "Key";
declareconstant "Fresh";
declareconstant "Message";
declareconstant "Principal";
declareconstant "IDIS4";
declareconstant "IDIS3";
declareconstant "IDIS2";
declareconstant "IDIS1";
declareconstant "3pt89";
declareconstant "AP3pt88";
declareconstant "3pt88";
declareconstant "3pt87";
declareconstant "AP3pt86b";
declareconstant "3pt86b";
declareconstant "AP3pt86a";
declareconstant "3pt86a";
declareconstant "3pt85b";
declareconstant "3pt85a";
declareconstant "3pt84c";
declareconstant "3pt84b";
declareconstant "3pt83F";
declareconstant "3pt83";
declareconstant "3pt82cF";
declareconstant "3pt82c";
declareconstant "3pt82bF";
declareconstant "3pt82b";
declareconstant "3pt82aF";
declareconstant "3pt82a";
declareconstant "3pt81F";
declareconstant "3pt81";
declareconstant "3pt80";
declareconstant "3pt79F";
declareconstant "3pt79";
declareconstant "3pt78";
declareconstant "MOPF";
declareconstant "MOP";
declareconstant "3pt76eF";
declareconstant "3pt76e";
declareconstant "3pt76dF";
declareconstant "3pt76d";
declareconstant "3pt76cF";
declareconstant "3pt76c";
declareconstant "3pt76bF";
declareconstant "3pt76b";
declareconstant "3pt76aF";
declareconstant "3pt76a";
declareconstant "3pt75F";
declareconstant "3pt75";
declareconstant "3pt74";
declareconstant "ILID";
declareconstant "IRZERF";
declareconstant "IRZER";
declareconstant "IREFF";
declareconstant "IREF";
declareconstant "3pt70";
declareconstant "3pt69";
declareconstant "3pt68F";
declareconstant "3pt68";
declareconstant "3pt67F";
declareconstant "3pt67";
declareconstant "3pt66";
declareconstant "3pt64";
declareconstant "3pt65";
declareconstant "3pt62";
declareconstant "IDISB";
declareconstant "CONTP";
declareconstant "IDEF3";
declareconstant "IDEF2";
declareconstant "XALTDEF";
declareconstant "BALTDEF";
declareconstant "REPL";
declareconstant "3pt50";
declareconstant "3pt49";
declareconstant "3pt48";
declareconstant "CDISD";
declareconstant "DDISC";
declareconstant "3pt44b";
declareconstant "3pt44a";
declareconstant "L3pt43";
declareconstant "3pt43bF";
declareconstant "3pt43b";
declareconstant "3pt43aF";
declareconstant "3pt43a";
declareconstant "CCON";
declareconstant "CDISC";
declareconstant "CZERF";
declareconstant "CZER";
declareconstant "CID";
declareconstant "CIDEM";
declareconstant "CASSOC";
declareconstant "CSYM";
declareconstant "DUAL";
declareconstant "REMFLIP";
declareconstant "SREMFLIP";
declareconstant "NOTCLEAN";
declareconstant "ASSERTCLEAN";
declareconstant "REMA";
declareconstant "AF";
declareconstant "AT";
declareconstant "FLIPALL";
declareconstant "FLIPPASTC";
declareconstant "FLIPPASTD";
declareconstant "FLIPPASTX";
declareconstant "FLIPPASTB";
declareconstant "FLIPPASTN";
declareconstant "FLIPPASTA";
declareconstant "SFLIPALL";
declareconstant "XORFLIP";
declareconstant "BFLIP";
declareconstant "DEMa";
declareconstant "DEMb";
declareconstant "GR3";
declareconstant "GR2";
declareconstant "3pt32F";
declareconstant "3pt32";
declareconstant "DID";
declareconstant "DDISD";
declareconstant "DZERF";
declareconstant "DZER";
declareconstant "MUTINT";
declareconstant "MUTASSOC";
declareconstant "XORASSOC";
declareconstant "XORSYM";
declareconstant "NEQ";
declareconstant "DUBNEG2";
declareconstant "NEGF";
declareconstant "3pt15bF";
declareconstant "3pt15b";
declareconstant "3pt15a";
declareconstant "3pt14";
declareconstant "3pt11";
declareconstant "APLZ";
declareconstant "EQT";
declareconstant "BCONV";
declareconstant "ASRTEQ";
declareconstant "LZ";
declareconstant "CONS";
declareconstant "IDEF";
declareconstant "GR";
declareconstant "DXMF";
declareconstant "DXM";
declareconstant "DDIS";
declareconstant "DIDEM";
declareconstant "DASSOC";
declareconstant "DSYM";
declareconstant "XORDEF";
declareconstant "BDIS";
declareconstant "FDEF";
declareconstant "BID2";
declareconstant "BID";
declareconstant "BSYM";
declareconstant "BASSOC";
declareconstant "THMAP";
declareconstant "ASRTRIGHT";
declareconstant "ASRTLEFT";
declareconstant "ASSRTBOTH";
declareconstant "MKASRT";
declareconstant "GCLEAN";
declareconstant "ALLASSERTS";
declareconstant "STT";
declareconstant "STR";
declareconstant "STL";
declareconstant "CNRULE3";
declareconstant "CNRULE2";
declareconstant "CNRULE1";
declareconstant "IRULE3";
declareconstant "IRULE2";
declareconstant "IRULE1";
declareconstant "NRULE2";
declareconstant "NRULE1";
declareconstant "XRULE3";
declareconstant "XRULE2";
declareconstant "XRULE1";
declareconstant "CRULE3";
declareconstant "CRULE2";
declareconstant "CRULE1";
declareconstant "DRULE3";
declareconstant "DRULE2";
declareconstant "DRULE1";
declareconstant "BRULE3";
declareconstant "BRULE2";
declareconstant "BRULE1";
declareconstant "EQSYMM";
declareconstant "CONTYPE";
declareconstant "IMPTYPE";
declareconstant "CTYPE";
declareconstant "DTYPE";
declareconstant "NTYPE";
declareconstant "XORTYPE";
declareconstant "BTYPE";
declareconstant "TWOASSERTS";
declareconstant "PROP";
declareconstant "prop";
declareconstant "True";
declareconstant "TRUERETRACT";
declareconstant "Bool";
declareconstant "BOOL_RETRACT";
declareconstant "POINTTYPE";
declareconstant "UNIONTYPE";
declareconstant "UNIONRETRACT";
declareconstant "PRODTYPE";
declareconstant "PRODRETRACT";
declareconstant "ARROWTYPE";
declareconstant "ARROWRETRACT";
declareconstant "TADDTOP";
declareconstant "TADDBOTH";
declareconstant "TADDRIGHT";
declareconstant "TADDLEFT";
declareconstant "TREMTOP";
declareconstant "TREMBOTH";
declareconstant "TREMRIGHT";
declareconstant "TREMLEFT";
declareconstant "goto";
declareconstant "INPUT_AT";
declareconstant "value";
declareconstant "left_case";
declareconstant "right_case";
declareconstant "left";
declareconstant "right";
declareconstant "INPUTS2";
declareconstant "up";
declareconstant "upfun";
declareconstant "BINDLABELS";
declareconstant "APPLYATLABELS";
declareconstant "APPLYATLABEL";
declareconstant "APPLYATLABEL0";
declareconstant "LABELTERM";
declareconstant "LABELTERMS_CASE";
declareconstant "LABELTERMS_UNARY";
declareconstant "LABELTERMS_ABSTRACT";
declareconstant "LABELTERMS_SPLIT";
declareconstant "LABELTERMS_FOUND";
declareconstant "LABELTERMS";
declareconstant "POP_CASE";
declareconstant "POP_CASE_1";
declareconstant "POP_CASE_2";
declareconstant "ANTI_UNEVAL_TAC";
declareconstant "TYPEBIND";
declareconstant "UNEVAL_TAC";
declareconstant "GET";
declareconstant "GET2";
declareconstant "GET1";
declareconstant "GET0";
declareconstant "ALLASSOCS";
declareconstant "ASSOCS";
declareconstant "VIEWCASES";
declareconstant "LOOP_TAC";
declareconstant "ALL_STEPS";
declareconstant "STOPLOOP";
declareconstant "STARTLOOP";
declareconstant "LISTBIND";
declareconstant "PAIRBIND";
declareconstant "VALUE";
declareconstant "VALUE0";
declareconstant "PI2F";
declareconstant "PI1F";
declareconstant "REVPIVOT";
declareconstant "PIVOT";
declareconstant "TOPDOWN_PREFIX";
declareconstant "TOPDOWN_INFIX";
declareconstant "TOPDOWN_CASE";
declareconstant "TOPDOWN";
declareconstant "EVERYWHERE2";
declareconstant "EVERYWHERE";
declareconstant "EVERYWHERE_INFIX";
declareconstant "EVERYWHERE_PREFIX";
declareconstant "EVERYWHERE_ABS";
declareconstant "STRONG_EVERYWHERE_CASE";
declareconstant "EVERYWHERE_CASE";
declareconstant "BOTH_CASES";
declareconstant "RIGHT_CASE";
declareconstant "LEFT_CASE";
declareconstant "RL";
declareconstant "RIGHT";
declareconstant "RIGHT2";
declareconstant "RIGHT1";
declareconstant "LEFT";
declareconstant "LEFT2";
declareconstant "LEFT1";
declareconstant "PCASEINTRO";
declareconstant "ID";
declareconstant "PI2";
declareconstant "PI1";
declareconstant "IGNOREFIRST";
declareconstant "HYP";
declareconstant "ODDCHOICE";
declareconstant "EQUATION";
declareconstant "NONTRIV";
declareconstant "REFLEX";
declareconstant "CASEINTRO";
declareconstant "FNDIST";
declareconstant "Id";
declareconstant "p2";
declareconstant "p1";
declareconstant "P2";
declareconstant "P1";
declareconstant "COMP";
declareconstant "TYPES";
declareconstant "OUTPUT";
declareconstant "INPUT";
declareconstant "FLIP";
declareconstant "UNEVAL";
declareconstant "EVAL";
declareconstant "BIND";
declareconstant "false";
declareconstant "true";
addoperator "-" "(0) , 0";
addoperator "`ped" "(0) , 0";
addoperator "`pd" "(0) , 0";
addoperator "`pe" "(0) , 0";
addoperator "`sha" "(0) , 0";
addoperator "`sed" "(0) , 0";
addoperator "`sd" "(0) , 0";
addoperator "`se" "(0) , 0";
addoperator "`CONTROLS" "(0) , 0";
addoperator "`KNOWS" "(0) , 0";
addoperator "`HOLDS" "(0) , 0";
addoperator "`BELIEVES" "(0) , 0";
addoperator "`SAYS" "(0) , 0";
addoperator "`SEES" "(0) , 0";
addoperator "`SAID" "(0) , 0";
addoperator "`RECEIVED_FROM" "(0) , 0";
addoperator "`RECEIVED" "(0) , 0";
addoperator "`INV" "(0) , 0";
addoperator "~" "(0) , 0";
addoperator "=/=" "(0) , 0";
addoperator "<-" "(0) , 0";
addoperator "->" "(0) , 0";
addoperator "&" "(0) , 0";
addoperator "|" "(0) , 0";
addoperator "==" "(0) , 0";
addoperator "|-" "(0) , 0";
addoperator "<+>" "(0) , 0";
addoperator "<*>" "(0) , 0";
addoperator "->>" "(0) , 0";
addoperator "^," "(0) , 0";
addoperator "^+" "(0) , 0";
addoperator "^--" "(0) , 0";
addoperator "^-" "(0) , 0";
addoperator "$" "(0) , 0";
addoperator "**" "(0) , 0";
addoperator "." "(0) , 0";
addoperator "@@" "(0) , 0";
addscinleft "^," "";
addscinleft "@!" "";
addscinleft "<=" "";
addscinleft "=>" "";
addscinright "^," "";
setdefaultprec 0;
prefixreader "`sha" "";
prefixreader "`INV" "";
prefixreader "~" "";
prefixreader "|-" "";
prefixreader "^--" "";
prefixreader "^-" "";
prefixreader "$" "";
prefixreader "!$" "";
prefixreader "!@" "";
addopaque "<+>";
addopaque "<*>";
addopaque "->>";
addopaque "^+";
addopaque "^--";
addopaque "^-";
forcetheorem "COMP" "COMP , ((?f @@ ?g) @ ?x) , (?f @ ?g @ ?x) , COMP , 0";
forcetheorem "P1" "P1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "P2" "P2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "Id" "Id , (Id @ ?x) , ?x , Id , 0";
forcetheorem "FNDIST" "FNDIST , (?f @ ?x || ?y , ?z) , (?x || (?f @ ?y) , ?f @ ?z) , FNDIST , 0";
forcetheorem "NONTRIV" "NONTRIV , (true = false) , false , NONTRIV , 0";
forcetheorem "EQUATION" "EQUATION , (?a = ?b) , ((?a = ?b) || true , false) , EQUATION , 0";
forcetheorem "ODDCHOICE" "ODDCHOICE , ?x , ?x , ODDCHOICE , 0";
forcetheorem "HYP" "HYP , ((?a = ?b) || (?f @ ?a) , ?c) , ((?a = ?b) || (?f @ ?b) , ?c) , HYP , 0";
forcetheorem "}P1" "P1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "}P2" "P2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "ID" "ID , (Id @ ?x) , ?x , Id , 0";
forcetheorem "}Id" "Id , (Id @ ?x) , ?x , Id , 0";
forcetheorem "LEFT_CASE" "(LEFT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?z) , 0";
forcetheorem "RIGHT_CASE" "(RIGHT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || ?y , ?thm => ?z) , 0";
forcetheorem "BOTH_CASES" "(BOTH_CASES @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?thm => ?z) , 0";
forcetheorem "TOPDOWN_CASE" "(TOPDOWN_CASE @ ?thm) , (?a || ?x , ?y) , ((BOTH_CASES @ TOPDOWN @ ?thm) => ?thm => ?a || ?x , ?y) , 0";
forcetheorem "TOPDOWN_INFIX" "(TOPDOWN_INFIX @ ?thm) , (?x ^+ ?y) , ((RL @ TOPDOWN @ ?thm) => ?thm => ?x ^+ ?y) , 0";
forcetheorem "TOPDOWN_PREFIX" "(TOPDOWN_PREFIX @ ?thm) , (^-- ?x) , ((RIGHT @ TOPDOWN @ ?thm) => ?thm => ^-- ?x) , 0";
forcetheorem "TOPDOWN" "(TOPDOWN @ ?thm) , ?x , (((TOPDOWN_CASE @ ?thm) =>> (TOPDOWN_INFIX @ ?thm) =>> (TOPDOWN_PREFIX @ ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "PIVOT" "PIVOT , ((?a = ?b) || ?T , ?U) , ((LEFT_CASE @ EVAL) => HYP => (?a = ?b) || ((BIND @ ?a) => ?T) , ?U) , 0";
forcetheorem "REVPIVOT" "REVPIVOT , ((?a = ?b) || ?T , ?U) , ((LEFT_CASE @ EVAL) => HYP <= (?a = ?b) || ((BIND @ ?b) => ?T) , ?U) , 0";
forcetheorem "VALUE0" "(VALUE0 @ ?thm) , [?P @ ?1] , [?thm => ?P @ ?1] , 0";
forcetheorem "LISTBIND" "(LISTBIND @ ?x , ?y) , ?t , ((PAIRBIND @ ?x , ?y) => ((PAIRBIND @ ?y) *> EVAL) => ((LISTBIND @ ?y) *> EVAL) => ?t) , 0";
forcetheorem "PAIRBIND" "(PAIRBIND @ ?x , ?y) , ?t , ((BIND @ ?x , ?y) => EVAL => (LEFT @ VALUE @ [EVAL]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [EVAL]]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [RIGHT @ PI2F @ ?x]]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [BIND @ ?y]]) => (LEFT @ VALUE @ [RIGHT @ PI1F @ ?y]) => (LEFT @ VALUE @ [BIND @ ?x]) => (BIND @ ?x , ?y) => ?t) , 0";
forcetheorem "PI1F" "(PI1F @ ?y) , ?x , (P1 @ ?x , ?y) , P1 , 0";
forcetheorem "PI2F" "(PI2F @ ?y) , ?x , (P2 @ ?y , ?x) , P2 , 0";
forcetheorem "VALUE" "(VALUE @ ?thm) , [?P @ ?1] , [(?thm @ ?1) => ?P @ ?1] , 0";
forcetheorem "p1" "p1 , (p1 @ ?x , ?y) , ?x , p1 , 0";
forcetheorem "p2" "p2 , (p2 @ ?x , ?y) , ?y , p2 , 0";
forcetheorem "STARTLOOP" "STARTLOOP , ?x , (?x . ?x) , IGNOREFIRST , 0";
forcetheorem "IGNOREFIRST" "IGNOREFIRST , (?x . ?y) , ?y , IGNOREFIRST , 0";
forcetheorem "STOPLOOP" "STOPLOOP , (?x . ?x) , ?x , IGNOREFIRST , 0";
forcetheorem "ALL_STEPS" "(ALL_STEPS @ ?ONE_STEP) , (?x . ?y) , ((STOPLOOP =>> ALL_STEPS @ ?ONE_STEP) => (RIGHT @ ?ONE_STEP) => STARTLOOP => IGNOREFIRST => ?x . ?y) , 0";
forcetheorem "LOOP_TAC" "(LOOP_TAC @ ?ONE_STEP) , ?x , ((ALL_STEPS @ ?ONE_STEP) => STARTLOOP => ?x) , 0";
forcetheorem "VIEWCASES" "VIEWCASES , (?x || ?y , ?z) , (?x || ((VIEWCASES =>> INPUT) => ?y) , (VIEWCASES =>> INPUT) => ?z) , 0";
forcetheorem "ASSOCS" "(ASSOCS @ ?thm) , ?x , ((?thm *> ASSOCS @ ?thm) => ?x) , 0";
forcetheorem "ALLASSOCS" "(ALLASSOCS @ ?thm) , ?x , ((RIGHT @ ALLASSOCS @ ?thm) => (ASSOCS @ ?thm) => ?x) , 0";
forcetheorem "GET0" "(GET0 @ ?x) , (?x ^+ ?y) , (?x ^+ ?y) , 0";
forcetheorem "GET1" "(GET1 @ ?x , ?comm) , (?y ^+ ?x) , (?comm => ?y ^+ ?x) , 0";
forcetheorem "GET2" "(GET2 @ ?x , ?comm , ?assoc) , (?y ^+ ?x ^+ ?z) , (?assoc => (LEFT @ ?comm) => ?assoc <= ?y ^+ ?x ^+ ?z) , 0";
forcetheorem "GET" "(GET @ ?y , ?comm , ?assoc) , ?x , (((GET1 @ ?y , ?comm) =>> GET2 @ ?y , ?comm , ?assoc) => ((GET0 @ ?y) =>> RIGHT @ GET @ ?y , ?comm , ?assoc) => (ASSOCS @ ?assoc) => ?x) , 0";
forcetheorem "UNEVAL_TAC" "(UNEVAL_TAC @ ?f) , ?x , ((BOTH_CASES @ EVAL) => FNDIST => (UNEVAL @ ?f) => ?x) , 0";
forcetheorem "TYPEBIND" "(TYPEBIND @ ?t) , ?x , ((EVERYWHERE2 @ TYPES) => (BIND @ ?t) => (EVERYWHERE2 @ $ TYPES) => ?x) , 0";
forcetheorem "ANTI_UNEVAL_TAC" "(ANTI_UNEVAL_TAC @ ?f) , (?x || ?y , ?z) , (EVAL => FNDIST <= (BOTH_CASES @ UNEVAL @ ?f) => ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE_1" "POP_CASE_1 , (?n . ?x || ?y , ?z) , (IGNOREFIRST => ?n . (((2 |-| ?n) @ 0) *> POP_CASE_2 @ ?n) <= ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE_2" "(POP_CASE_2 @ ?n) , (?x || ?y , ?z) , (((1 |-| ?n) =>> ((!$ IGNOREFIRST) @ 1 +! ?n) ** POP_CASE_1) => (1 |-| ?n) => ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE" "POP_CASE , (?x || ?y , ?z) , ((((!$ IGNOREFIRST) @ 1) ** POP_CASE_1) => ?x || ?y , ?z) , 0";
forcetheorem "LABELTERMS_FOUND" "(LABELTERMS_FOUND @ ?a , ?no) , ?a , (((!$ IGNOREFIRST) @ ?no) => ?a) , 0";
forcetheorem "LABELTERMS_SPLIT" "(LABELTERMS_SPLIT @ ?a , ?no) , (?x ^+ ?y) , (((LABELTERMS @ ?a , 2 *! ?no) => ?x) ^+ (LABELTERMS @ ?a , 1 +! 2 *! ?no) => ?y) , 0";
forcetheorem "LABELTERMS_ABSTRACT" "(LABELTERMS_ABSTRACT @ ?a , ?no) , [?x @ ?1] , [(LABELTERMS @ ?a , ?no) => ?x @ ?1] , 0";
forcetheorem "LABELTERMS_UNARY" "(LABELTERMS_UNARY @ ?a , ?no) , (^-- ?x) , (^-- (LABELTERMS @ ?a , ?no) => ?x) , 0";
forcetheorem "LABELTERMS_CASE" "(LABELTERMS_CASE @ ?a , ?no) , (?x || ?y , ?z) , (((LABELTERMS @ ?a , 2 *! ?no) => ?x) || ((LABELTERMS @ ?a , 2 *! 1 +! 2 *! ?no) => ?y) , (LABELTERMS @ ?a , 1 +! 2 *! 1 +! 2 *! ?no) => ?z) , 0";
forcetheorem "LABELTERMS" "(LABELTERMS @ ?a , ?no) , ?x , (((LABELTERMS_FOUND @ ?a , ?no) =>> (LABELTERMS_SPLIT @ ?a , ?no) =>> (LABELTERMS_ABSTRACT @ ?a , ?no) =>> (LABELTERMS_UNARY @ ?a , ?no) =>> LABELTERMS_CASE @ ?a , ?no) => ?x) , 0";
forcetheorem "LABELTERM" "(LABELTERM @ ?a) , ?x , ((LABELTERMS @ ?a , 1) => ?x) , 0";
forcetheorem "APPLYATLABEL0" "(APPLYATLABEL0 @ ?thm , ?label) , (?label . ?x) , (?thm => IGNOREFIRST => ?label . ?x) , 0";
forcetheorem "APPLYATLABEL" "(APPLYATLABEL @ ?thm , ?label) , ?x , ((EVERYWHERE2 @ APPLYATLABEL0 @ ?thm , ?label) => ?x) , 0";
forcetheorem "APPLYATLABELS" "(APPLYATLABELS @ ?thm , ?first , ?rest) , ?x , ((APPLYATLABELS @ ?thm , ?rest) => (APPLYATLABEL @ ?thm , ?first) => ?x) , 0";
forcetheorem "BINDLABELS" "(BINDLABELS @ ?y , ?list) , ?x , ((LEFT @ EVERYWHERE2 @ IGNOREFIRST) => (RIGHT @ ID) => (BIND @ Id @ ?y) => (APPLYATLABELS @ ($ ID) , ?list) => ?x) , 0";
forcetheorem "upfun" "upfun , (upfun @ ?x) , ?x , upfun , 0";
forcetheorem "up" "up , ?x , (upfun @ ?x) , upfun , 0";
forcetheorem "INPUTS2" "INPUTS2 , ?x , ((upfun =>> INPUT ** INPUTS2) => ?x) , 0";
forcetheorem "right" "right , ?x , (((RIGHT @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "left" "left , ?x , (((LEFT @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "right_case" "right_case , ?x , (((RIGHT_CASE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "left_case" "left_case , ?x , (((LEFT_CASE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "value" "value , ?x , (((VALUE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "INPUT_AT" "(INPUT_AT @ ?x) , ?x , ((INPUTS2 ** upfun) => ?x) , 0";
forcetheorem "goto" "(goto @ ?a) , ?x , ((EVERYWHERE2 @ INPUT_AT @ ?a) => ?x) , 0";
forcetheorem "TREMLEFT" "(TREMLEFT @ ?thm) , (?x ^+ ?y) , ((?thm *> (RIGHT @ LEFT @ TYPES) ** $ ?thm) => ?x ^+ ?y) , 0";
forcetheorem "TREMRIGHT" "(TREMRIGHT @ ?thm) , (?x ^+ ?y) , ((?thm *> (RIGHT @ RIGHT @ TYPES) ** $ ?thm) => ?x ^+ ?y) , 0";
forcetheorem "TREMBOTH" "(TREMBOTH @ ?thm) , (?x ^+ ?y) , ((?thm *> (RIGHT @ (RIGHT @ TYPES) ** LEFT @ TYPES) ** $ ?thm) => ?x ^+ ?y) , 0";
forcetheorem "TREMTOP" "(TREMTOP @ ?thm) , (?t : ?x) , (?thm <= TYPES => (RIGHT @ ?thm) => ?t : ?x) , 0";
forcetheorem "TADDLEFT" "(TADDLEFT @ ?thm) , ?x , (?thm <= (?thm *> (RIGHT @ LEFT @ $ TYPES) ** $ ?thm) => ?x) , 0";
forcetheorem "TADDRIGHT" "(TADDRIGHT @ ?thm) , ?x , (?thm <= (?thm *> (RIGHT @ RIGHT @ $ TYPES) ** $ ?thm) => ?x) , 0";
forcetheorem "TADDBOTH" "(TADDBOTH @ ?thm) , ?x , (?thm <= (?thm *> (RIGHT @ (RIGHT @ $ TYPES) ** LEFT @ $ TYPES) ** $ ?thm) => ?x) , 0";
forcetheorem "TADDTOP" "(TADDTOP @ ?thm) , ?x , ((?thm *> ($ TYPES) ** RIGHT @ $ ?thm) => ?x) , 0";
forcetheorem "ARROWRETRACT" "ARROWRETRACT , [?t2 : ?f @ ?t1 : ?1] , [?t2 : ?t2 : ?f @ ?t1 : ?t1 : ?1] , TYPES , 0";
forcetheorem "ARROWTYPE" "ARROWTYPE , ((?t1 ->> ?t2) : ?f) , [?t2 : ?f @ ?t1 : ?1] , ARROWTYPE , TYPES , 0";
forcetheorem "PI1" "PI1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "PI2" "PI2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "PRODRETRACT" "PRODRETRACT , ((?t1 : P1 @ ?x) , ?t2 : P2 @ ?x) , ((?t1 : P1 @ (?t1 : P1 @ ?x) , ?t2 : P2 @ ?x) , ?t2 : P2 @ (?t1 : P1 @ ?x) , ?t2 : P2 @ ?x) , P1 , P2 , TYPES , 0";
forcetheorem "PRODTYPE" "PRODTYPE , ((?t1 <*> ?t2) : ?x) , ((?t1 : P1 @ ?x) , ?t2 : P2 @ ?x) , P1 , P2 , PRODTYPE , TYPES , 0";
forcetheorem "CASEINTRO" "CASEINTRO , ?x , (?y || ?x , ?x) , CASEINTRO , 0";
forcetheorem "UNIONRETRACT" "UNIONRETRACT , ((?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) , ((((?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) = ?t1 : (?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) || (?t1 : (?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) , ?t2 : (?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) , CASEINTRO , REFLEX , TYPES , 0";
forcetheorem "UNIONTYPE" "UNIONTYPE , ((?t1 <+> ?t2) : ?x) , ((?x = ?t1 : ?x) || (?t1 : ?x) , ?t2 : ?x) , CASEINTRO , REFLEX , TYPES , UNIONTYPE , 0";
forcetheorem "POINTTYPE" "POINTTYPE , ([?x] : ?y) , ?x , POINTTYPE , 0";
forcetheorem "PCASEINTRO" "(PCASEINTRO @ ?p) , ?x , (?p || ?x , ?x) , CASEINTRO , 0";
forcetheorem "BOOL_RETRACT" "BOOL_RETRACT , (?x || true , false) , ((?x || true , false) || true , false) , CASEINTRO , 0";
forcetheorem "Bool" "Bool , (Bool : ?x) , (?x || true , false) , Bool , CASEINTRO , 0";
forcetheorem "TRUERETRACT" "TRUERETRACT , true , true , 0";
forcetheorem "True" "True , (True : ?x) , true , True , 0";
forcetheorem "EVERYWHERE" "(EVERYWHERE @ ?thm) , ?x , (((EVERYWHERE_CASE @ EVERYWHERE , ?thm) =>> (EVERYWHERE_INFIX @ EVERYWHERE , ?thm) =>> (EVERYWHERE_PREFIX @ EVERYWHERE , ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE_CASE" "(EVERYWHERE_CASE @ ?EVERYWHERE , ?thm) , (?a || ?x , ?y) , (?thm => ?a || ((?EVERYWHERE @ ?thm) => ?x) , (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "TYPES" "TYPES , (?t : ?t : ?x) , (?t : ?x) , TYPES , 0";
forcetheorem "EQSYMM" "EQSYMM , (?x = ?y) , (?y = ?x) , EQSYMM , 0";
forcetheorem "BTYPE" "BTYPE , (?p == ?q) , (|- (|- ?p) == |- ?q) , BTYPE , 0";
forcetheorem "XRULE2" "XRULE2 , ((|- ?p) =/= ?q) , (?p =/= ?q) , PROP , TYPES , XORTYPE , 0";
forcetheorem "XORTYPE" "XORTYPE , (?p =/= ?q) , (|- (|- ?p) =/= |- ?q) , XORTYPE , 0";
forcetheorem "XRULE3" "XRULE3 , (?p =/= |- ?q) , (?p =/= ?q) , PROP , TYPES , XORTYPE , 0";
forcetheorem "NTYPE" "NTYPE , (~ ?p) , (|- ~ |- ?p) , NTYPE , 0";
forcetheorem "IRULE1" "IRULE1 , (|- ?p -> ?q) , (?p -> ?q) , IMPTYPE , PROP , TYPES , 0";
forcetheorem "IRULE2" "IRULE2 , ((|- ?p) -> ?q) , (?p -> ?q) , IMPTYPE , PROP , TYPES , 0";
forcetheorem "CNRULE1" "CNRULE1 , (|- ?p <- ?q) , (?p <- ?q) , CONTYPE , PROP , TYPES , 0";
forcetheorem "CNRULE2" "CNRULE2 , ((|- ?p) <- ?q) , (?p <- ?q) , CONTYPE , PROP , TYPES , 0";
forcetheorem "CONTYPE" "CONTYPE , (?p <- ?q) , (|- (|- ?p) <- |- ?q) , CONTYPE , 0";
forcetheorem "CNRULE3" "CNRULE3 , (?p <- |- ?q) , (?p <- ?q) , CONTYPE , PROP , TYPES , 0";
forcetheorem "STL" "STL , (?x ^+ |- ?y) , (((?p ^+ |- ?q) = ?p ^+ ?q) => ?x ^+ |- ?y) , 0";
forcetheorem "STR" "STR , ((|- ?x) ^+ ?y) , ((((|- ?p) ^+ ?q) = ?p ^+ ?q) => (|- ?x) ^+ ?y) , 0";
forcetheorem "STT" "STT , (|- ?x ^+ ?y) , (((|- ?p ^+ ?q) = ?p ^+ ?q) => |- ?x ^+ ?y) , 0";
forcetheorem "ALLASSERTS" "ALLASSERTS , (|- |- ?p) , (ALLASSERTS => |- ?p) , PROP , TYPES , 0";
forcetheorem "GCLEAN" "GCLEAN , ?x , ((RL @ GCLEAN) => NRULE2 => NRULE1 => STL => STR => STT => (ALLASSERTS ** RIGHT @ (RIGHT @ ALLASSERTS) ** LEFT @ ALLASSERTS) => ?x) , 0";
forcetheorem "ASSRTBOTH" "(ASSRTBOTH @ ?p) , (?p ^+ ?p) , (((?r ^+ |- ?s) = ?r ^+ ?s) <= (((|- ?r) ^+ ?s) = ?r ^+ ?s) <= ?p ^+ ?p) , 0";
forcetheorem "ASRTLEFT" "(ASRTLEFT @ ?p) , (?p ^+ ?q) , ((RIGHT @ MKASRT @ ?p) => (((|- ?r) ^+ ?s) = ?r ^+ ?s) <= ?p ^+ ?q) , 0";
forcetheorem "ASRTRIGHT" "(ASRTRIGHT @ ?p) , (?q ^+ ?p) , ((LEFT @ MKASRT @ ?p) => ((?r ^+ |- ?s) = ?r ^+ ?s) <= ?q ^+ ?p) , 0";
forcetheorem "MKASRT" "(MKASRT @ ?p) , (?r ^+ ?s) , (((ASSRTBOTH @ ?p) =>> (ASRTLEFT @ ?p) =>> (ASRTRIGHT @ ?p) =>> RL @ MKASRT @ ?p) => ?r ^+ ?s) , 0";
forcetheorem "THMAP" "(THMAP @ ?dir , ?astrm , ?thm) , (?x ^+ ?y) , ((?dir @ EVAL) => ?thm => (?dir @ (MKASRT @ ?astrm) ** BIND @ |- ?astrm) => ?x ^+ ?y) , 0";
forcetheorem "CONS" "CONS , (?p -> ?q) , (?q <- ?p) , CONS , 0";
forcetheorem "}DXM" "DXM , true , (?p | ~ ?p) , DXM , 0";
forcetheorem "}3pt15b" "3pt15b , false , ((~ ?p) == ?p) , BDIS , BID , FDEF , 0";
forcetheorem "XORSYM" "XORSYM , (?p =/= ?q) , (?q =/= ?p) , BSYM , XORDEF , 0";
forcetheorem "XORASSOC" "XORASSOC , ((?p =/= ?q) =/= ?r) , (?p =/= ?q =/= ?r) , BASSOC , BDIS , BSYM , XORDEF , 0";
forcetheorem "MUTASSOC" "MUTASSOC , ((?p =/= ?q) == ?r) , (?p =/= ?q == ?r) , BASSOC , BDIS , XORDEF , 0";
forcetheorem "MUTINT" "MUTINT , (?p =/= ?q == ?r) , (?p == ?q =/= ?r) , BDIS , BSYM , XORDEF , 0";
forcetheorem "DZERF" "(DZERF @ ?p) , true , (?p | true) , BID , DDIS , 0";
forcetheorem "}DZER" "DZER , true , (?p | true) , BID , DDIS , 0";
forcetheorem "3pt15bF" "(3pt15bF @ ?p) , false , ((~ ?p) == ?p) , BDIS , BID , FDEF , 0";
forcetheorem "3pt15b" "3pt15b , ((~ ?p) == ?p) , false , BDIS , BID , FDEF , 0";
forcetheorem "3pt32" "3pt32 , ((?p | ?q) == ?p | ~ ?q) , (|- ?p) , BDIS , BID , BID2 , BSYM , DDIS , DIDEM , DXM , FDEF , PROP , TYPES , 0";
forcetheorem "3pt32F" "(3pt32F @ ?q) , (|- ?p) , ((?p | ?q) == ?p | ~ ?q) , BDIS , BID , BID2 , BSYM , DDIS , DIDEM , DXM , FDEF , PROP , TYPES , 0";
forcetheorem "}3pt32" "3pt32 , (|- ?p) , ((?p | ?q) == ?p | ~ ?q) , BDIS , BID , BID2 , BSYM , DDIS , DIDEM , DXM , FDEF , PROP , TYPES , 0";
forcetheorem "GR" "GR , ((?p & ?q) == ?p | ?q) , (?p == ?q) , GR , 0";
forcetheorem "XORDEF" "XORDEF , (?p =/= ?q) , (~ ?p == ?q) , XORDEF , 0";
forcetheorem "CZERF" "(CZERF @ ?p) , false , (?p & false) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "}CZER" "CZER , false , (?p & false) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "CDISC" "CDISC , (?p & ?q & ?r) , ((?p & ?q) & ?p & ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt43aF" "(3pt43aF @ ?q) , (|- ?p) , (?p & ?p | ?q) , BASSOC , BID , BID2 , CTYPE , DASSOC , DIDEM , DTYPE , GR , PROP , TYPES , 0";
forcetheorem "}3pt43a" "3pt43a , (|- ?p) , (?p & ?p | ?q) , BASSOC , BID , BID2 , CTYPE , DASSOC , DIDEM , DTYPE , GR , PROP , TYPES , 0";
forcetheorem "3pt43b" "3pt43b , (?p | ?p & ?q) , (|- ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt43bF" "(3pt43bF @ ?q) , (|- ?p) , (?p | ?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt43b" "3pt43b , (|- ?p) , (?p | ?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt44b" "3pt44b , (?p | (~ ?p) & ?q) , (?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt48" "3pt48 , ((?p & ~ ?q) == ~ ?p) , (?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , XORDEF , XORTYPE , 0";
forcetheorem "L3pt43" "L3pt43 , (?p == (~ ?p) | ?q) , (?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt49" "3pt49 , ((?p & ?q) == (?p & ?r) == ?p) , (?p & ?q == ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "BRULE2" "BRULE2 , ((|- ?p) == ?q) , (?p == ?q) , BTYPE , PROP , TYPES , 0";
forcetheorem "GR2" "GR2 , ((?p == ?q) == ?p | ?q) , (?p & ?q) , BASSOC , BID , BID2 , CTYPE , GR , PROP , TYPES , 0";
forcetheorem "REPL" "REPL , ((?p == ?q) & ?r == ?p) , ((?p == ?q) & ?r == ?q) , BCONV , LZ , 0";
forcetheorem "DXMF" "(DXMF @ ?p) , true , (?p | ~ ?p) , DXM , 0";
forcetheorem "3pt50" "3pt50 , (?p & ?q == ?p) , (?p & ?q) , BASSOC , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , GR , PROP , TYPES , 0";
forcetheorem "3pt14" "3pt14 , (?p =/= ?q) , ((~ ?p) == ?q) , BDIS , XORDEF , 0";
forcetheorem "GR3" "GR3 , ((?p == ?q) == ?p & ?q) , (?p | ?q) , BASSOC , BID , BID2 , BSYM , DTYPE , GR , PROP , TYPES , 0";
forcetheorem "BID" "BID , (?p == ?p) , true , BID , 0";
forcetheorem "BRULE3" "BRULE3 , (?p == |- ?q) , (?p == ?q) , BTYPE , PROP , TYPES , 0";
forcetheorem "IDEF3" "IDEF3 , (?p -> ?q) , ((?p & ?q) == ?p) , BASSOC , BID , BID2 , BSYM , BTYPE , DTYPE , GR , IDEF , PROP , TYPES , 0";
forcetheorem "BDIS" "BDIS , (~ ?p == ?q) , ((~ ?p) == ?q) , BDIS , 0";
forcetheorem "3pt11" "3pt11 , ((~ ?p) == ?q) , (?p == ~ ?q) , BDIS , BSYM , 0";
forcetheorem "BASSOC" "BASSOC , ((?p == ?q) == ?r) , (?p == ?q == ?r) , BASSOC , 0";
forcetheorem "IDISB" "IDISB , (?p -> ?q == ?r) , ((?p -> ?q) == ?p -> ?r) , BASSOC , BSYM , DDIS , IDEF , 0";
forcetheorem "3pt62" "3pt62 , (?p -> ?q == ?r) , ((?p & ?q) == ?p & ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "CCON" "CCON , (?p & ~ ?p) , false , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt66" "3pt66 , (?p & ?p -> ?q) , (?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "CIDEM" "CIDEM , (?p & ?p) , (|- ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt43a" "3pt43a , (?p & ?p | ?q) , (|- ?p) , BASSOC , BID , BID2 , CTYPE , DASSOC , DIDEM , DTYPE , GR , PROP , TYPES , 0";
forcetheorem "3pt67" "3pt67 , (?p & ?q -> ?p) , (|- ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt67F" "(3pt67F @ ?q) , (|- ?p) , (?p & ?q -> ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt67" "3pt67 , (|- ?p) , (?p & ?q -> ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt68" "3pt68 , (?p | ?p -> ?q) , true , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt68F" "(3pt68F @ ?p , ?q) , true , (?p | ?p -> ?q) , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt68" "3pt68 , true , (?p | ?p -> ?q) , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "DDIS" "DDIS , (?p | ?q == ?r) , ((?p | ?q) == ?p | ?r) , DDIS , 0";
forcetheorem "IDEF" "IDEF , (?p -> ?q) , ((?p | ?q) == ?q) , IDEF , 0";
forcetheorem "DIDEM" "DIDEM , (?p | ?p) , (|- ?p) , DIDEM , 0";
forcetheorem "IRULE3" "IRULE3 , (?p -> |- ?q) , (?p -> ?q) , IMPTYPE , PROP , TYPES , 0";
forcetheorem "3pt69" "3pt69 , (?p | ?q -> ?p) , (?q -> ?p) , DASSOC , DDIS , DIDEM , DSYM , IDEF , IMPTYPE , PROP , TYPES , 0";
forcetheorem "BALTDEF" "BALTDEF , (?p == ?q) , ((?p & ?q) | (~ ?p) & ~ ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt70" "3pt70 , ((?p | ?q) -> ?p & ?q) , (?p == ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "IREFF" "(IREFF @ ?p) , true , (?p -> ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}IREF" "IREF , true , (?p -> ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "IRZERF" "(IRZERF @ ?p) , true , (?p -> true) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}IRZER" "IRZER , true , (?p -> true) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt74" "3pt74 , (?p -> false) , (~ ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt75F" "(3pt75F @ ?p) , true , (false -> ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt75" "3pt75 , true , (false -> ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76aF" "(3pt76aF @ ?p , ?q) , true , (?p -> ?p | ?q) , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt76a" "3pt76a , true , (?p -> ?p | ?q) , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76a" "3pt76a , (?p -> ?p | ?q) , true , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76bF" "(3pt76bF @ ?p , ?q) , true , ((?p & ?q) -> ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt76b" "3pt76b , true , ((?p & ?q) -> ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76c" "3pt76c , ((?p & ?q) -> ?p | ?q) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76cF" "(3pt76cF @ ?p , ?q) , true , ((?p & ?q) -> ?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt76c" "3pt76c , true , ((?p & ?q) -> ?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76dF" "(3pt76dF @ ?p , ?q , ?r) , true , ((?p | ?q & ?r) -> ?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt76d" "3pt76d , true , ((?p | ?q & ?r) -> ?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76d" "3pt76d , ((?p | ?q & ?r) -> ?p | ?q) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76e" "3pt76e , ((?p & ?q) -> ?p & ?q | ?r) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76eF" "(3pt76eF @ ?p , ?q , ?r) , true , ((?p & ?q) -> ?p & ?q | ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt76e" "3pt76e , true , ((?p & ?q) -> ?p & ?q | ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt44a" "3pt44a , (?p & (~ ?p) | ?q) , (?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt76b" "3pt76b , ((?p & ?q) -> ?p) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "MOP" "MOP , ((?p & ?p -> ?q) -> ?q) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "MOPF" "(MOPF @ ?p , ?q) , true , ((?p & ?p -> ?q) -> ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}MOP" "MOP , true , ((?p & ?p -> ?q) -> ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt78" "3pt78 , ((?p -> ?r) & ?q -> ?r) , ((?p | ?q) -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt79" "3pt79 , ((?p -> ?r) & (~ ?p) -> ?r) , (|- ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt79F" "(3pt79F @ ?p) , (|- ?r) , ((?p -> ?r) & (~ ?p) -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt79" "3pt79 , (|- ?r) , ((?p -> ?r) & (~ ?p) -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "XALTDEF" "XALTDEF , (?p =/= ?q) , (((~ ?p) & ?q) | ?p & ~ ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "IREF" "IREF , (?p -> ?p) , true , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt81" "3pt81 , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "3pt81F" "(3pt81F @ ?p , ?q) , true , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "}3pt81" "3pt81 , true , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "3pt64" "3pt64 , ((?p -> ?q) -> ?p -> ?r) , (?p -> ?q -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "DRULE2" "DRULE2 , ((|- ?p) | ?q) , (?p | ?q) , DTYPE , PROP , TYPES , 0";
forcetheorem "3pt82aF" "(3pt82aF @ ?p , ?q , ?r) , true , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}3pt82a" "3pt82a , true , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt80" "3pt80 , ((?p -> ?q) & ?q -> ?p) , (?p == ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "3pt82a" "3pt82a , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "IRZER" "IRZER , (?p -> true) , true , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt82bF" "(3pt82bF @ ?p , ?q , ?r) , true , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "}3pt82b" "3pt82b , true , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "NEQ" "NEQ , (?p == ?q) , ((~ ?p) == ~ ?q) , BDIS , BID , BID2 , BSYM , BTYPE , FDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "BSYM" "BSYM , (?p == ?q) , (?q == ?p) , BSYM , 0";
forcetheorem "3pt82b" "3pt82b , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "3pt82c" "3pt82c , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , true , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "3pt82cF" "(3pt82cF @ ?p , ?q , ?r) , true , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "}3pt82c" "3pt82c , true , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "REFLEX" "REFLEX , (?a = ?a) , true , REFLEX , 0";
forcetheorem "CZER" "CZER , (?p & false) , false , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt83" "3pt83 , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , true , ASRTEQ , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , REFLEX , TYPES , 0";
forcetheorem "3pt83F" "(3pt83F @ ?F , ?e , ?f) , true , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , ASRTEQ , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , REFLEX , TYPES , 0";
forcetheorem "}3pt83" "3pt83 , true , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , ASRTEQ , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , REFLEX , TYPES , 0";
forcetheorem "ASRTEQ" "ASRTEQ , (?e = ?f) , (|- ?e = ?f) , ASRTEQ , 0";
forcetheorem "3pt84b" "3pt84b , ((?e = ?f) -> ?F @ ?e) , ((?e = ?f) -> ?F @ ?f) , ASRTEQ , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt84c" "3pt84c , ((?q & ?e = ?f) -> ?F @ ?e) , ((?q & ?e = ?f) -> ?F @ ?f) , ASRTEQ , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "EQT" "EQT , ((|- ?p) = true) , (?p = true) , EQT , 0";
forcetheorem "BID2" "BID2 , (?p == true) , (|- ?p) , BID2 , 0";
forcetheorem "3pt65" "3pt65 , (?p -> ?q -> ?r) , ((?p & ?q) -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt85b" "3pt85b , ((?q & ?p) -> ?F @ ?p) , ((?q & ?p) -> ?F @ true) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , EQT , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "APLZ" "APLZ , ((?e = ?f) & ?x) , (((RIGHT @ BIND @ ?e) ** LZ ** RIGHT @ EVAL) => (?e = ?f) & ?x) , 0";
forcetheorem "LZ" "LZ , ((?e = ?f) & ?F @ ?e) , ((?e = ?f) & ?F @ ?f) , LZ , 0";
forcetheorem "BCONV" "BCONV , (?e == ?f) , ((|- ?e) = |- ?f) , BCONV , 0";
forcetheorem "3pt15a" "3pt15a , (?p == false) , (~ ?p) , BDIS , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "AP3pt86a" "AP3pt86a , (?x -> ?p) , ((THMAP @ LEFT , ?p , 3pt86a) => ?x -> ?p) , 0";
forcetheorem "3pt86b" "3pt86b , ((?F @ |- ?p) -> ?p | ?q) , ((?F @ false) -> ?p | ?q) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "AP3pt86b" "AP3pt86b , (?x -> ?p | ?q) , ((THMAP @ LEFT , ?p , 3pt86b) => ?x -> ?p | ?q) , 0";
forcetheorem "3pt85a" "3pt85a , (?p -> ?F @ ?p) , (?p -> ?F @ true) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , EQT , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "DRULE3" "DRULE3 , (?p | |- ?q) , (?p | ?q) , DTYPE , PROP , TYPES , 0";
forcetheorem "3pt88" "3pt88 , (?p | ?F @ |- ?p) , (?p | ?F @ false) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "AP3pt88" "AP3pt88 , (?p | ?x) , ((THMAP @ RIGHT , ?p , 3pt88) => ?p | ?x) , 0";
forcetheorem "3pt87" "3pt87 , (?p & ?F @ ?p) , (?p & ?F @ true) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , EQT , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "CRULE2" "CRULE2 , ((|- ?p) & ?q) , (?p & ?q) , CTYPE , PROP , TYPES , 0";
forcetheorem "CONTP" "CONTP , (?p -> ?q) , ((~ ?q) -> ~ ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt86a" "3pt86a , ((?F @ |- ?p) -> ?p) , ((?F @ false) -> ?p) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "CRULE3" "CRULE3 , (?p & |- ?q) , (?p & ?q) , CTYPE , PROP , TYPES , 0";
forcetheorem "CSYM" "CSYM , (?p & ?q) , (?q & ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "CDISD" "CDISD , (?p & ?q | ?r) , ((?p & ?q) | ?p & ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "DXM" "DXM , (?p | ~ ?p) , true , DXM , 0";
forcetheorem "CID" "CID , (?p & true) , (|- ?p) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "3pt89" "3pt89 , ((?p & ?F @ true) | (~ ?p) & ?F @ false) , (|- ?F @ |- ?p) , BASSOC , BCONV , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , EQT , FDEF , GR , IDEF , LZ , NTYPE , PROP , TYPES , 0";
forcetheorem "IDIS1" "IDIS1 , ((?p | ?q) -> ?r) , ((?p -> ?r) & ?q -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "IDIS2" "IDIS2 , ((?p & ?q) -> ?r) , ((?p -> ?r) | ?q -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "DDISC" "DDISC , (?p | ?q & ?r) , ((?p | ?q) & ?p | ?r) , BASSOC , BID , BID2 , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , GR , PROP , TYPES , 0";
forcetheorem "IDIS3" "IDIS3 , (?p -> ?q & ?r) , ((?p -> ?q) & ?p -> ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "**" "(?thm1 ** ?thm2) , ?x , (?thm2 => ?thm1 => ?x) , 0";
forcetheorem "DDISD" "DDISD , (?p | ?q | ?r) , ((?p | ?q) | ?p | ?r) , DASSOC , DIDEM , DSYM , DTYPE , PROP , TYPES , 0";
forcetheorem "RL" "(RL @ ?thm) , (?p ^+ ?q) , ((?thm => ?p) ^+ ?thm => ?q) , 0";
forcetheorem "IDEF2" "IDEF2 , (?p -> ?q) , ((~ ?p) | ?q) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "IDIS4" "IDIS4 , (?p -> ?q | ?r) , ((?p -> ?q) | ?p -> ?r) , BDIS , BID , BID2 , BSYM , BTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "AND_TYPE" "AND_TYPE , (?x & ?y) , (prop : (prop : ?x) & prop : ?y) , CTYPE , PROP , 0";
forcetheorem "CTYPE" "CTYPE , (?p & ?q) , (|- (|- ?p) & |- ?q) , CTYPE , 0";
forcetheorem "AND_TRUE" "AND_TRUE , (true & ?x) , (prop : ?x) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "AND_FALSE" "AND_FALSE , (false & ?x) , false , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "AND_COMM" "AND_COMM , (?x & ?y) , (?y & ?x) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "DUAL" "(DUAL @ ?thm) , ?x , (REMFLIP => (RIGHT @ ?thm) => FLIPALL => ?x) , 0";
forcetheorem "FLIPALL" "FLIPALL , ?x , (SFLIPALL => DUBNEG2 <= (BRULE1 <<= XRULE1 <<= DRULE1 <<= CRULE1) <= ?x) , 0";
forcetheorem "SFLIPALL" "SFLIPALL , ?x , ((FLIPPASTA =>> FLIPPASTN =>> FLIPPASTB =>> FLIPPASTX =>> FLIPPASTD =>> FLIPPASTC <<= FDEF =>> NEGF) => ?x) , 0";
forcetheorem "FLIPPASTA" "FLIPPASTA , (~ |- ?p) , (|- SFLIPALL => ~ ?p) , NTYPE , PROP , TYPES , 0";
forcetheorem "FLIPPASTN" "FLIPPASTN , (~ ~ ?x) , (~ SFLIPALL => ~ ?x) , 0";
forcetheorem "FLIPPASTB" "FLIPPASTB , (~ ?x == ?y) , ((SFLIPALL => ~ ?x) =/= SFLIPALL => ~ ?y) , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "FLIPPASTX" "FLIPPASTX , (~ ?x =/= ?y) , ((SFLIPALL => ~ ?x) == SFLIPALL => ~ ?y) , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "FLIPPASTD" "FLIPPASTD , (~ ?x | ?y) , ((SFLIPALL => ~ ?x) & SFLIPALL => ~ ?y) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "FLIPPASTC" "FLIPPASTC , (~ ?x & ?y) , ((SFLIPALL => ~ ?x) | SFLIPALL => ~ ?y) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "REMFLIP" "REMFLIP , ?x , ((BRULE1 =>> CRULE1 =>> DRULE1 =>> NRULE1 =>> XRULE1 =>> AT =>> AF) => TWOASSERTS => DUBNEG2 => SREMFLIP => ?x) , 0";
forcetheorem "SREMFLIP" "SREMFLIP , ?x , ((FDEF <<= NEGF <<= BFLIP <<= XORFLIP =>> DEMa =>> DEMb =>> REMA) => NOTCLEAN => ASSERTCLEAN => (LEFT @ SREMFLIP) => (RIGHT @ SREMFLIP) => ?x) , 0";
forcetheorem "RIGHT" "(RIGHT @ ?thm) , ?x , (((RIGHT1 @ ?thm) =>> RIGHT2 @ ?thm) => ?x) , 0";
forcetheorem "RIGHT1" "(RIGHT1 @ ?thm) , (?p ^+ ?q) , (?p ^+ ?thm => ?q) , 0";
forcetheorem "RIGHT2" "(RIGHT2 @ ?thm) , (^- ?x) , (^- ?thm => ?x) , 0";
forcetheorem "LEFT" "(LEFT @ ?thm) , ?x , (((LEFT1 @ ?thm) =>> LEFT2 @ ?thm) => ?x) , 0";
forcetheorem "LEFT1" "(LEFT1 @ ?thm) , (?p ^+ ?q) , ((?thm => ?p) ^+ ?q) , 0";
forcetheorem "LEFT2" "(LEFT2 @ ?thm) , (?x || ?y , ?z) , ((?thm => ?x) || ?y , ?z) , 0";
forcetheorem "ASSERTCLEAN" "ASSERTCLEAN , (|- ?y) , (|- ?y) , 0";
forcetheorem "NOTCLEAN" "NOTCLEAN , (~ ?y) , (~ ?y) , 0";
forcetheorem "BFLIP" "BFLIP , (~ ?p == ?q) , ((~ ?p) =/= ~ ?q) , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "XORFLIP" "XORFLIP , (~ ?p =/= ?q) , ((~ ?p) == ~ ?q) , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , XORDEF , 0";
forcetheorem "DEMa" "DEMa , ((~ ?p) | ~ ?q) , (~ ?p & ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "DEMb" "DEMb , ((~ ?p) & ~ ?q) , (~ ?p | ?q) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "REMA" "REMA , (|- ~ ?p) , (~ |- ?p) , NTYPE , PROP , TYPES , 0";
forcetheorem "DUBNEG2" "DUBNEG2 , (~ ~ ?p) , (|- ?p) , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "TWOASSERTS" "TWOASSERTS , (|- |- ?p) , (|- ?p) , PROP , TYPES , 0";
forcetheorem "BRULE1" "BRULE1 , (|- ?p == ?q) , (?p == ?q) , BTYPE , PROP , TYPES , 0";
forcetheorem "CRULE1" "CRULE1 , (|- ?p & ?q) , (?p & ?q) , CTYPE , PROP , TYPES , 0";
forcetheorem "DRULE1" "DRULE1 , (|- ?p | ?q) , (?p | ?q) , DTYPE , PROP , TYPES , 0";
forcetheorem "XRULE1" "XRULE1 , (|- ?p =/= ?q) , (?p =/= ?q) , PROP , TYPES , XORTYPE , 0";
forcetheorem "AT" "AT , (|- true) , true , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "AF" "AF , (|- false) , false , BDIS , BID , BID2 , BSYM , FDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "AND_ASSOC" "AND_ASSOC , (?x & ?y & ?z) , ((?x & ?y) & ?z) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "CASSOC" "CASSOC , ((?p & ?q) & ?r) , (?p & ?q & ?r) , BASSOC , BDIS , BID , BID2 , BSYM , BTYPE , CTYPE , DASSOC , DDIS , DIDEM , DSYM , DTYPE , DXM , FDEF , GR , NTYPE , PROP , TYPES , 0";
forcetheorem "OR_TYPE" "OR_TYPE , (?x | ?y) , (prop : (prop : ?x) | prop : ?y) , DTYPE , PROP , 0";
forcetheorem "DTYPE" "DTYPE , (?p | ?q) , (|- (|- ?p) | |- ?q) , DTYPE , 0";
forcetheorem "OR_COMM" "OR_COMM , (?x | ?y) , (?y | ?x) , DSYM , 0";
forcetheorem "OR_TRUE" "OR_TRUE , (true | ?x) , true , BID , DDIS , DSYM , 0";
forcetheorem "DZER" "DZER , (?p | true) , true , BID , DDIS , 0";
forcetheorem "OR_FALSE" "OR_FALSE , (false | ?x) , (prop : ?x) , BDIS , BID , BID2 , BSYM , DDIS , DIDEM , DSYM , DXM , FDEF , PROP , TYPES , 0";
forcetheorem "DSYM" "DSYM , (?p | ?q) , (?q | ?p) , DSYM , 0";
forcetheorem "DID" "DID , (?p | false) , (|- ?p) , BDIS , BID , BID2 , BSYM , DDIS , DIDEM , DXM , FDEF , PROP , TYPES , 0";
forcetheorem "OR_ASSOC" "OR_ASSOC , (?x | ?y | ?z) , ((?x | ?y) | ?z) , DASSOC , 0";
forcetheorem "DASSOC" "DASSOC , ((?p | ?q) | ?r) , (?p | ?q | ?r) , DASSOC , 0";
forcetheorem "NOT_TYPE" "NOT_TYPE , (~ ?x) , (prop : ~ prop : ?x) , NTYPE , PROP , TYPES , 0";
forcetheorem "$" "($ ?thm) , ?x , (?thm <= ?x) , 0";
forcetheorem "NRULE1" "NRULE1 , (|- ~ ?p) , (~ ?p) , NTYPE , PROP , TYPES , 0";
forcetheorem "NRULE2" "NRULE2 , (~ |- ?p) , (~ ?p) , NTYPE , PROP , TYPES , 0";
forcetheorem "NOT_TRUE" "NOT_TRUE , (~ true) , false , FDEF , 0";
forcetheorem "FDEF" "FDEF , false , (~ true) , FDEF , 0";
forcetheorem "NOT_FALSE" "NOT_FALSE , (~ false) , true , BDIS , BID , BSYM , FDEF , 0";
forcetheorem "NEGF" "NEGF , (~ false) , true , BDIS , BID , BSYM , FDEF , 0";
forcetheorem "IMP_TYPE" "IMP_TYPE , (?x -> ?y) , (prop : (prop : ?x) -> prop : ?y) , IMPTYPE , PROP , 0";
forcetheorem "IMPTYPE" "IMPTYPE , (?p -> ?q) , (|- (|- ?p) -> |- ?q) , IMPTYPE , 0";
forcetheorem "EVERYWHERE2" "(EVERYWHERE2 @ ?thm) , ?x , (((STRONG_EVERYWHERE_CASE @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_INFIX @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_PREFIX @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_ABS @ EVERYWHERE2 , ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "STRONG_EVERYWHERE_CASE" "(STRONG_EVERYWHERE_CASE @ ?EVERYWHERE , ?thm) , (?a || ?x , ?y) , (?thm => ((?EVERYWHERE @ ?thm) => ?a) || ((?EVERYWHERE @ ?thm) => ?x) , (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_INFIX" "(EVERYWHERE_INFIX @ ?EVERYWHERE , ?thm) , (?x ^+ ?y) , (?thm => ((?EVERYWHERE @ ?thm) => ?x) ^+ (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_PREFIX" "(EVERYWHERE_PREFIX @ ?EVERYWHERE , ?thm) , (^-- ?x) , (?thm => ^-- (?EVERYWHERE @ ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE_ABS" "(EVERYWHERE_ABS @ ?EVERYWHERE , ?thm) , [?f @ ?1] , (?thm => [(?EVERYWHERE @ ?thm) => ?f @ ?1]) , 0";
forcetheorem "IMP_TRUE" "IMP_TRUE , (true -> ?x) , (prop : ?x) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "ILID" "ILID , (true -> ?p) , (|- ?p) , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "PROP" "PROP , (|- ?p) , (prop : ?p) , PROP , 0";
forcetheorem "IMP_FALSE" "IMP_FALSE , (false -> ?x) , true , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "}backup" "backup , (true -> ?x) , (prop : ?x) , PROP , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , TYPES , 0";
forcetheorem "3pt75" "3pt75 , (false -> ?p) , true , BDIS , BID , BID2 , BSYM , BTYPE , DDIS , DIDEM , DSYM , DXM , FDEF , IDEF , NTYPE , PROP , TYPES , 0";
forcetheorem "SD_TYPE" "SD_TYPE , (?x `sd ?y) , (Message : (Skey : ?x) `sd Message : ?y) , SD_TYPE , 0";
forcetheorem "SE_TYPE" "SE_TYPE , (?x `se ?y) , (Message : (Skey : ?x) `se Message : ?y) , SE_TYPE , 0";
forcetheorem "SED_TYPE" "SED_TYPE , (?x `sed ?y) , (Message : (Skey : ?x) `sed Message : ?y) , SED_TYPE , 0";
forcetheorem "SED_AXIOM1" "SED_AXIOM1 , (?k `sd ?k `se ?x) , (Message : ?x) , SED_AXIOM1 , 0";
forcetheorem "SED_AXIOM2" "SED_AXIOM2 , (?k `se ?k `sd ?x) , (Message : ?x) , SED_AXIOM2 , 0";
forcetheorem "SED_AXIOM3" "SED_AXIOM3 , (?k `sed ?k `sed ?x) , (Message : ?x) , SED_AXIOM3 , 0";
forcetheorem "PKEY_IS_KEY" "PKEY_IS_KEY , (Pkey : ?x) , (Key : Pkey : ?x) , PKEY_IS_KEY , 0";
forcetheorem "pKEY_IS_PKEY" "pKEY_IS_PKEY , (pkey : ?x) , (Pkey : pkey : ?x) , pKEY_IS_PKEY , 0";
forcetheorem "sKEY_IS_PKEY" "sKEY_IS_PKEY , (skey : ?x) , (Pkey : skey : ?x) , sKEY_IS_PKEY , 0";
forcetheorem "SKEY_IS_KEY" "SKEY_IS_KEY , (Skey : ?x) , (Key : Skey : ?x) , SKEY_IS_KEY , 0";
forcetheorem "INV_TYPE" "INV_TYPE , (`INV ?x) , (Key : `INV Key : ?x) , INV_TYPE , 0";
forcetheorem "SYMM_KEY_INV" "SYMM_KEY_INV , (`INV Skey : ?x) , (Skey : ?x) , SYMM_KEY_INV , 0";
forcetheorem "KEYPAIR_TYPE" "KEYPAIR_TYPE , (keypair @ ?x , ?y) , (prop : keypair @ (pkey : ?x) , skey : ?y) , KEYPAIR_TYPE , 0";
forcetheorem "PKEY_INV1" "PKEY_INV1 , ((keypair @ ?pkey , ?skey) -> (`INV ?pkey) = Pkey : ?skey) , true , PKEY_INV1 , 0";
forcetheorem "PKEY_INV2" "PKEY_INV2 , ((keypair @ ?pkey , ?skey) -> (`INV ?skey) = Pkey : ?pkey) , true , PKEY_INV2 , 0";
forcetheorem "PE_TYPE" "PE_TYPE , (?x `pe ?y) , (Message : (pkey : ?x) `pe Message : ?y) , PE_TYPE , 0";
forcetheorem "PD_TYPE" "PD_TYPE , (?x `pe ?y) , (Message : (skey : ?x) `pd Message : ?y) , PD_TYPE , 0";
forcetheorem "PED_TYPE" "PED_TYPE , (?x `ped ?y) , (Message : (Pkey : ?x) `ped Message : ?y) , PED_TYPE , 0";
forcetheorem "PED_AXIOM1" "PED_AXIOM1 , ((keypair @ ?pk , ?sk) -> ?pk `pd (?sk `pe ?x) = Message : ?x) , true , PED_AXIOM1 , 0";
forcetheorem "PED_AXIOM2" "PED_AXIOM2 , ((keypair @ ?pk , ?sk) -> ?sk `pd (?pk `pe ?x) = Message : ?x) , true , PED_AXIOM2 , 0";
forcetheorem "PED_AXIOM3" "PED_AXIOM3 , ((keypair @ ?pk , ?sk) -> ?pk `pe (?sk `pd ?x) = Message : ?x) , true , PED_AXIOM3 , 0";
forcetheorem "PED_AXIOM4" "PED_AXIOM4 , ((keypair @ ?pk , ?sk) -> ?sk `pe (?pk `pd ?x) = Message : ?x) , true , PED_AXIOM4 , 0";
forcetheorem "PED_AXIOM5" "PED_AXIOM5 , ((keypair @ ?pk , ?sk) -> ?sk `ped (?pk `ped ?x) = Message : ?x) , true , PED_AXIOM5 , 0";
forcetheorem "PED_AXIOM6" "PED_AXIOM6 , ((keypair @ ?pk , ?sk) -> ?pk `ped (?sk `ped ?x) = Message : ?x) , true , PED_AXIOM6 , 0";
forcetheorem "SHARED_TYPE" "SHARED_TYPE , (shared_key @ ?x , ?y , ?k) , (prop : shared_key @ (Principal : ?x) , (Principal : ?y) , Skey : ?k) , SHARED_TYPE , 0";
forcetheorem "PKE_TYPE" "PKE_TYPE , (pke @ ?x , ?k) , (prop : pke @ (Principal : ?x) , pkey : ?k) , PKE_TYPE , 0";
forcetheorem "PKS_TYPE" "PKS_TYPE , (pks @ ?x , ?k) , (prop : pks @ (Principal : ?x) , skey : ?k) , PKS_TYPE , 0";
forcetheorem "PKA_TYPE" "PKA_TYPE , (pka @ ?x , ?k) , (prop : pka @ (Principal : ?x) , Pkey : ?k) , PKA_TYPE , 0";
forcetheorem "SV_TYPE" "SV_TYPE , (sv @ ?x , ?k , ?y) , (prop : sv @ (Message : ?x) , (Pkey : ?k) , Message : ?y) , SV_TYPE , 0";
forcetheorem "KEY_IS_MESSAGE" "KEY_IS_MESSAGE , (Key : ?y) , (Message : Key : ?y) , KEY_IS_MESSAGE , 0";
forcetheorem "PRINCIPAL_IS_MESSAGE" "PRINCIPAL_IS_MESSAGE , (Principal : ?x) , (Message : Principal : ?x) , PRINCIPAL_IS_MESSAGE , 0";
forcetheorem "PROP_IS_MESSAGE" "PROP_IS_MESSAGE , (prop : ?y) , (Message : prop : ?y) , PROP_IS_MESSAGE , 0";
forcetheorem "MESSAGE_TYPE" "MESSAGE_TYPE , (Message : ?x , ?y) , (Message : (Message : ?x) , Message : ?y) , MESSAGE_TYPE , 0";
forcetheorem "BELIEVE_TYPE" "BELIEVE_TYPE , (?x `BELIEVES ?y) , (prop : (Principal : ?x) `BELIEVES prop : ?y) , BELIEVE_TYPE , 0";
forcetheorem "BELIEVE_AND" "BELIEVE_AND , (?P `BELIEVES ?x & ?y) , ((?P `BELIEVES ?x) & ?P `BELIEVES ?y) , BELIEVE_AND , 0";
forcetheorem "BELIEVE_IMP" "BELIEVE_IMP , ((?P `BELIEVES ?x -> ?y) -> (?P `BELIEVES ?x) -> ?P `BELIEVES ?y) , true , BELIEVE_IMP , 0";
forcetheorem "HOLDS_TYPE" "HOLDS_TYPE , (?x `HOLDS ?y) , (prop : Principal : ?x `HOLDS Key : ?y) , HOLDS_TYPE , 0";
forcetheorem "HOLDS_AXIOM" "HOLDS_AXIOM , (?P `HOLDS ?x , ?y) , ((?P `HOLDS ?x) & ?P `HOLDS ?y) , HOLDS_AXIOM , 0";
forcetheorem "RECEIVED_TYPE" "RECEIVED_TYPE , (?x `RECEIVED ?y) , (prop : Principal : ?x `RECEIVED Message : ?y) , RECEIVED_TYPE , 0";
forcetheorem "RECEIVE_FROM_TYPE" "RECEIVE_FROM_TYPE , (?x `RECEIVED_FROM ?y , ?z) , (prop : Principal : ?x `RECEIVED_FROM Principal : ?y , Message : ?z) , RECEIVE_FROM_TYPE , 0";
forcetheorem "RECEIVED_AXIOM" "RECEIVED_AXIOM , (?P `RECEIVED ?x , ?y) , ((?P `RECEIVED ?x) & ?P `RECEIVED ?y) , RECEIVED_AXIOM , 0";
forcetheorem "SAID_TYPE" "SAID_TYPE , (?x `SAID ?y) , (prop : Principal : ?x `SAID Message : ?y) , SAID_TYPE , 0";
forcetheorem "SAID_AXIOM" "SAID_AXIOM , (?P `SAID ?x , ?y) , ((?P `SAID ?x) & ?P `SAID ?y) , SAID_AXIOM , 0";
forcetheorem "SAYS_TYPE" "SAYS_TYPE , (?x `SAYS ?y) , (prop : Principal : ?x `SAYS Message : ?y) , SAYS_TYPE , 0";
forcetheorem "SAYS_AXIOM" "SAYS_AXIOM , (?P `SAYS ?x , ?y) , ((?P `SAYS ?x) & ?P `SAYS ?y) , SAYS_AXIOM , 0";
forcetheorem "SEES_TYPE" "SEES_TYPE , (?x `SEES ?y) , (prop : Principal : ?x `SEES Message : ?y) , SEES_TYPE , 0";
forcetheorem "CONTROLS_TYPE" "CONTROLS_TYPE , (?x `CONTROLS ?y) , (prop : Principal : ?x `CONTROLS prop : ?y) , CONTROLS_TYPE , 0";
forcetheorem "FRESH_TYPE" "FRESH_TYPE , (Fresh @ ?x) , (prop : Fresh @ Message : ?x) , FRESH_TYPE , 0";
forcetheorem "SHARED_KEY_IMP_SEES_KEY" "SHARED_KEY_IMP_SEES_KEY , ((shared_key @ ?x , ?y , ?k) -> ?x `SEES ?k) , true , SHARED_KEY_IMP_SEES_KEY , 0";
forcetheorem "RECEIVEDFROM_IS_RECEIVED" "RECEIVEDFROM_IS_RECEIVED , ((?x `RECEIVED_FROM ?y , ?z) -> ?x `RECEIVED ?z) , true , RECEIVEDFROM_IS_RECEIVED , 0";
forcetheorem "BELIEVES_BELIEVES_IS_BELIEVES" "BELIEVES_BELIEVES_IS_BELIEVES , (?P `BELIEVES ?P `BELIEVES ?si) , (?P `BELIEVES ?si) , BELIEVES_BELIEVES_IS_BELIEVES , 0";
forcetheorem "NECESSITATION" "NECESSITATION , (?A `BELIEVES true) , true , NECESSITATION , 0";
forcetheorem "SAID_IMP1" "SAID_IMP1 , ((?P `SAID ?x , ?y) -> ?P `SAID ?x) , true , SAID_IMP1 , 0";
forcetheorem "SAID_IMP2" "SAID_IMP2 , ((?P `SAID ?x , ?y) -> ?P `SAID ?x) , true , SAID_IMP2 , 0";
forcetheorem "AXIOM_01" "AXIOM_01 , (((?P `BELIEVES ?si) & ?P `BELIEVES ?si -> ?delta) -> ?P `BELIEVES ?delta) , true , AXIOM_01 , 0";
forcetheorem "AXIOM_02" "AXIOM_02 , ((?P `BELIEVES ?si) -> ?P `BELIEVES ?P `BELIEVES ?si) , true , AXIOM_02 , 0";
forcetheorem "AXIOM_03A" "AXIOM_03A , (((shared_key @ ?P , ?Q , ?k) & ?R `RECEIVED_FROM ?Q , ?k `se ?x) -> (?Q `SAID ?x) & ?Q `SEES ?k) , true , AXIOM_03A , 0";
forcetheorem "AXIOM_03B" "AXIOM_03B , (((shared_key @ ?P , ?Q , ?k) & ?R `RECEIVED_FROM ?Q , ?k `se ?x) -> (?Q `SAID ?x) & ?Q `SEES ?k) , true , AXIOM_03B , 0";
forcetheorem "AXIOM_04" "AXIOM_04 , (((pks @ ?Q , ?k) & (?R `RECEIVED ?x) & sv @ ?x , ?k , ?y) -> ?Q `SAID ?y) , true , AXIOM_04 , 0";
forcetheorem "AXIOM_7A" "AXIOM_7A , ((?P `RECEIVED ?x , ?y) -> ?P `RECEIVED ?x) , true , AXIOM_7A , 0";
forcetheorem "AXIOM_7B" "AXIOM_7B , ((?P `RECEIVED ?x , ?y) -> ?P `RECEIVED ?y) , true , AXIOM_7B , 0";
forcetheorem "AXIOM_7C" "AXIOM_7C , ((?P `RECEIVED_FROM ?z , ?x , ?y) -> ?P `RECEIVED_FROM ?z , ?x) , true , AXIOM_7C , 0";
forcetheorem "AXIOM_7D" "AXIOM_7D , ((?P `RECEIVED_FROM ?z , ?x , ?y) -> ?P `RECEIVED_FROM ?z , ?y) , true , AXIOM_7D , 0";
forcetheorem "AXIOM_08" "AXIOM_08 , (((keypair @ ?pk , ?sk) -> (?P `RECEIVED ?pk `pe ?x) & ?P `SEES `INV Pkey : ?pk) -> ?P `RECEIVED ?x) , true , AXIOM_08 , 0";
forcetheorem "AXIOM_09" "AXIOM_09 , ((?P `RECEIVED ?sk `pe ?x) -> ?P `RECEIVED ?x) , true , AXIOM_09 , 0";
forcetheorem "AXIOM_10" "AXIOM_10 , ((?P `RECEIVED ?x) -> ?P `SEES ?x) , true , AXIOM_10 , 0";
forcetheorem "AXIOM_11A" "AXIOM_11A , ((?P `SEES ?x , ?y) -> ?P `SEES ?x) , true , AXIOM_11A , 0";
forcetheorem "AXIOM_11B" "AXIOM_11B , ((?P `SEES ?x , ?y) -> ?P `SEES ?y) , true , AXIOM_11B , 0";
forcetheorem "AXIOM_14A" "AXIOM_14A , ((?P `SAID ?x , ?y) -> (?P `SAID ?x) & ?P `SEES ?x) , true , AXIOM_14A , 0";
forcetheorem "AXIOM_14B" "AXIOM_14B , ((?P `SAID ?x , ?y) -> (?P `SAID ?y) & ?P `SEES ?y) , true , AXIOM_14B , 0";
forcetheorem "AXIOM_15A" "AXIOM_15A , ((?P `SAYS ?x , ?y) -> (?P `SAID ?x , ?y) & ?P `SAYS ?x) , true , AXIOM_15A , 0";
forcetheorem "AXIOM_15B" "AXIOM_15B , ((?P `SAYS ?x , ?y) -> (?P `SAID ?x , ?y) & ?P `SAYS ?y) , true , AXIOM_15B , 0";
forcetheorem "AXIOM_16" "AXIOM_16 , (((?P `CONTROLS ?si) & ?P `SAYS ?si) -> ?si) , true , AXIOM_16 , 0";
forcetheorem "AXIOM_17A" "AXIOM_17A , ((Fresh @ ?x) -> Fresh @ ?x , ?y) , true , AXIOM_17A , 0";
forcetheorem "AXIOM_17B" "AXIOM_17B , ((Fresh @ ?y) -> Fresh @ ?x , ?y) , true , AXIOM_17B , 0";
forcetheorem "AXIOM_19" "AXIOM_19 , (((Fresh @ ?x) & ?P `SAID ?x) -> ?P `SAYS ?x) , true , AXIOM_19 , 0";
forcetheorem "AXIOM_20" "AXIOM_20 , (shared_key @ ?x , ?y , ?k) , (shared_key @ ?y , ?x , ?k) , AXIOM_20 , 0";
forcetheorem "P_1A" "P_1A , (A `BELIEVES Fresh @ Na) , true , P_1A , 0";
forcetheorem "P_1B" "P_1B , (B `BELIEVES Fresh @ Nb) , true , P_1B , 0";
forcetheorem "P_2A" "P_2A , (A `BELIEVES S `CONTROLS shared_key @ A , B , Kab) , true , P_2A , 0";
forcetheorem "P_2B" "P_2B , (B `BELIEVES S `CONTROLS shared_key @ A , B , Kab) , true , P_2B , 0";
forcetheorem "P_3A" "P_3A , (A `BELIEVES S `CONTROLS Fresh @ Skey : Kab) , true , P_3A , 0";
forcetheorem "P_3B" "P_3B , (B `BELIEVES S `CONTROLS Fresh @ Skey : Kab) , true , P_3B , 0";
forcetheorem "P_4A" "P_4A , (A `BELIEVES shared_key @ A , S , Kas) , true , P_4A , 0";
forcetheorem "P_4B" "P_4B , (B `BELIEVES shared_key @ B , S , Kbs) , true , P_4B , 0";
forcetheorem "P_5" "P_5 , (A `RECEIVED Kas `se Na , (Principal : B) , (Key : Kab) , Kbs `se (Key : Kab) , Principal : A) , true , P_5 , 0";
forcetheorem "P_6" "P_6 , (B `RECEIVED Kbs `se (Key : Kab) , Principal : A) , true , P_6 , 0";
forcetheorem "P_7" "P_7 , (A `RECEIVED Kab `se Nb) , true , P_7 , 0";
forcetheorem "P_8" "P_8 , (B `RECEIVED Kab `se Nb - 1) , true , P_8 , 0";
forcetheorem "P_9" "P_9 , (A `BELIEVES A `RECEIVED Kas `se Na , (Principal : B) , (Message : ?x) , Message : ?y) , true , P_9 , 0";
forcetheorem "P_10" "P_10 , (B `BELIEVES B `RECEIVED Kbs `se (Message : ?z) , Principal : A) , true , P_10 , 0";
forcetheorem "P_11" "P_11 , (B `BELIEVES B `RECEIVED (Message : ?z) `se Nb - 1) , true , P_11 , 0";
forcetheorem "P_12A" "P_12A , (A `BELIEVES (A `RECEIVED Kas `se Na , (Principal : B) , (Message : ?x) , Message : ?y) -> A `RECEIVED Kas `se Na , (Principal : B) , ((shared_key @ A , B , Kab) , Fresh @ Skey : Kab) , Message : ?y) , true , P_12A , 0";
forcetheorem "P_13B" "P_13B , (B `BELIEVES (B `RECEIVED Kbs `se (Message : ?z) , Principal : A) -> B `RECEIVED Kbs `se ((shared_key @ A , B , Kab) , Fresh @ Skey : Kab) , Principal : A) , true , P_13B , 0";
forcetheorem "P_14" "P_14 , (B `BELIEVES ((B `RECEIVED Kbs `se (Message : ?z) , Principal : A) & B `RECEIVED (Message : ?z) `se Nb - 1) -> B `RECEIVED Kab `se Nb - 1) , true , P_14 , 0";
forcetheorem "P_15" "P_15 , (A `BELIEVES (A `RECEIVED Kas `se Na , ?x) -> A `RECEIVED_FROM S , Kas `se Na , ?x) , true , P_15 , 0";
adddef "PROP" "|-";
adddef "True" "True";
adddef "Bool" "Bool";
adddef "UNIONTYPE" "<+>";
adddef "PRODTYPE" "<*>";
adddef "ARROWTYPE" "->>";
adddef "upfun" "upfun";
adddef "IGNOREFIRST" ".";
adddef "Id" "Id";
adddef "p2" "p2";
adddef "p1" "p1";
adddef "P2" "P2";
adddef "P1" "P1";
adddef "COMP" "@@";
addscript "capsl_ns_axioms";
addscript "capsl_svo";
addscript "capsl_capstuff";
addscript "capsl_defination_file";
addscript "prop_logic";
addscript "typestuff";
addscript "structural";
setprogram "p2" "p2";
setprogram "p1" "p1";
adddefdep2 "P_15" "0";
adddefdep2 "P_14" "0";
adddefdep2 "P_13B" "0";
adddefdep2 "P_12A" "0";
adddefdep2 "P_11" "0";
adddefdep2 "P_10" "0";
adddefdep2 "P_9" "0";
adddefdep2 "P_8" "0";
adddefdep2 "P_7" "0";
adddefdep2 "P_6" "0";
adddefdep2 "P_5" "0";
adddefdep2 "P_4B" "0";
adddefdep2 "P_4A" "0";
adddefdep2 "P_3B" "0";
adddefdep2 "P_3A" "0";
adddefdep2 "P_2B" "0";
adddefdep2 "P_2A" "0";
adddefdep2 "P_1B" "0";
adddefdep2 "P_1A" "0";
adddefdep2 "AXIOM_20" "0";
adddefdep2 "AXIOM_19" "0";
adddefdep2 "AXIOM_17B" "0";
adddefdep2 "AXIOM_17A" "0";
adddefdep2 "AXIOM_16" "0";
adddefdep2 "AXIOM_15B" "0";
adddefdep2 "AXIOM_15A" "0";
adddefdep2 "AXIOM_14B" "0";
adddefdep2 "AXIOM_14A" "0";
adddefdep2 "AXIOM_11B" "0";
adddefdep2 "AXIOM_11A" "0";
adddefdep2 "AXIOM_10" "0";
adddefdep2 "AXIOM_09" "0";
adddefdep2 "AXIOM_08" "0";
adddefdep2 "AXIOM_7D" "0";
adddefdep2 "AXIOM_7C" "0";
adddefdep2 "AXIOM_7B" "0";
adddefdep2 "AXIOM_7A" "0";
adddefdep2 "AXIOM_04" "0";
adddefdep2 "AXIOM_03B" "0";
adddefdep2 "AXIOM_03A" "0";
adddefdep2 "AXIOM_02" "0";
adddefdep2 "AXIOM_01" "0";
adddefdep2 "SAID_IMP2" "0";
adddefdep2 "SAID_IMP1" "0";
adddefdep2 "NECESSITATION" "0";
adddefdep2 "BELIEVES_BELIEVES_IS_BELIEVES" "0";
adddefdep2 "RECEIVEDFROM_IS_RECEIVED" "0";
adddefdep2 "SHARED_KEY_IMP_SEES_KEY" "0";
adddefdep2 "FRESH_TYPE" "0";
adddefdep2 "CONTROLS_TYPE" "0";
adddefdep2 "SEES_TYPE" "0";
adddefdep2 "SAYS_AXIOM" "0";
adddefdep2 "SAYS_TYPE" "0";
adddefdep2 "SAID_AXIOM" "0";
adddefdep2 "SAID_TYPE" "0";
adddefdep2 "RECEIVED_AXIOM" "0";
adddefdep2 "RECEIVE_FROM_TYPE" "0";
adddefdep2 "RECEIVED_TYPE" "0";
adddefdep2 "HOLDS_AXIOM" "0";
adddefdep2 "HOLDS_TYPE" "0";
adddefdep2 "BELIEVE_IMP" "0";
adddefdep2 "BELIEVE_AND" "0";
adddefdep2 "BELIEVE_TYPE" "0";
adddefdep2 "MESSAGE_TYPE" "0";
adddefdep2 "PROP_IS_MESSAGE" "0";
adddefdep2 "PRINCIPAL_IS_MESSAGE" "0";
adddefdep2 "KEY_IS_MESSAGE" "0";
adddefdep2 "SV_TYPE" "0";
adddefdep2 "PKA_TYPE" "0";
adddefdep2 "PKS_TYPE" "0";
adddefdep2 "PKE_TYPE" "0";
adddefdep2 "SHARED_TYPE" "0";
adddefdep2 "PED_AXIOM6" "0";
adddefdep2 "PED_AXIOM5" "0";
adddefdep2 "PED_AXIOM4" "0";
adddefdep2 "PED_AXIOM3" "0";
adddefdep2 "PED_AXIOM2" "0";
adddefdep2 "PED_AXIOM1" "0";
adddefdep2 "PED_TYPE" "0";
adddefdep2 "PD_TYPE" "0";
adddefdep2 "PE_TYPE" "0";
adddefdep2 "PKEY_INV2" "0";
adddefdep2 "PKEY_INV1" "0";
adddefdep2 "KEYPAIR_TYPE" "0";
adddefdep2 "SYMM_KEY_INV" "0";
adddefdep2 "INV_TYPE" "0";
adddefdep2 "SKEY_IS_KEY" "0";
adddefdep2 "sKEY_IS_PKEY" "0";
adddefdep2 "pKEY_IS_PKEY" "0";
adddefdep2 "PKEY_IS_KEY" "0";
adddefdep2 "SED_AXIOM3" "0";
adddefdep2 "SED_AXIOM2" "0";
adddefdep2 "SED_AXIOM1" "0";
adddefdep2 "SED_TYPE" "0";
adddefdep2 "SE_TYPE" "0";
adddefdep2 "SD_TYPE" "0";
adddefdep2 "IMP_FALSE" "0";
adddefdep2 "IMP_TRUE" "0";
adddefdep2 "IMP_TYPE" "0";
adddefdep2 "NOT_FALSE" "0";
adddefdep2 "NOT_TRUE" "0";
adddefdep2 "NOT_TYPE" "0";
adddefdep2 "OR_ASSOC" "0";
adddefdep2 "OR_FALSE" "0";
adddefdep2 "OR_TRUE" "0";
adddefdep2 "OR_COMM" "0";
adddefdep2 "OR_TYPE" "0";
adddefdep2 "AND_ASSOC" "0";
adddefdep2 "AND_FALSE" "0";
adddefdep2 "AND_TRUE" "0";
adddefdep2 "AND_COMM" "0";
adddefdep2 "AND_TYPE" "0";
adddefdep2 "IDIS4" "0";
adddefdep2 "IDIS3" "0";
adddefdep2 "IDIS2" "0";
adddefdep2 "IDIS1" "0";
adddefdep2 "3pt89" "PROP , 0";
adddefdep2 "AP3pt88" "0";
adddefdep2 "3pt88" "PROP , 0";
adddefdep2 "3pt87" "0";
adddefdep2 "AP3pt86b" "0";
adddefdep2 "3pt86b" "PROP , 0";
adddefdep2 "AP3pt86a" "0";
adddefdep2 "3pt86a" "PROP , 0";
adddefdep2 "3pt85b" "0";
adddefdep2 "3pt85a" "0";
adddefdep2 "3pt84c" "0";
adddefdep2 "3pt84b" "0";
adddefdep2 "3pt83F" "0";
adddefdep2 "3pt83" "0";
adddefdep2 "3pt82cF" "0";
adddefdep2 "3pt82c" "0";
adddefdep2 "3pt82bF" "0";
adddefdep2 "3pt82b" "0";
adddefdep2 "3pt82aF" "0";
adddefdep2 "3pt82a" "0";
adddefdep2 "3pt81F" "0";
adddefdep2 "3pt81" "0";
adddefdep2 "3pt80" "0";
adddefdep2 "3pt79F" "PROP , 0";
adddefdep2 "3pt79" "PROP , 0";
adddefdep2 "3pt78" "0";
adddefdep2 "MOPF" "0";
adddefdep2 "MOP" "0";
adddefdep2 "3pt76eF" "0";
adddefdep2 "3pt76e" "0";
adddefdep2 "3pt76dF" "0";
adddefdep2 "3pt76d" "0";
adddefdep2 "3pt76cF" "0";
adddefdep2 "3pt76c" "0";
adddefdep2 "3pt76bF" "0";
adddefdep2 "3pt76b" "0";
adddefdep2 "3pt76aF" "0";
adddefdep2 "3pt76a" "0";
adddefdep2 "3pt75F" "0";
adddefdep2 "3pt75" "0";
adddefdep2 "3pt74" "0";
adddefdep2 "ILID" "PROP , 0";
adddefdep2 "IRZERF" "0";
adddefdep2 "IRZER" "0";
adddefdep2 "IREFF" "0";
adddefdep2 "IREF" "0";
adddefdep2 "3pt70" "0";
adddefdep2 "3pt69" "0";
adddefdep2 "3pt68F" "0";
adddefdep2 "3pt68" "0";
adddefdep2 "3pt67F" "PROP , 0";
adddefdep2 "3pt67" "PROP , 0";
adddefdep2 "3pt66" "0";
adddefdep2 "3pt64" "0";
adddefdep2 "3pt65" "0";
adddefdep2 "3pt62" "0";
adddefdep2 "IDISB" "0";
adddefdep2 "CONTP" "0";
adddefdep2 "IDEF3" "0";
adddefdep2 "IDEF2" "0";
adddefdep2 "XALTDEF" "0";
adddefdep2 "BALTDEF" "0";
adddefdep2 "REPL" "0";
adddefdep2 "3pt50" "0";
adddefdep2 "3pt49" "0";
adddefdep2 "3pt48" "0";
adddefdep2 "CDISD" "0";
adddefdep2 "DDISC" "0";
adddefdep2 "3pt44b" "0";
adddefdep2 "3pt44a" "0";
adddefdep2 "L3pt43" "0";
adddefdep2 "3pt43bF" "PROP , 0";
adddefdep2 "3pt43b" "PROP , 0";
adddefdep2 "3pt43aF" "PROP , 0";
adddefdep2 "3pt43a" "PROP , 0";
adddefdep2 "CCON" "0";
adddefdep2 "CDISC" "0";
adddefdep2 "CZERF" "0";
adddefdep2 "CZER" "0";
adddefdep2 "CID" "PROP , 0";
adddefdep2 "CIDEM" "PROP , 0";
adddefdep2 "CASSOC" "0";
adddefdep2 "CSYM" "0";
adddefdep2 "DUAL" "0";
adddefdep2 "REMFLIP" "0";
adddefdep2 "SREMFLIP" "0";
adddefdep2 "NOTCLEAN" "0";
adddefdep2 "ASSERTCLEAN" "PROP , 0";
adddefdep2 "REMA" "PROP , 0";
adddefdep2 "AF" "PROP , 0";
adddefdep2 "AT" "PROP , 0";
adddefdep2 "FLIPALL" "0";
adddefdep2 "SFLIPALL" "0";
adddefdep2 "FLIPPASTC" "0";
adddefdep2 "FLIPPASTD" "0";
adddefdep2 "FLIPPASTX" "0";
adddefdep2 "FLIPPASTB" "0";
adddefdep2 "FLIPPASTN" "0";
adddefdep2 "FLIPPASTA" "PROP , 0";
adddefdep2 "XORFLIP" "0";
adddefdep2 "BFLIP" "0";
adddefdep2 "DEMa" "0";
adddefdep2 "DEMb" "0";
adddefdep2 "GR3" "0";
adddefdep2 "GR2" "0";
adddefdep2 "3pt32F" "PROP , 0";
adddefdep2 "3pt32" "PROP , 0";
adddefdep2 "DID" "PROP , 0";
adddefdep2 "DDISD" "0";
adddefdep2 "DZERF" "0";
adddefdep2 "DZER" "0";
adddefdep2 "MUTINT" "0";
adddefdep2 "MUTASSOC" "0";
adddefdep2 "XORASSOC" "0";
adddefdep2 "XORSYM" "0";
adddefdep2 "NEQ" "0";
adddefdep2 "DUBNEG2" "PROP , 0";
adddefdep2 "NEGF" "0";
adddefdep2 "3pt15bF" "0";
adddefdep2 "3pt15b" "0";
adddefdep2 "3pt15a" "0";
adddefdep2 "3pt14" "0";
adddefdep2 "3pt11" "0";
adddefdep2 "APLZ" "0";
adddefdep2 "EQT" "PROP , 0";
adddefdep2 "BCONV" "PROP , 0";
adddefdep2 "ASRTEQ" "PROP , 0";
adddefdep2 "LZ" "0";
adddefdep2 "CONS" "0";
adddefdep2 "IDEF" "0";
adddefdep2 "GR" "0";
adddefdep2 "DXMF" "0";
adddefdep2 "DXM" "0";
adddefdep2 "DDIS" "0";
adddefdep2 "DIDEM" "PROP , 0";
adddefdep2 "DASSOC" "0";
adddefdep2 "DSYM" "0";
adddefdep2 "XORDEF" "0";
adddefdep2 "BDIS" "0";
adddefdep2 "FDEF" "0";
adddefdep2 "BID2" "PROP , 0";
adddefdep2 "BID" "0";
adddefdep2 "BSYM" "0";
adddefdep2 "BASSOC" "0";
adddefdep2 "THMAP" "0";
adddefdep2 "MKASRT" "0";
adddefdep2 "ASRTRIGHT" "0";
adddefdep2 "ASRTLEFT" "0";
adddefdep2 "ASSRTBOTH" "0";
adddefdep2 "GCLEAN" "0";
adddefdep2 "ALLASSERTS" "PROP , 0";
adddefdep2 "STT" "PROP , 0";
adddefdep2 "STR" "PROP , 0";
adddefdep2 "STL" "PROP , 0";
adddefdep2 "CNRULE3" "PROP , 0";
adddefdep2 "CNRULE2" "PROP , 0";
adddefdep2 "CNRULE1" "PROP , 0";
adddefdep2 "IRULE3" "PROP , 0";
adddefdep2 "IRULE2" "PROP , 0";
adddefdep2 "IRULE1" "PROP , 0";
adddefdep2 "NRULE2" "PROP , 0";
adddefdep2 "NRULE1" "PROP , 0";
adddefdep2 "XRULE3" "PROP , 0";
adddefdep2 "XRULE2" "PROP , 0";
adddefdep2 "XRULE1" "PROP , 0";
adddefdep2 "CRULE3" "PROP , 0";
adddefdep2 "CRULE2" "PROP , 0";
adddefdep2 "CRULE1" "PROP , 0";
adddefdep2 "DRULE3" "PROP , 0";
adddefdep2 "DRULE2" "PROP , 0";
adddefdep2 "DRULE1" "PROP , 0";
adddefdep2 "BRULE3" "PROP , 0";
adddefdep2 "BRULE2" "PROP , 0";
adddefdep2 "BRULE1" "PROP , 0";
adddefdep2 "EQSYMM" "0";
adddefdep2 "CONTYPE" "PROP , 0";
adddefdep2 "IMPTYPE" "PROP , 0";
adddefdep2 "CTYPE" "PROP , 0";
adddefdep2 "DTYPE" "PROP , 0";
adddefdep2 "NTYPE" "PROP , 0";
adddefdep2 "XORTYPE" "PROP , 0";
adddefdep2 "BTYPE" "PROP , 0";
adddefdep2 "TWOASSERTS" "PROP , 0";
adddefdep2 "PROP" "PROP , 0";
adddefdep2 "True" "True , 0";
adddefdep2 "TRUERETRACT" "0";
adddefdep2 "Bool" "Bool , 0";
adddefdep2 "BOOL_RETRACT" "0";
adddefdep2 "POINTTYPE" "0";
adddefdep2 "UNIONTYPE" "UNIONTYPE , 0";
adddefdep2 "UNIONRETRACT" "0";
adddefdep2 "PRODTYPE" "P1 , P2 , PRODTYPE , 0";
adddefdep2 "PRODRETRACT" "P1 , P2 , 0";
adddefdep2 "ARROWTYPE" "ARROWTYPE , 0";
adddefdep2 "ARROWRETRACT" "0";
adddefdep2 "TADDTOP" "0";
adddefdep2 "TADDBOTH" "0";
adddefdep2 "TADDRIGHT" "0";
adddefdep2 "TADDLEFT" "0";
adddefdep2 "TREMTOP" "0";
adddefdep2 "TREMBOTH" "0";
adddefdep2 "TREMRIGHT" "0";
adddefdep2 "TREMLEFT" "0";
adddefdep2 "goto" "0";
adddefdep2 "INPUT_AT" "0";
adddefdep2 "value" "0";
adddefdep2 "left_case" "0";
adddefdep2 "right_case" "0";
adddefdep2 "left" "0";
adddefdep2 "right" "0";
adddefdep2 "INPUTS2" "0";
adddefdep2 "up" "upfun , 0";
adddefdep2 "upfun" "upfun , 0";
adddefdep2 "BINDLABELS" "0";
adddefdep2 "APPLYATLABELS" "0";
adddefdep2 "APPLYATLABEL" "0";
adddefdep2 "APPLYATLABEL0" "IGNOREFIRST , 0";
adddefdep2 "LABELTERM" "0";
adddefdep2 "LABELTERMS" "0";
adddefdep2 "LABELTERMS_CASE" "0";
adddefdep2 "LABELTERMS_UNARY" "0";
adddefdep2 "LABELTERMS_ABSTRACT" "0";
adddefdep2 "LABELTERMS_SPLIT" "0";
adddefdep2 "LABELTERMS_FOUND" "0";
adddefdep2 "POP_CASE" "0";
adddefdep2 "POP_CASE_2" "0";
adddefdep2 "POP_CASE_1" "IGNOREFIRST , 0";
adddefdep2 "ANTI_UNEVAL_TAC" "0";
adddefdep2 "TYPEBIND" "0";
adddefdep2 "UNEVAL_TAC" "0";
adddefdep2 "GET" "0";
adddefdep2 "GET2" "0";
adddefdep2 "GET1" "0";
adddefdep2 "GET0" "0";
adddefdep2 "ALLASSOCS" "0";
adddefdep2 "ASSOCS" "0";
adddefdep2 "VIEWCASES" "0";
adddefdep2 "LOOP_TAC" "0";
adddefdep2 "ALL_STEPS" "IGNOREFIRST , 0";
adddefdep2 "STOPLOOP" "IGNOREFIRST , 0";
adddefdep2 "STARTLOOP" "IGNOREFIRST , 0";
adddefdep2 "LISTBIND" "0";
adddefdep2 "PAIRBIND" "0";
adddefdep2 "VALUE" "0";
adddefdep2 "VALUE0" "0";
adddefdep2 "PI2F" "P2 , 0";
adddefdep2 "PI1F" "P1 , 0";
adddefdep2 "REVPIVOT" "0";
adddefdep2 "PIVOT" "0";
adddefdep2 "TOPDOWN" "0";
adddefdep2 "TOPDOWN_PREFIX" "0";
adddefdep2 "TOPDOWN_INFIX" "0";
adddefdep2 "TOPDOWN_CASE" "0";
adddefdep2 "EVERYWHERE2" "0";
adddefdep2 "EVERYWHERE" "0";
adddefdep2 "EVERYWHERE_INFIX" "0";
adddefdep2 "EVERYWHERE_PREFIX" "0";
adddefdep2 "EVERYWHERE_ABS" "0";
adddefdep2 "STRONG_EVERYWHERE_CASE" "0";
adddefdep2 "EVERYWHERE_CASE" "0";
adddefdep2 "BOTH_CASES" "0";
adddefdep2 "RIGHT_CASE" "0";
adddefdep2 "LEFT_CASE" "0";
adddefdep2 "RL" "0";
adddefdep2 "RIGHT" "0";
adddefdep2 "RIGHT2" "0";
adddefdep2 "RIGHT1" "0";
adddefdep2 "LEFT" "0";
adddefdep2 "LEFT2" "0";
adddefdep2 "LEFT1" "0";
adddefdep2 "$" "0";
adddefdep2 "**" "0";
adddefdep2 "PCASEINTRO" "0";
adddefdep2 "ID" "Id , 0";
adddefdep2 "PI2" "P2 , 0";
adddefdep2 "PI1" "P1 , 0";
adddefdep2 "IGNOREFIRST" "IGNOREFIRST , 0";
adddefdep2 "HYP" "0";
adddefdep2 "ODDCHOICE" "0";
adddefdep2 "EQUATION" "0";
adddefdep2 "NONTRIV" "0";
adddefdep2 "REFLEX" "0";
adddefdep2 "CASEINTRO" "0";
adddefdep2 "FNDIST" "0";
adddefdep2 "Id" "Id , 0";
adddefdep2 "p2" "p2 , 0";
adddefdep2 "p1" "p1 , 0";
adddefdep2 "P2" "P2 , 0";
adddefdep2 "P1" "P1 , 0";
adddefdep2 "COMP" "COMP , 0";
adddefdep2 "TYPES" "0";
addthmtextdep2 "P_15" "P_15 , 0";
addthmtextdep2 "P_14" "P_14 , 0";
addthmtextdep2 "P_13B" "P_13B , 0";
addthmtextdep2 "P_12A" "P_12A , 0";
addthmtextdep2 "P_11" "P_11 , 0";
addthmtextdep2 "P_10" "P_10 , 0";
addthmtextdep2 "P_9" "P_9 , 0";
addthmtextdep2 "P_8" "P_8 , 0";
addthmtextdep2 "P_7" "P_7 , 0";
addthmtextdep2 "P_6" "P_6 , 0";
addthmtextdep2 "P_5" "P_5 , 0";
addthmtextdep2 "P_4B" "P_4B , 0";
addthmtextdep2 "P_4A" "P_4A , 0";
addthmtextdep2 "P_3B" "P_3B , 0";
addthmtextdep2 "P_3A" "P_3A , 0";
addthmtextdep2 "P_2B" "P_2B , 0";
addthmtextdep2 "P_2A" "P_2A , 0";
addthmtextdep2 "P_1B" "P_1B , 0";
addthmtextdep2 "P_1A" "P_1A , 0";
addthmtextdep2 "AXIOM_20" "AXIOM_20 , 0";
addthmtextdep2 "AXIOM_19" "AXIOM_19 , 0";
addthmtextdep2 "AXIOM_17B" "AXIOM_17B , 0";
addthmtextdep2 "AXIOM_17A" "AXIOM_17A , 0";
addthmtextdep2 "AXIOM_16" "AXIOM_16 , 0";
addthmtextdep2 "AXIOM_15B" "AXIOM_15B , 0";
addthmtextdep2 "AXIOM_15A" "AXIOM_15A , 0";
addthmtextdep2 "AXIOM_14B" "AXIOM_14B , 0";
addthmtextdep2 "AXIOM_14A" "AXIOM_14A , 0";
addthmtextdep2 "AXIOM_11B" "AXIOM_11B , 0";
addthmtextdep2 "AXIOM_11A" "AXIOM_11A , 0";
addthmtextdep2 "AXIOM_10" "AXIOM_10 , 0";
addthmtextdep2 "AXIOM_09" "AXIOM_09 , 0";
addthmtextdep2 "AXIOM_08" "AXIOM_08 , 0";
addthmtextdep2 "AXIOM_7D" "AXIOM_7D , 0";
addthmtextdep2 "AXIOM_7C" "AXIOM_7C , 0";
addthmtextdep2 "AXIOM_7B" "AXIOM_7B , 0";
addthmtextdep2 "AXIOM_7A" "AXIOM_7A , 0";
addthmtextdep2 "AXIOM_04" "AXIOM_04 , 0";
addthmtextdep2 "AXIOM_03B" "AXIOM_03B , 0";
addthmtextdep2 "AXIOM_03A" "AXIOM_03A , 0";
addthmtextdep2 "AXIOM_02" "AXIOM_02 , 0";
addthmtextdep2 "AXIOM_01" "AXIOM_01 , 0";
addthmtextdep2 "SAID_IMP2" "SAID_IMP2 , 0";
addthmtextdep2 "SAID_IMP1" "SAID_IMP1 , 0";
addthmtextdep2 "NECESSITATION" "NECESSITATION , 0";
addthmtextdep2 "BELIEVES_BELIEVES_IS_BELIEVES" "BELIEVES_BELIEVES_IS_BELIEVES , 0";
addthmtextdep2 "RECEIVEDFROM_IS_RECEIVED" "RECEIVEDFROM_IS_RECEIVED , 0";
addthmtextdep2 "SHARED_KEY_IMP_SEES_KEY" "SHARED_KEY_IMP_SEES_KEY , 0";
addthmtextdep2 "FRESH_TYPE" "FRESH_TYPE , 0";
addthmtextdep2 "CONTROLS_TYPE" "CONTROLS_TYPE , 0";
addthmtextdep2 "SEES_TYPE" "SEES_TYPE , 0";
addthmtextdep2 "SAYS_AXIOM" "SAYS_AXIOM , 0";
addthmtextdep2 "SAYS_TYPE" "SAYS_TYPE , 0";
addthmtextdep2 "SAID_AXIOM" "SAID_AXIOM , 0";
addthmtextdep2 "SAID_TYPE" "SAID_TYPE , 0";
addthmtextdep2 "RECEIVED_AXIOM" "RECEIVED_AXIOM , 0";
addthmtextdep2 "RECEIVE_FROM_TYPE" "RECEIVE_FROM_TYPE , 0";
addthmtextdep2 "RECEIVED_TYPE" "RECEIVED_TYPE , 0";
addthmtextdep2 "HOLDS_AXIOM" "HOLDS_AXIOM , 0";
addthmtextdep2 "HOLDS_TYPE" "HOLDS_TYPE , 0";
addthmtextdep2 "BELIEVE_IMP" "BELIEVE_IMP , 0";
addthmtextdep2 "BELIEVE_AND" "BELIEVE_AND , 0";
addthmtextdep2 "BELIEVE_TYPE" "BELIEVE_TYPE , 0";
addthmtextdep2 "MESSAGE_TYPE" "MESSAGE_TYPE , 0";
addthmtextdep2 "PROP_IS_MESSAGE" "PROP_IS_MESSAGE , 0";
addthmtextdep2 "PRINCIPAL_IS_MESSAGE" "PRINCIPAL_IS_MESSAGE , 0";
addthmtextdep2 "KEY_IS_MESSAGE" "KEY_IS_MESSAGE , 0";
addthmtextdep2 "SV_TYPE" "SV_TYPE , 0";
addthmtextdep2 "PKA_TYPE" "PKA_TYPE , 0";
addthmtextdep2 "PKS_TYPE" "PKS_TYPE , 0";
addthmtextdep2 "PKE_TYPE" "PKE_TYPE , 0";
addthmtextdep2 "SHARED_TYPE" "SHARED_TYPE , 0";
addthmtextdep2 "PED_AXIOM6" "PED_AXIOM6 , 0";
addthmtextdep2 "PED_AXIOM5" "PED_AXIOM5 , 0";
addthmtextdep2 "PED_AXIOM4" "PED_AXIOM4 , 0";
addthmtextdep2 "PED_AXIOM3" "PED_AXIOM3 , 0";
addthmtextdep2 "PED_AXIOM2" "PED_AXIOM2 , 0";
addthmtextdep2 "PED_AXIOM1" "PED_AXIOM1 , 0";
addthmtextdep2 "PED_TYPE" "PED_TYPE , 0";
addthmtextdep2 "PD_TYPE" "PD_TYPE , 0";
addthmtextdep2 "PE_TYPE" "PE_TYPE , 0";
addthmtextdep2 "PKEY_INV2" "PKEY_INV2 , 0";
addthmtextdep2 "PKEY_INV1" "PKEY_INV1 , 0";
addthmtextdep2 "KEYPAIR_TYPE" "KEYPAIR_TYPE , 0";
addthmtextdep2 "SYMM_KEY_INV" "SYMM_KEY_INV , 0";
addthmtextdep2 "INV_TYPE" "INV_TYPE , 0";
addthmtextdep2 "SKEY_IS_KEY" "SKEY_IS_KEY , 0";
addthmtextdep2 "sKEY_IS_PKEY" "sKEY_IS_PKEY , 0";
addthmtextdep2 "pKEY_IS_PKEY" "pKEY_IS_PKEY , 0";
addthmtextdep2 "PKEY_IS_KEY" "PKEY_IS_KEY , 0";
addthmtextdep2 "SED_AXIOM3" "SED_AXIOM3 , 0";
addthmtextdep2 "SED_AXIOM2" "SED_AXIOM2 , 0";
addthmtextdep2 "SED_AXIOM1" "SED_AXIOM1 , 0";
addthmtextdep2 "SED_TYPE" "SED_TYPE , 0";
addthmtextdep2 "SE_TYPE" "SE_TYPE , 0";
addthmtextdep2 "SD_TYPE" "SD_TYPE , 0";
addthmtextdep2 "IMP_FALSE" "IMP_FALSE , 0";
addthmtextdep2 "IMP_TRUE" "IMP_TRUE , 0";
addthmtextdep2 "IMP_TYPE" "IMP_TYPE , 0";
addthmtextdep2 "NOT_FALSE" "NOT_FALSE , 0";
addthmtextdep2 "NOT_TRUE" "NOT_TRUE , 0";
addthmtextdep2 "NOT_TYPE" "NOT_TYPE , 0";
addthmtextdep2 "OR_ASSOC" "OR_ASSOC , 0";
addthmtextdep2 "OR_FALSE" "OR_FALSE , 0";
addthmtextdep2 "OR_TRUE" "OR_TRUE , 0";
addthmtextdep2 "OR_COMM" "OR_COMM , 0";
addthmtextdep2 "OR_TYPE" "OR_TYPE , 0";
addthmtextdep2 "AND_ASSOC" "AND_ASSOC , 0";
addthmtextdep2 "AND_FALSE" "AND_FALSE , 0";
addthmtextdep2 "AND_TRUE" "AND_TRUE , 0";
addthmtextdep2 "AND_COMM" "AND_COMM , 0";
addthmtextdep2 "AND_TYPE" "AND_TYPE , 0";
addthmtextdep2 "IDIS4" "IDIS4 , 0";
addthmtextdep2 "IDIS3" "IDIS3 , 0";
addthmtextdep2 "IDIS2" "IDIS2 , 0";
addthmtextdep2 "IDIS1" "IDIS1 , 0";
addthmtextdep2 "3pt89" "3pt89 , PROP , 0";
addthmtextdep2 "PROP" "PROP , 0";
addthmtextdep2 "AP3pt88" "AP3pt88 , THMAP , ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt88 , 0";
addthmtextdep2 "3pt88" "3pt88 , PROP , 0";
addthmtextdep2 "THMAP" "THMAP , ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 0";
addthmtextdep2 "**" "(?x ** ?y) , 0";
addthmtextdep2 "MKASRT" "ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , 0";
addthmtextdep2 "RL" "RL , 0";
addthmtextdep2 "ASRTRIGHT" "LEFT , LEFT1 , LEFT2 , ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , RL , 0";
addthmtextdep2 "LEFT" "LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "LEFT2" "LEFT2 , 0";
addthmtextdep2 "LEFT1" "LEFT1 , 0";
addthmtextdep2 "ASRTLEFT" "RIGHT , RIGHT1 , RIGHT2 , ASSRTBOTH , PROP , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , 0";
addthmtextdep2 "RIGHT" "RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "RIGHT2" "RIGHT2 , 0";
addthmtextdep2 "RIGHT1" "RIGHT1 , 0";
addthmtextdep2 "ASSRTBOTH" "ASSRTBOTH , PROP , 0";
addthmtextdep2 "3pt87" "3pt87 , 0";
addthmtextdep2 "AP3pt86b" "AP3pt86b , THMAP , ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt86b , 0";
addthmtextdep2 "3pt86b" "3pt86b , PROP , 0";
addthmtextdep2 "AP3pt86a" "AP3pt86a , THMAP , ASSRTBOTH , PROP , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt86a , 0";
addthmtextdep2 "3pt86a" "3pt86a , PROP , 0";
addthmtextdep2 "3pt85b" "3pt85b , 0";
addthmtextdep2 "3pt85a" "3pt85a , 0";
addthmtextdep2 "3pt84c" "3pt84c , 0";
addthmtextdep2 "3pt84b" "3pt84b , 0";
addthmtextdep2 "3pt83F" "3pt83F , 0";
addthmtextdep2 "3pt83" "3pt83 , 0";
addthmtextdep2 "3pt82cF" "3pt82cF , 0";
addthmtextdep2 "3pt82c" "3pt82c , 0";
addthmtextdep2 "3pt82bF" "3pt82bF , 0";
addthmtextdep2 "3pt82b" "3pt82b , 0";
addthmtextdep2 "3pt82aF" "3pt82aF , 0";
addthmtextdep2 "3pt82a" "3pt82a , 0";
addthmtextdep2 "3pt81F" "3pt81F , 0";
addthmtextdep2 "3pt81" "3pt81 , 0";
addthmtextdep2 "3pt80" "3pt80 , 0";
addthmtextdep2 "3pt79F" "3pt79F , PROP , 0";
addthmtextdep2 "3pt79" "3pt79 , PROP , 0";
addthmtextdep2 "3pt78" "3pt78 , 0";
addthmtextdep2 "MOPF" "MOPF , 0";
addthmtextdep2 "MOP" "MOP , 0";
addthmtextdep2 "3pt76eF" "3pt76eF , 0";
addthmtextdep2 "3pt76e" "3pt76e , 0";
addthmtextdep2 "3pt76dF" "3pt76dF , 0";
addthmtextdep2 "3pt76d" "3pt76d , 0";
addthmtextdep2 "3pt76cF" "3pt76cF , 0";
addthmtextdep2 "3pt76c" "3pt76c , 0";
addthmtextdep2 "3pt76bF" "3pt76bF , 0";
addthmtextdep2 "3pt76b" "3pt76b , 0";
addthmtextdep2 "3pt76aF" "3pt76aF , 0";
addthmtextdep2 "3pt76a" "3pt76a , 0";
addthmtextdep2 "3pt75F" "3pt75F , 0";
addthmtextdep2 "3pt75" "3pt75 , 0";
addthmtextdep2 "3pt74" "3pt74 , 0";
addthmtextdep2 "ILID" "ILID , PROP , 0";
addthmtextdep2 "IRZERF" "IRZERF , 0";
addthmtextdep2 "IRZER" "IRZER , 0";
addthmtextdep2 "IREFF" "IREFF , 0";
addthmtextdep2 "IREF" "IREF , 0";
addthmtextdep2 "3pt70" "3pt70 , 0";
addthmtextdep2 "3pt69" "3pt69 , 0";
addthmtextdep2 "3pt68F" "3pt68F , 0";
addthmtextdep2 "3pt68" "3pt68 , 0";
addthmtextdep2 "3pt67F" "3pt67F , PROP , 0";
addthmtextdep2 "3pt67" "3pt67 , PROP , 0";
addthmtextdep2 "3pt66" "3pt66 , 0";
addthmtextdep2 "3pt64" "3pt64 , 0";
addthmtextdep2 "3pt65" "3pt65 , 0";
addthmtextdep2 "3pt62" "3pt62 , 0";
addthmtextdep2 "IDISB" "IDISB , 0";
addthmtextdep2 "CONTP" "CONTP , 0";
addthmtextdep2 "IDEF3" "IDEF3 , 0";
addthmtextdep2 "IDEF2" "IDEF2 , 0";
addthmtextdep2 "XALTDEF" "XALTDEF , 0";
addthmtextdep2 "BALTDEF" "BALTDEF , 0";
addthmtextdep2 "REPL" "REPL , 0";
addthmtextdep2 "3pt50" "3pt50 , 0";
addthmtextdep2 "3pt49" "3pt49 , 0";
addthmtextdep2 "3pt48" "3pt48 , 0";
addthmtextdep2 "CDISD" "CDISD , 0";
addthmtextdep2 "DDISC" "DDISC , 0";
addthmtextdep2 "3pt44b" "3pt44b , 0";
addthmtextdep2 "3pt44a" "3pt44a , 0";
addthmtextdep2 "L3pt43" "L3pt43 , 0";
addthmtextdep2 "3pt43bF" "3pt43bF , PROP , 0";
addthmtextdep2 "3pt43b" "3pt43b , PROP , 0";
addthmtextdep2 "3pt43aF" "3pt43aF , PROP , 0";
addthmtextdep2 "3pt43a" "3pt43a , PROP , 0";
addthmtextdep2 "CCON" "CCON , 0";
addthmtextdep2 "CDISC" "CDISC , 0";
addthmtextdep2 "CZERF" "CZERF , 0";
addthmtextdep2 "CZER" "CZER , 0";
addthmtextdep2 "CID" "CID , PROP , 0";
addthmtextdep2 "CIDEM" "CIDEM , PROP , 0";
addthmtextdep2 "CASSOC" "CASSOC , 0";
addthmtextdep2 "CSYM" "CSYM , 0";
addthmtextdep2 "DUAL" "DUAL , REMFLIP , BRULE1 , PROP , CRULE1 , DRULE1 , NRULE1 , XRULE1 , AT , AF , TWOASSERTS , DUBNEG2 , FDEF , NEGF , BFLIP , XORFLIP , DEMa , DEMb , REMA , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , FLIPALL , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , 0";
addthmtextdep2 "FLIPALL" "FLIPALL , PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , DUBNEG2 , BRULE1 , XRULE1 , DRULE1 , CRULE1 , 0";
addthmtextdep2 "SFLIPALL" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTC" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTD" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTX" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTB" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTN" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTA" "PROP , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "REMFLIP" "REMFLIP , BRULE1 , PROP , CRULE1 , DRULE1 , NRULE1 , XRULE1 , AT , AF , TWOASSERTS , DUBNEG2 , FDEF , NEGF , BFLIP , XORFLIP , DEMa , DEMb , REMA , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "SREMFLIP" "FDEF , NEGF , BFLIP , XORFLIP , DEMa , DEMb , REMA , PROP , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "ASSERTCLEAN" "ASSERTCLEAN , PROP , 0";
addthmtextdep2 "NOTCLEAN" "NOTCLEAN , 0";
addthmtextdep2 "REMA" "REMA , PROP , 0";
addthmtextdep2 "DEMb" "DEMb , 0";
addthmtextdep2 "DEMa" "DEMa , 0";
addthmtextdep2 "XORFLIP" "XORFLIP , 0";
addthmtextdep2 "BFLIP" "BFLIP , 0";
addthmtextdep2 "NEGF" "NEGF , 0";
addthmtextdep2 "FDEF" "FDEF , 0";
addthmtextdep2 "DUBNEG2" "DUBNEG2 , PROP , 0";
addthmtextdep2 "TWOASSERTS" "TWOASSERTS , PROP , 0";
addthmtextdep2 "AF" "AF , PROP , 0";
addthmtextdep2 "AT" "AT , PROP , 0";
addthmtextdep2 "XRULE1" "XRULE1 , PROP , 0";
addthmtextdep2 "NRULE1" "NRULE1 , PROP , 0";
addthmtextdep2 "DRULE1" "DRULE1 , PROP , 0";
addthmtextdep2 "CRULE1" "CRULE1 , PROP , 0";
addthmtextdep2 "BRULE1" "BRULE1 , PROP , 0";
addthmtextdep2 "GR3" "GR3 , 0";
addthmtextdep2 "GR2" "GR2 , 0";
addthmtextdep2 "3pt32F" "3pt32F , PROP , 0";
addthmtextdep2 "3pt32" "3pt32 , PROP , 0";
addthmtextdep2 "DID" "DID , PROP , 0";
addthmtextdep2 "DDISD" "DDISD , 0";
addthmtextdep2 "DZERF" "DZERF , 0";
addthmtextdep2 "DZER" "DZER , 0";
addthmtextdep2 "MUTINT" "MUTINT , 0";
addthmtextdep2 "MUTASSOC" "MUTASSOC , 0";
addthmtextdep2 "XORASSOC" "XORASSOC , 0";
addthmtextdep2 "XORSYM" "XORSYM , 0";
addthmtextdep2 "NEQ" "NEQ , 0";
addthmtextdep2 "3pt15bF" "3pt15bF , 0";
addthmtextdep2 "3pt15b" "3pt15b , 0";
addthmtextdep2 "3pt15a" "3pt15a , 0";
addthmtextdep2 "3pt14" "3pt14 , 0";
addthmtextdep2 "3pt11" "3pt11 , 0";
addthmtextdep2 "APLZ" "APLZ , RIGHT , RIGHT1 , RIGHT2 , LZ , (?x ** ?y) , 0";
addthmtextdep2 "LZ" "LZ , 0";
addthmtextdep2 "EQT" "EQT , PROP , 0";
addthmtextdep2 "BCONV" "BCONV , PROP , 0";
addthmtextdep2 "ASRTEQ" "ASRTEQ , PROP , 0";
addthmtextdep2 "CONS" "CONS , 0";
addthmtextdep2 "IDEF" "IDEF , 0";
addthmtextdep2 "GR" "GR , 0";
addthmtextdep2 "DXMF" "DXMF , 0";
addthmtextdep2 "DXM" "DXM , 0";
addthmtextdep2 "DDIS" "DDIS , 0";
addthmtextdep2 "DIDEM" "DIDEM , PROP , 0";
addthmtextdep2 "DASSOC" "DASSOC , 0";
addthmtextdep2 "DSYM" "DSYM , 0";
addthmtextdep2 "XORDEF" "XORDEF , 0";
addthmtextdep2 "BDIS" "BDIS , 0";
addthmtextdep2 "BID2" "BID2 , PROP , 0";
addthmtextdep2 "BID" "BID , 0";
addthmtextdep2 "BSYM" "BSYM , 0";
addthmtextdep2 "BASSOC" "BASSOC , 0";
addthmtextdep2 "GCLEAN" "RL , GCLEAN , NRULE2 , PROP , NRULE1 , STL , STR , STT , ALLASSERTS , RIGHT , RIGHT1 , RIGHT2 , LEFT , LEFT1 , LEFT2 , (?x ** ?y) , 0";
addthmtextdep2 "ALLASSERTS" "PROP , ALLASSERTS , 0";
addthmtextdep2 "STT" "STT , PROP , 0";
addthmtextdep2 "STR" "STR , PROP , 0";
addthmtextdep2 "STL" "STL , PROP , 0";
addthmtextdep2 "NRULE2" "NRULE2 , PROP , 0";
addthmtextdep2 "CNRULE3" "CNRULE3 , PROP , 0";
addthmtextdep2 "CNRULE2" "CNRULE2 , PROP , 0";
addthmtextdep2 "CNRULE1" "CNRULE1 , PROP , 0";
addthmtextdep2 "IRULE3" "IRULE3 , PROP , 0";
addthmtextdep2 "IRULE2" "IRULE2 , PROP , 0";
addthmtextdep2 "IRULE1" "IRULE1 , PROP , 0";
addthmtextdep2 "XRULE3" "XRULE3 , PROP , 0";
addthmtextdep2 "XRULE2" "XRULE2 , PROP , 0";
addthmtextdep2 "CRULE3" "CRULE3 , PROP , 0";
addthmtextdep2 "CRULE2" "CRULE2 , PROP , 0";
addthmtextdep2 "DRULE3" "DRULE3 , PROP , 0";
addthmtextdep2 "DRULE2" "DRULE2 , PROP , 0";
addthmtextdep2 "BRULE3" "BRULE3 , PROP , 0";
addthmtextdep2 "BRULE2" "BRULE2 , PROP , 0";
addthmtextdep2 "EQSYMM" "EQSYMM , 0";
addthmtextdep2 "CONTYPE" "CONTYPE , PROP , 0";
addthmtextdep2 "IMPTYPE" "IMPTYPE , PROP , 0";
addthmtextdep2 "CTYPE" "CTYPE , PROP , 0";
addthmtextdep2 "DTYPE" "DTYPE , PROP , 0";
addthmtextdep2 "NTYPE" "NTYPE , PROP , 0";
addthmtextdep2 "XORTYPE" "XORTYPE , PROP , 0";
addthmtextdep2 "BTYPE" "BTYPE , PROP , 0";
addthmtextdep2 "True" "True , 0";
addthmtextdep2 "TRUERETRACT" "TRUERETRACT , 0";
addthmtextdep2 "Bool" "Bool , 0";
addthmtextdep2 "BOOL_RETRACT" "BOOL_RETRACT , 0";
addthmtextdep2 "POINTTYPE" "POINTTYPE , 0";
addthmtextdep2 "UNIONTYPE" "UNIONTYPE , 0";
addthmtextdep2 "UNIONRETRACT" "UNIONRETRACT , 0";
addthmtextdep2 "PRODTYPE" "PRODTYPE , P1 , P2 , 0";
addthmtextdep2 "P2" "P2 , 0";
addthmtextdep2 "P1" "P1 , 0";
addthmtextdep2 "PRODRETRACT" "PRODRETRACT , P1 , P2 , 0";
addthmtextdep2 "ARROWTYPE" "ARROWTYPE , 0";
addthmtextdep2 "ARROWRETRACT" "ARROWRETRACT , 0";
addthmtextdep2 "TADDTOP" "TADDTOP , TYPES , (?x $ ?y) , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , 0";
addthmtextdep2 "$" "(?x $ ?y) , 0";
addthmtextdep2 "TYPES" "TYPES , 0";
addthmtextdep2 "TADDBOTH" "TADDBOTH , RIGHT , RIGHT1 , RIGHT2 , TYPES , (?x $ ?y) , LEFT , LEFT1 , LEFT2 , (?x ** ?y) , 0";
addthmtextdep2 "TADDRIGHT" "TADDRIGHT , RIGHT , RIGHT1 , RIGHT2 , TYPES , (?x $ ?y) , (?x ** ?y) , 0";
addthmtextdep2 "TADDLEFT" "TADDLEFT , RIGHT , RIGHT1 , RIGHT2 , LEFT , LEFT1 , LEFT2 , TYPES , (?x $ ?y) , (?x ** ?y) , 0";
addthmtextdep2 "TREMTOP" "TREMTOP , TYPES , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TREMBOTH" "TREMBOTH , RIGHT , RIGHT1 , RIGHT2 , TYPES , LEFT , LEFT1 , LEFT2 , (?x ** ?y) , (?x $ ?y) , 0";
addthmtextdep2 "TREMRIGHT" "TREMRIGHT , RIGHT , RIGHT1 , RIGHT2 , TYPES , (?x $ ?y) , (?x ** ?y) , 0";
addthmtextdep2 "TREMLEFT" "TREMLEFT , RIGHT , RIGHT1 , RIGHT2 , LEFT , LEFT1 , LEFT2 , TYPES , (?x $ ?y) , (?x ** ?y) , 0";
addthmtextdep2 "goto" "goto , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , INPUT_AT , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "INPUT_AT" "INPUT_AT , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "INPUTS2" "upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "upfun" "upfun , 0";
addthmtextdep2 "EVERYWHERE2" "STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , 0";
addthmtextdep2 "EVERYWHERE_ABS" "EVERYWHERE_ABS , 0";
addthmtextdep2 "EVERYWHERE_PREFIX" "EVERYWHERE_PREFIX , 0";
addthmtextdep2 "EVERYWHERE_INFIX" "EVERYWHERE_INFIX , 0";
addthmtextdep2 "STRONG_EVERYWHERE_CASE" "STRONG_EVERYWHERE_CASE , 0";
addthmtextdep2 "value" "value , VALUE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "VALUE" "VALUE , 0";
addthmtextdep2 "left_case" "left_case , LEFT_CASE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "LEFT_CASE" "LEFT_CASE , 0";
addthmtextdep2 "right_case" "right_case , RIGHT_CASE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "RIGHT_CASE" "RIGHT_CASE , 0";
addthmtextdep2 "left" "left , LEFT , LEFT1 , LEFT2 , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "right" "right , RIGHT , RIGHT1 , RIGHT2 , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "up" "up , upfun , 0";
addthmtextdep2 "BINDLABELS" "BINDLABELS , LEFT , LEFT1 , LEFT2 , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , IGNOREFIRST , RIGHT , RIGHT1 , RIGHT2 , ID , Id , APPLYATLABELS , APPLYATLABEL , APPLYATLABEL0 , (?x $ ?y) , 0";
addthmtextdep2 "APPLYATLABELS" "APPLYATLABELS , APPLYATLABEL , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "APPLYATLABEL" "APPLYATLABEL , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "APPLYATLABEL0" "APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "ID" "ID , Id , 0";
addthmtextdep2 "Id" "Id , 0";
addthmtextdep2 "IGNOREFIRST" "IGNOREFIRST , 0";
addthmtextdep2 "LABELTERM" "LABELTERM , LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_CASE" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_UNARY" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_ABSTRACT" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_SPLIT" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_FOUND" "LABELTERMS_FOUND , IGNOREFIRST , 0";
addthmtextdep2 "POP_CASE" "POP_CASE , IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "POP_CASE_1" "IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "POP_CASE_2" "IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "ANTI_UNEVAL_TAC" "ANTI_UNEVAL_TAC , FNDIST , BOTH_CASES , 0";
addthmtextdep2 "BOTH_CASES" "BOTH_CASES , 0";
addthmtextdep2 "FNDIST" "FNDIST , 0";
addthmtextdep2 "TYPEBIND" "TYPEBIND , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , TYPES , (?x $ ?y) , 0";
addthmtextdep2 "UNEVAL_TAC" "UNEVAL_TAC , BOTH_CASES , FNDIST , 0";
addthmtextdep2 "GET" "GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , 0";
addthmtextdep2 "ASSOCS" "ASSOCS , 0";
addthmtextdep2 "GET0" "GET0 , 0";
addthmtextdep2 "GET2" "GET2 , LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "GET1" "GET1 , 0";
addthmtextdep2 "ALLASSOCS" "RIGHT , RIGHT1 , RIGHT2 , ALLASSOCS , ASSOCS , 0";
addthmtextdep2 "VIEWCASES" "VIEWCASES , 0";
addthmtextdep2 "LOOP_TAC" "LOOP_TAC , IGNOREFIRST , STOPLOOP , ALL_STEPS , RIGHT , RIGHT1 , RIGHT2 , STARTLOOP , 0";
addthmtextdep2 "ALL_STEPS" "IGNOREFIRST , STOPLOOP , ALL_STEPS , RIGHT , RIGHT1 , RIGHT2 , STARTLOOP , 0";
addthmtextdep2 "STARTLOOP" "STARTLOOP , IGNOREFIRST , 0";
addthmtextdep2 "STOPLOOP" "STOPLOOP , IGNOREFIRST , 0";
addthmtextdep2 "LISTBIND" "PAIRBIND , LEFT , LEFT1 , LEFT2 , VALUE , RIGHT , RIGHT1 , RIGHT2 , PI2F , P2 , PI1F , P1 , LISTBIND , 0";
addthmtextdep2 "PAIRBIND" "PAIRBIND , LEFT , LEFT1 , LEFT2 , VALUE , RIGHT , RIGHT1 , RIGHT2 , PI2F , P2 , PI1F , P1 , 0";
addthmtextdep2 "PI1F" "PI1F , P1 , 0";
addthmtextdep2 "PI2F" "PI2F , P2 , 0";
addthmtextdep2 "VALUE0" "VALUE0 , 0";
addthmtextdep2 "REVPIVOT" "REVPIVOT , LEFT_CASE , HYP , 0";
addthmtextdep2 "HYP" "HYP , 0";
addthmtextdep2 "PIVOT" "PIVOT , LEFT_CASE , HYP , 0";
addthmtextdep2 "TOPDOWN_CASE" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TOPDOWN_INFIX" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TOPDOWN_PREFIX" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TOPDOWN" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "EVERYWHERE" "EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , 0";
addthmtextdep2 "EVERYWHERE_CASE" "EVERYWHERE_CASE , 0";
addthmtextdep2 "PCASEINTRO" "PCASEINTRO , 0";
addthmtextdep2 "PI2" "PI2 , P2 , 0";
addthmtextdep2 "PI1" "PI1 , P1 , 0";
addthmtextdep2 "ODDCHOICE" "ODDCHOICE , 0";
addthmtextdep2 "EQUATION" "EQUATION , 0";
addthmtextdep2 "NONTRIV" "NONTRIV , 0";
addthmtextdep2 "REFLEX" "REFLEX , 0";
addthmtextdep2 "CASEINTRO" "CASEINTRO , 0";
addthmtextdep2 "p2" "p2 , 0";
addthmtextdep2 "p1" "p1 , 0";
addthmtextdep2 "COMP" "COMP , 0";
quit();
