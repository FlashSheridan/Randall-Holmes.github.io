declareconstant "NOT_EXIST";
declareconstant "NOT_UNIV";
declareconstant "EXIST_HYP";
declareconstant "UNIV_HYP";
declareconstant "TWIDDLE2";
declareconstant "TWIDDLE";
declareconstant "EXIST_GOAL";
declareconstant "UNIV_GOAL";
declareconstant "IFFHYP";
declareconstant "NEGHYP";
declareconstant "ORHYP";
declareconstant "ANDHYP";
declareconstant "MODUS_PONENS";
declareconstant "CONTRAPOSITIVE";
declareconstant "NOTIF";
declareconstant "NOTOR";
declareconstant "NOTAND";
declareconstant "DOUBLE_NEGATION";
declareconstant "SWAP_DISJUNCTS";
declareconstant "IFFGOAL";
declareconstant "ORGOAL";
declareconstant "NOTGOAL";
declareconstant "IFGOAL";
declareconstant "ANDGOAL";
declareconstant "halfdone";
declareconstant "done";
declareconstant "PREMISE";
declareconstant "ANNOUNCE";
declareconstant "INPUTS";
declareconstant "GOAL_ABORTED";
declareconstant "GOAL_DONE";
declareconstant "BREAKOUT";
declareconstant "breakout";
declareconstant "FS_SEQUENT";
declareconstant "FS6";
declareconstant "FS5";
declareconstant "FS4";
declareconstant "FS3";
declareconstant "FS2";
declareconstant "FS1";
declareconstant "FS0b";
declareconstant "FS0";
declareconstant "SETUP_SEQUENT";
declareconstant "INR";
declareconstant "INL";
declareconstant "INSCOUT";
declareconstant "IN";
declareconstant "EXISTR";
declareconstant "EXISTL";
declareconstant "FORSOMEANDDIST";
declareconstant "UNIVR";
declareconstant "UNIVL";
declareconstant "CUT";
declareconstant "IFFR";
declareconstant "IFFL";
declareconstant "WEAKR";
declareconstant "WEAKL";
declareconstant "EXR";
declareconstant "EXL";
declareconstant "AXIOM";
declareconstant "IFR";
declareconstant "IFL";
declareconstant "ORR";
declareconstant "ORL";
declareconstant "ANDR";
declareconstant "ANDL";
declareconstant "NEGR";
declareconstant "NEGL";
declareconstant "SELFLABEL";
declareconstant "GETR";
declareconstant "GETL";
declareconstant "UNIV_SWITCH";
declareconstant "UCT2";
declareconstant "UCT1";
declareconstant "UET2";
declareconstant "UET1";
declareconstant "RCT1";
declareconstant "LCT1";
declareconstant "RCT2";
declareconstant "ELIM_ASSERT";
declareconstant "LCT2";
declareconstant "LCT0";
declareconstant "UCT";
declareconstant "UET";
declareconstant "RCT";
declareconstant "LCT";
declareconstant "REWRITE_WITH_UNIVERSAL_CONJUNCTION";
declareconstant "REWRITE_WITH_UNIVERSAL_EQUATION";
declareconstant "REWRITE_WITH_CONJUNCTION";
declareconstant "REWRITE_WITH_EQUATION";
declareconstant "SUB_REWRITE_TAC";
declareconstant "REWRITE_TAC";
declareconstant "REWRITE_ENGINE";
declareconstant "STRONG_REWRITE_WITH_EQUATION";
declareconstant "UNIV_EQ_TAC";
declareconstant "UNIV_EQ";
declareconstant "UNIV_TAC";
declareconstant "9pt26";
declareconstant "9pt25";
declareconstant "9pt24";
declareconstant "9pt23";
declareconstant "9pt22";
declareconstant "9pt21";
declareconstant "9pt20";
declareconstant "9pt18c";
declareconstant "9pt18b";
declareconstant "9pt18a";
declareconstant "9pt11";
declareconstant "9pt10";
declareconstant "9pt8";
declareconstant "9pt7";
declareconstant "9pt6";
declareconstant "9pt5";
declareconstant "9pt4d";
declareconstant "9pt4c";
declareconstant "9pt4b";
declareconstant "9pt4a";
declareconstant "9pt3c";
declareconstant "9pt3b";
declareconstant "9pt3a";
declareconstant "8pt19E";
declareconstant "8pt19U";
declareconstant "8pt16E";
declareconstant "8pt16U";
declareconstant "8pt15E";
declareconstant "8pt15U";
declareconstant "8pt13E";
declareconstant "8pt13U";
declareconstant "FORSOMERBOOL3";
declareconstant "FORSOMERBOOL2";
declareconstant "FORALLRBOOL3";
declareconstant "FORALLRBOOL2";
declareconstant "UNIV_RANGE_2";
declareconstant "8pt14E";
declareconstant "L";
declareconstant "R";
declareconstant "8pt14U";
declareconstant "9pt30b";
declareconstant "9pt30a";
declareconstant "9pt16b";
declareconstant "9pt16a";
declareconstant "9pt16a1";
declareconstant "PRE9pt12";
declareconstant "CONVERT_IMP_2";
declareconstant "CONVERT_IMP_1";
declareconstant "ONEPOINT";
declareconstant "UNIV_RANGE_1";
declareconstant "forsomer3";
declareconstant "forsomer2";
declareconstant "FORSOMERBOOL";
declareconstant "forsomer";
declareconstant "forallr2";
declareconstant "FORALLRBOOL";
declareconstant "forallr";
declareconstant "EQ_TRANS";
declareconstant "COMMUTE_LEVEL_QUANT";
declareconstant "ALT_QUANT_AGAIN";
declareconstant "TAB_CEX";
declareconstant "TAB_WITNESS";
declareconstant "ANY_INSTANCE";
declareconstant "forallcase";
declareconstant "forsomecase";
declareconstant "CEX_TAC";
declareconstant "CHOICE_TAC";
declareconstant "CEX";
declareconstant "SUBTYPE";
declareconstant "COUNTER";
declareconstant "COUNTER1";
declareconstant "CHOICE";
declareconstant "ALT_QUANT_IMP";
declareconstant "TAB_ALL_NEW_2";
declareconstant "TAB_ALL_NEW_1";
declareconstant "TAB_SOME_NEW_2";
declareconstant "TAB_SOME_NEW_1";
declareconstant "TAB_SOME_2";
declareconstant "TAB_ALL_2";
declareconstant "TAB_SOME";
declareconstant "TAB_ALL";
declareconstant "TAB_XOR_2";
declareconstant "TAB_XOR";
declareconstant "TAB_IFF_2";
declareconstant "TAB_IFF";
declareconstant "TAB_IF_2";
declareconstant "TAB_IF";
declareconstant "TAB_OR_2";
declareconstant "TAB_OR";
declareconstant "TAB_AND_2";
declareconstant "TAB_AND";
declareconstant "TAB_NOT_2";
declareconstant "TAB_NOT";
declareconstant "FORALL_IMP_FORSOME_EQ";
declareconstant "FORSOME_NOTFORALL";
declareconstant "FORALL_NOTFORSOME";
declareconstant "FORSOMEDIST2";
declareconstant "FORALLORDIST";
declareconstant "FORALLOR";
declareconstant "FORALLNOT";
declareconstant "NOTFORALL";
declareconstant "FORALLSWITCH2";
declareconstant "FORSOMEDROP";
declareconstant "FORALLDROP";
declareconstant "FORALLSWITCH";
declareconstant "FORALLDIST";
declareconstant "DINSTANTIATEF1";
declareconstant "DINSTANTIATE";
declareconstant "INSTANTIATE";
declareconstant "TESTSIMP";
declareconstant "CONDSIMP";
declareconstant "XORALTDEF";
declareconstant "CASEPREP";
declareconstant "CONDCASES2";
declareconstant "IMPTOCOND";
declareconstant "CONDCASES";
declareconstant "CONDCASESL1F";
declareconstant "CONDCASESL1";
declareconstant "BEQSUBS";
declareconstant "ASRTCOND";
declareconstant "EQSYMM2";
declareconstant "CONVORAND";
declareconstant "CONVORIMP";
declareconstant "CONVANDOR";
declareconstant "CONVANDIMP";
declareconstant "CONVIMPOR";
declareconstant "CONVIMPAND";
declareconstant "IDIS4";
declareconstant "IDIS3";
declareconstant "IDIS2";
declareconstant "IDIS1";
declareconstant "3pt89";
declareconstant "AP3pt88";
declareconstant "3pt88";
declareconstant "3pt87";
declareconstant "AP3pt86b";
declareconstant "3pt86b";
declareconstant "AP3pt86a";
declareconstant "3pt86a";
declareconstant "3pt85b";
declareconstant "3pt85a";
declareconstant "3pt84c";
declareconstant "3pt84b";
declareconstant "3pt83F";
declareconstant "3pt83";
declareconstant "3pt82cF";
declareconstant "3pt82c";
declareconstant "3pt82bF";
declareconstant "3pt82b";
declareconstant "3pt82aF";
declareconstant "3pt82a";
declareconstant "3pt81F";
declareconstant "3pt81";
declareconstant "3pt80";
declareconstant "3pt79F";
declareconstant "3pt79";
declareconstant "3pt78";
declareconstant "MOPF";
declareconstant "MOP";
declareconstant "3pt76eF";
declareconstant "3pt76e";
declareconstant "3pt76dF";
declareconstant "3pt76d";
declareconstant "3pt76cF";
declareconstant "3pt76c";
declareconstant "3pt76bF";
declareconstant "3pt76b";
declareconstant "3pt76aF";
declareconstant "3pt76a";
declareconstant "3pt75F";
declareconstant "3pt75";
declareconstant "3pt74";
declareconstant "ILID";
declareconstant "IRZERF";
declareconstant "IRZER";
declareconstant "IREFF";
declareconstant "IREF";
declareconstant "3pt70";
declareconstant "3pt69";
declareconstant "3pt68F";
declareconstant "3pt68";
declareconstant "3pt67F";
declareconstant "3pt67";
declareconstant "3pt66";
declareconstant "3pt64";
declareconstant "3pt65";
declareconstant "3pt62";
declareconstant "IDISB";
declareconstant "CONTP";
declareconstant "IDEF3";
declareconstant "IDEF2";
declareconstant "XALTDEF";
declareconstant "BALTDEF";
declareconstant "REPL";
declareconstant "3pt50";
declareconstant "3pt49";
declareconstant "3pt48";
declareconstant "CDISD";
declareconstant "DDISC";
declareconstant "3pt44b";
declareconstant "3pt44a";
declareconstant "L3pt43";
declareconstant "3pt43bF";
declareconstant "3pt43b";
declareconstant "3pt43aF";
declareconstant "3pt43a";
declareconstant "CCON";
declareconstant "CDISC";
declareconstant "CZERF";
declareconstant "CZER";
declareconstant "CID";
declareconstant "CIDEM";
declareconstant "CASSOC";
declareconstant "CSYM";
declareconstant "DUAL";
declareconstant "REMFLIP";
declareconstant "SREMFLIP";
declareconstant "NOTCLEAN";
declareconstant "ASSERTCLEAN";
declareconstant "REMA";
declareconstant "AF";
declareconstant "AT";
declareconstant "FLIPALL";
declareconstant "FLIPPASTC";
declareconstant "FLIPPASTD";
declareconstant "FLIPPASTX";
declareconstant "FLIPPASTB";
declareconstant "FLIPPASTN";
declareconstant "FLIPPASTA";
declareconstant "SFLIPALL";
declareconstant "XORFLIP";
declareconstant "BFLIP";
declareconstant "DEMa";
declareconstant "DEMb";
declareconstant "GR3";
declareconstant "GR2";
declareconstant "3pt32F";
declareconstant "3pt32";
declareconstant "DID";
declareconstant "DDISD";
declareconstant "DZERF";
declareconstant "DZER";
declareconstant "MUTINT";
declareconstant "MUTASSOC";
declareconstant "XORASSOC";
declareconstant "XORSYM";
declareconstant "NEQ";
declareconstant "DUBNEG2";
declareconstant "NEGF";
declareconstant "3pt15bF";
declareconstant "3pt15b";
declareconstant "3pt15a";
declareconstant "3pt14";
declareconstant "3pt11";
declareconstant "APLZ";
declareconstant "THMAP";
declareconstant "ASRTRIGHT";
declareconstant "ASRTLEFT";
declareconstant "ASSRTBOTH";
declareconstant "MKASRT";
declareconstant "GCLEAN";
declareconstant "STT";
declareconstant "STR";
declareconstant "STL";
declareconstant "EQT";
declareconstant "BCONV";
declareconstant "ASRTEQ";
declareconstant "LZ";
declareconstant "CONS";
declareconstant "IDEF";
declareconstant "GR";
declareconstant "DXMF";
declareconstant "BIDF";
declareconstant "DXM";
declareconstant "DDIS";
declareconstant "DIDEM";
declareconstant "DSYM";
declareconstant "DASSOC";
declareconstant "XORDEF";
declareconstant "BDIS";
declareconstant "FDEF";
declareconstant "BID2";
declareconstant "BID";
declareconstant "BSYM";
declareconstant "BASSOC";
declareconstant "PROVETAUT2";
declareconstant "PROVETAUT";
declareconstant "CNRULE3";
declareconstant "CNRULE2";
declareconstant "CNRULE1";
declareconstant "IRULE3";
declareconstant "IRULE2";
declareconstant "IRULE1";
declareconstant "NRULE2";
declareconstant "NRULE1";
declareconstant "XRULE3";
declareconstant "XRULE2";
declareconstant "XRULE1";
declareconstant "CRULE3";
declareconstant "CRULE2";
declareconstant "CRULE1";
declareconstant "DRULE3";
declareconstant "DRULE2";
declareconstant "DRULE1";
declareconstant "BRULE3";
declareconstant "BRULE2";
declareconstant "BRULE1";
declareconstant "NEWTAUT";
declareconstant "ALL_EXP";
declareconstant "ALT_PUSH";
declareconstant "CN_EXP";
declareconstant "XOR_EXP";
declareconstant "IFF_EXP";
declareconstant "NONTRIV2a";
declareconstant "IF_EXP";
declareconstant "OR_EXP";
declareconstant "AND_EXP";
declareconstant "NOT_EXP";
declareconstant "ASSERT_EXP";
declareconstant "MAKE_CASE";
declareconstant "FORSOMEBOOL2";
declareconstant "FORALLBOOL2";
declareconstant "BOOLDEF2";
declareconstant "ASSERT_UNEXP";
declareconstant "ANDUNPACK";
declareconstant "DUBNEG";
declareconstant "BOOLDEF0";
declareconstant "UNPACK";
declareconstant "EXAMPLE1";
declareconstant "CNBOOL";
declareconstant "CONSCIN";
declareconstant "CONTYPE";
declareconstant "CONVIF";
declareconstant "IMPTYPE";
declareconstant "CTYPE";
declareconstant "DTYPE";
declareconstant "NTYPE";
declareconstant "XORBOOL";
declareconstant "XORSCIN";
declareconstant "XORTYPE";
declareconstant "XOR";
declareconstant "ALLASSERTS";
declareconstant "BTYPE";
declareconstant "ASSERT2";
declareconstant "TWOASSERTS";
declareconstant "ASSERTSCOUT";
declareconstant "ASSERT";
declareconstant "IFFSCIN";
declareconstant "IFSCIN";
declareconstant "ORSCIN";
declareconstant "NOTBOOLDROP";
declareconstant "ANDSCIN";
declareconstant "IFFBOOL";
declareconstant "IFF";
declareconstant "IFBOOL";
declareconstant "IF";
declareconstant "ALTORDEF";
declareconstant "NOT";
declareconstant "ORBOOL";
declareconstant "OR";
declareconstant "ANDBOOL";
declareconstant "AND";
declareconstant "BOOLDEF";
declareconstant "FALSEBOOL";
declareconstant "TRUEBOOL";
declareconstant "forsome2";
declareconstant "FORSOMEBOOL";
declareconstant "forsome";
declareconstant "NOTBOOL";
declareconstant "NOT1";
declareconstant "forall2";
declareconstant "FORALLBOOL";
declareconstant "forall";
declareconstant "EQBOOL";
declareconstant "bool";
declareconstant "EQSYMM";
declareconstant "LAMBDAREMOVE3";
declareconstant "LAMBDAREMOVE2";
declareconstant "LAMBDAREMOVE1";
declareconstant "LAMBDAREMOVE";
declareconstant "LAMBDAINTRO3";
declareconstant "LAMBDAINTRO2";
declareconstant "LAMBDAINTRO1";
declareconstant "LAMBDAINTRO";
declareconstant "LABELINTRO";
declareconstant "goto";
declareconstant "INPUT_AT";
declareconstant "value";
declareconstant "left_case";
declareconstant "right_case";
declareconstant "left";
declareconstant "right";
declareconstant "INPUTS2";
declareconstant "up";
declareconstant "upfun";
declareconstant "BINDLABELS";
declareconstant "APPLYATLABELS";
declareconstant "APPLYATLABEL";
declareconstant "APPLYATLABEL0";
declareconstant "LABELTERM";
declareconstant "LABELTERMS_CASE";
declareconstant "LABELTERMS_UNARY";
declareconstant "LABELTERMS_ABSTRACT";
declareconstant "LABELTERMS_SPLIT";
declareconstant "LABELTERMS_FOUND";
declareconstant "LABELTERMS";
declareconstant "POP_CASE";
declareconstant "POP_CASE_1";
declareconstant "POP_CASE_2";
declareconstant "ANTI_UNEVAL_TAC";
declareconstant "TYPEBIND";
declareconstant "UNEVAL_TAC";
declareconstant "GET";
declareconstant "GET2";
declareconstant "GET1";
declareconstant "GET0";
declareconstant "ALLASSOCS";
declareconstant "ASSOCS";
declareconstant "VIEWCASES";
declareconstant "LOOP_TAC";
declareconstant "ALL_STEPS";
declareconstant "STOPLOOP";
declareconstant "STARTLOOP";
declareconstant "LISTBIND";
declareconstant "PAIRBIND";
declareconstant "VALUE";
declareconstant "VALUE0";
declareconstant "PI2F";
declareconstant "PI1F";
declareconstant "REVPIVOT";
declareconstant "PIVOT";
declareconstant "TOPDOWN_PREFIX";
declareconstant "TOPDOWN_INFIX";
declareconstant "TOPDOWN_CASE";
declareconstant "TOPDOWN";
declareconstant "EVERYWHERE2";
declareconstant "EVERYWHERE";
declareconstant "EVERYWHERE_INFIX";
declareconstant "EVERYWHERE_PREFIX";
declareconstant "EVERYWHERE_ABS";
declareconstant "STRONG_EVERYWHERE_CASE";
declareconstant "EVERYWHERE_CASE";
declareconstant "BOTH_CASES";
declareconstant "RIGHT_CASE";
declareconstant "LEFT_CASE";
declareconstant "RL";
declareconstant "RIGHT";
declareconstant "RIGHT2";
declareconstant "RIGHT1";
declareconstant "LEFT";
declareconstant "LEFT2";
declareconstant "LEFT1";
declareconstant "PCASEINTRO";
declareconstant "ID";
declareconstant "PI2";
declareconstant "PI1";
declareconstant "IGNOREFIRST";
declareconstant "HYP";
declareconstant "ODDCHOICE";
declareconstant "EQUATION";
declareconstant "NONTRIV";
declareconstant "REFLEX";
declareconstant "CASEINTRO";
declareconstant "FNDIST";
declareconstant "Id";
declareconstant "p2";
declareconstant "p1";
declareconstant "P2";
declareconstant "P1";
declareconstant "COMP";
declareconstant "TYPES";
declareconstant "OUTPUT";
declareconstant "INPUT";
declareconstant "FLIP";
declareconstant "UNEVAL";
declareconstant "EVAL";
declareconstant "BIND";
declareconstant "false";
declareconstant "true";
addoperator "<<" "(0) , 1";
addoperator "|/" "(0) , 0";
addoperator "***" "(0) , 1";
addoperator "!!!" "(0) , 1";
addoperator "<-" "(0) , 0";
addoperator "=/=" "(0) , 0";
addoperator "|-" "(0) , 0";
addoperator "==" "(0) , 0";
addoperator "->" "(0) , 0";
addoperator "|" "(0) , 0";
addoperator "&" "(0) , 0";
addoperator "~" "(0) , 0";
addoperator "^," "(0) , 0";
addoperator "^+" "(0) , 0";
addoperator "^--" "(0) , 0";
addoperator "^-" "(0) , 0";
addoperator "$" "(0) , 0";
addoperator "**" "(0) , 0";
addoperator "." "(0) , 0";
addoperator "@@" "(0) , 0";
addscout "<<" "INSCOUT";
addscout "forsomer" "FORSOMERBOOL";
addscout "forallr" "FORALLRBOOL";
addscout "|-" "ASSERTSCOUT";
addscout "==" "IFFBOOL";
addscout "->" "IFBOOL";
addscout "|" "ORBOOL";
addscout "&" "ANDBOOL";
addscout "forsome" "FORSOMEBOOL";
addscout "~" "NOTBOOL";
addscout "forall" "FORALLBOOL";
addscout "=" "EQBOOL";
addscinleft "<-" "CONSCIN";
addscinleft "=/=" "XORSCIN";
addscinleft "==" "IFFSCIN";
addscinleft "->" "IFSCIN";
addscinleft "|" "ORSCIN";
addscinleft "&" "ANDSCIN";
addscinleft "^," "";
addscinleft "@!" "";
addscinleft "<=" "";
addscinleft "=>" "";
addscinright "<-" "CONSCIN";
addscinright "=/=" "XORSCIN";
addscinright "==" "IFFSCIN";
addscinright "->" "IFSCIN";
addscinright "|" "ORSCIN";
addscinright "&" "ANDSCIN";
addscinright "^," "";
setdefaultprec 0;
prefixreader "***" "";
prefixreader "!!!" "";
prefixreader "|-" "";
prefixreader "~" "";
prefixreader "^--" "";
prefixreader "^-" "";
prefixreader "$" "";
prefixreader "!$" "";
prefixreader "!@" "";
addopaque "^+";
addopaque "^--";
addopaque "^-";
forcetheorem "COMP" "COMP , ((?f @@ ?g) @ ?x) , (?f @ ?g @ ?x) , COMP , 0";
forcetheorem "P1" "P1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "P2" "P2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "Id" "Id , (Id @ ?x) , ?x , Id , 0";
forcetheorem "}P1" "P1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "}P2" "P2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "ID" "ID , (Id @ ?x) , ?x , Id , 0";
forcetheorem "}Id" "Id , (Id @ ?x) , ?x , Id , 0";
forcetheorem "RIGHT_CASE" "(RIGHT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || ?y , ?thm => ?z) , 0";
forcetheorem "REVPIVOT" "REVPIVOT , ((?a = ?b) || ?T , ?U) , ((LEFT_CASE @ EVAL) => HYP <= (?a = ?b) || ((BIND @ ?b) => ?T) , ?U) , 0";
forcetheorem "VALUE0" "(VALUE0 @ ?thm) , [?P @ ?1] , [?thm => ?P @ ?1] , 0";
forcetheorem "LISTBIND" "(LISTBIND @ ?x , ?y) , ?t , ((PAIRBIND @ ?x , ?y) => ((PAIRBIND @ ?y) *> EVAL) => ((LISTBIND @ ?y) *> EVAL) => ?t) , 0";
forcetheorem "STARTLOOP" "STARTLOOP , ?x , (?x . ?x) , IGNOREFIRST , 0";
forcetheorem "STOPLOOP" "STOPLOOP , (?x . ?x) , ?x , IGNOREFIRST , 0";
forcetheorem "ALL_STEPS" "(ALL_STEPS @ ?ONE_STEP) , (?x . ?y) , ((STOPLOOP =>> ALL_STEPS @ ?ONE_STEP) => (RIGHT @ ?ONE_STEP) => STARTLOOP => IGNOREFIRST => ?x . ?y) , 0";
forcetheorem "LOOP_TAC" "(LOOP_TAC @ ?ONE_STEP) , ?x , ((ALL_STEPS @ ?ONE_STEP) => STARTLOOP => ?x) , 0";
forcetheorem "VIEWCASES" "VIEWCASES , (?x || ?y , ?z) , (?x || ((VIEWCASES =>> INPUT) => ?y) , (VIEWCASES =>> INPUT) => ?z) , 0";
forcetheorem "ALLASSOCS" "(ALLASSOCS @ ?thm) , ?x , ((RIGHT @ ALLASSOCS @ ?thm) => (ASSOCS @ ?thm) => ?x) , 0";
forcetheorem "UNEVAL_TAC" "(UNEVAL_TAC @ ?f) , ?x , ((BOTH_CASES @ EVAL) => FNDIST => (UNEVAL @ ?f) => ?x) , 0";
forcetheorem "TYPEBIND" "(TYPEBIND @ ?t) , ?x , ((EVERYWHERE2 @ TYPES) => (BIND @ ?t) => (EVERYWHERE2 @ $ TYPES) => ?x) , 0";
forcetheorem "ANTI_UNEVAL_TAC" "(ANTI_UNEVAL_TAC @ ?f) , (?x || ?y , ?z) , (EVAL => FNDIST <= (BOTH_CASES @ UNEVAL @ ?f) => ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE_1" "POP_CASE_1 , (?n . ?x || ?y , ?z) , (IGNOREFIRST => ?n . (((2 |-| ?n) @ 0) *> POP_CASE_2 @ ?n) <= ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE_2" "(POP_CASE_2 @ ?n) , (?x || ?y , ?z) , (((1 |-| ?n) =>> ((!$ IGNOREFIRST) @ 1 +! ?n) ** POP_CASE_1) => (1 |-| ?n) => ?x || ?y , ?z) , 0";
forcetheorem "POP_CASE" "POP_CASE , (?x || ?y , ?z) , ((((!$ IGNOREFIRST) @ 1) ** POP_CASE_1) => ?x || ?y , ?z) , 0";
forcetheorem "LABELTERMS_FOUND" "(LABELTERMS_FOUND @ ?a , ?no) , ?a , (((!$ IGNOREFIRST) @ ?no) => ?a) , 0";
forcetheorem "LABELTERMS_SPLIT" "(LABELTERMS_SPLIT @ ?a , ?no) , (?x ^+ ?y) , (((LABELTERMS @ ?a , 2 *! ?no) => ?x) ^+ (LABELTERMS @ ?a , 1 +! 2 *! ?no) => ?y) , 0";
forcetheorem "LABELTERMS_ABSTRACT" "(LABELTERMS_ABSTRACT @ ?a , ?no) , [?x @ ?1] , [(LABELTERMS @ ?a , ?no) => ?x @ ?1] , 0";
forcetheorem "LABELTERMS_UNARY" "(LABELTERMS_UNARY @ ?a , ?no) , (^-- ?x) , (^-- (LABELTERMS @ ?a , ?no) => ?x) , 0";
forcetheorem "LABELTERMS_CASE" "(LABELTERMS_CASE @ ?a , ?no) , (?x || ?y , ?z) , (((LABELTERMS @ ?a , 2 *! ?no) => ?x) || ((LABELTERMS @ ?a , 2 *! 1 +! 2 *! ?no) => ?y) , (LABELTERMS @ ?a , 1 +! 2 *! 1 +! 2 *! ?no) => ?z) , 0";
forcetheorem "LABELTERMS" "(LABELTERMS @ ?a , ?no) , ?x , (((LABELTERMS_FOUND @ ?a , ?no) =>> (LABELTERMS_SPLIT @ ?a , ?no) =>> (LABELTERMS_ABSTRACT @ ?a , ?no) =>> (LABELTERMS_UNARY @ ?a , ?no) =>> LABELTERMS_CASE @ ?a , ?no) => ?x) , 0";
forcetheorem "LABELTERM" "(LABELTERM @ ?a) , ?x , ((LABELTERMS @ ?a , 1) => ?x) , 0";
forcetheorem "APPLYATLABEL0" "(APPLYATLABEL0 @ ?thm , ?label) , (?label . ?x) , (?thm => IGNOREFIRST => ?label . ?x) , 0";
forcetheorem "APPLYATLABEL" "(APPLYATLABEL @ ?thm , ?label) , ?x , ((EVERYWHERE2 @ APPLYATLABEL0 @ ?thm , ?label) => ?x) , 0";
forcetheorem "APPLYATLABELS" "(APPLYATLABELS @ ?thm , ?first , ?rest) , ?x , ((APPLYATLABELS @ ?thm , ?rest) => (APPLYATLABEL @ ?thm , ?first) => ?x) , 0";
forcetheorem "BINDLABELS" "(BINDLABELS @ ?y , ?list) , ?x , ((LEFT @ EVERYWHERE2 @ IGNOREFIRST) => (RIGHT @ ID) => (BIND @ Id @ ?y) => (APPLYATLABELS @ ($ ID) , ?list) => ?x) , 0";
forcetheorem "upfun" "upfun , (upfun @ ?x) , ?x , upfun , 0";
forcetheorem "up" "up , ?x , (upfun @ ?x) , upfun , 0";
forcetheorem "INPUTS2" "INPUTS2 , ?x , ((upfun =>> INPUT ** INPUTS2) => ?x) , 0";
forcetheorem "right" "right , ?x , (((RIGHT @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "left" "left , ?x , (((LEFT @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "right_case" "right_case , ?x , (((RIGHT_CASE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "left_case" "left_case , ?x , (((LEFT_CASE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "value" "value , ?x , (((VALUE @ INPUTS2) ** INPUT) => ?x) , 0";
forcetheorem "INPUT_AT" "(INPUT_AT @ ?x) , ?x , ((INPUTS2 ** upfun) => ?x) , 0";
forcetheorem "goto" "(goto @ ?a) , ?x , ((EVERYWHERE2 @ INPUT_AT @ ?a) => ?x) , 0";
forcetheorem "LAMBDAINTRO" "LAMBDAINTRO , ?x , (LAMBDAINTRO3 => LAMBDAINTRO2 => LAMBDAINTRO1 => ?x) , 0";
forcetheorem "LAMBDAINTRO1" "LAMBDAINTRO1 , (?x ^+ ?y) , ((RL @ LAMBDAINTRO) => ?x ^+ ?y) , 0";
forcetheorem "LAMBDAINTRO2" "LAMBDAINTRO2 , [?f @ ?1] , [(LABELINTRO @ ?1) => LAMBDAINTRO => ?f @ ?1] , 0";
forcetheorem "LAMBDAINTRO3" "LAMBDAINTRO3 , (?x || ?y , ?z) , ((BOTH_CASES @ LAMBDAINTRO) => (LEFT @ LAMBDAINTRO) => ?x || ?y , ?z) , 0";
forcetheorem "LAMBDAREMOVE" "LAMBDAREMOVE , ?x , (LAMBDAREMOVE3 => LAMBDAREMOVE2 => LAMBDAREMOVE1 => ?x) , 0";
forcetheorem "LAMBDAREMOVE1" "LAMBDAREMOVE1 , (?x ^+ ?y) , ((RL @ LAMBDAREMOVE) => ?x ^+ ?y) , 0";
forcetheorem "LAMBDAREMOVE2" "LAMBDAREMOVE2 , [?f @ ?1] , [IGNOREFIRST => LAMBDAREMOVE => ?f @ ?1] , 0";
forcetheorem "LAMBDAREMOVE3" "LAMBDAREMOVE3 , (?x || ?y , ?z) , ((BOTH_CASES @ LAMBDAREMOVE) => (LEFT @ LAMBDAREMOVE) => ?x || ?y , ?z) , 0";
forcetheorem "FALSEBOOL" "FALSEBOOL , false , (bool : false) , EQBOOL , NONTRIV , 0";
forcetheorem "}NOT1" "NOT1 , (~ ?y) , (?y || false , true) , NOT1 , 0";
forcetheorem "IFFSCIN" "IFFSCIN , ((bool : ?x) == bool : ?y) , (?x == ?y) , IFF , TYPES , 0";
forcetheorem "XORSCIN" "XORSCIN , ((bool : ?x) =/= bool : ?y) , (?x =/= ?y) , EQBOOL , FNDIST , IFF , NONTRIV , NOT1 , REFLEX , TYPES , XOR , 0";
forcetheorem "XORBOOL" "XORBOOL , (?x =/= ?y) , (bool : ?x =/= ?y) , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , XOR , 0";
forcetheorem "IFSCIN" "IFSCIN , ((bool : ?x) -> bool : ?y) , (?x -> ?y) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "CONSCIN" "CONSCIN , ((bool : ?x) <- bool : ?y) , (?x <- ?y) , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "IFBOOL" "IFBOOL , (?x -> ?y) , (bool : ?x -> ?y) , EQBOOL , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "CNBOOL" "CNBOOL , (?x <- ?y) , (bool : ?x <- ?y) , CONVIF , EQBOOL , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "EXAMPLE1" "EXAMPLE1 , (forall @ [forsome @ [?1 = ?2]]) , true , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "BOOLDEF2" "BOOLDEF2 , ((bool : ?x) || ?y , ?z) , (?x || ?y , ?z) , BOOLDEF , 0";
forcetheorem "FORSOMEBOOL2" "FORSOMEBOOL2 , (forsome @ [bool : ?P @ ?1]) , (forsome @ [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forsome , 0";
forcetheorem "NONTRIV2a" "NONTRIV2a , (false = true) , false , CASEINTRO , EQUATION , 0";
forcetheorem "XOR" "XOR , (?x =/= ?y) , (~ ?x == ?y) , XOR , 0";
forcetheorem "CONVIF" "CONVIF , (?p <- ?q) , (?q -> ?p) , CONVIF , 0";
forcetheorem "XRULE2" "XRULE2 , ((|- ?p) =/= ?q) , (?p =/= ?q) , ASSERT , EQBOOL , FNDIST , IFF , NONTRIV , NOT1 , REFLEX , TYPES , XOR , 0";
forcetheorem "XORTYPE" "XORTYPE , (?x =/= ?y) , (|- (|- ?x) =/= |- ?y) , ASSERT , EQBOOL , FNDIST , IFF , NONTRIV , NOT1 , REFLEX , TYPES , XOR , 0";
forcetheorem "XRULE3" "XRULE3 , (?p =/= |- ?q) , (?p =/= ?q) , ASSERT , EQBOOL , FNDIST , IFF , NONTRIV , NOT1 , REFLEX , TYPES , XOR , 0";
forcetheorem "NTYPE" "NTYPE , (~ ?p) , (|- ~ |- ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , 0";
forcetheorem "CNRULE2" "CNRULE2 , ((|- ?p) <- ?q) , (?p <- ?q) , ASSERT , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "CONTYPE" "CONTYPE , (?p <- ?q) , (|- (|- ?p) <- |- ?q) , ASSERT , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "CNRULE3" "CNRULE3 , (?p <- |- ?q) , (?p <- ?q) , ASSERT , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "BIDF" "(BIDF @ ?p) , true , (?p == ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "}BID" "BID , true , (?p == ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "}DXM" "DXM , true , (?p | ~ ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "CONS" "CONS , (?p -> ?q) , (?q <- ?p) , AND , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "THMAP" "(THMAP @ ?dir , ?astrm , ?thm) , (?x ^+ ?y) , ((?dir @ EVAL) => ?thm => (?dir @ (MKASRT @ ?astrm) ** BIND @ |- ?astrm) => ?x ^+ ?y) , 0";
forcetheorem "}3pt15b" "3pt15b , false , ((~ ?p) == ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "XORSYM" "XORSYM , (?p =/= ?q) , (?q =/= ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "XORASSOC" "XORASSOC , ((?p =/= ?q) =/= ?r) , (?p =/= ?q =/= ?r) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "MUTASSOC" "MUTASSOC , ((?p =/= ?q) == ?r) , (?p =/= ?q == ?r) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "MUTINT" "MUTINT , (?p =/= ?q == ?r) , (?p == ?q =/= ?r) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "DZERF" "(DZERF @ ?p) , true , (?p | true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}DZER" "DZER , true , (?p | true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt15bF" "(3pt15bF @ ?p) , false , ((~ ?p) == ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "3pt15b" "3pt15b , ((~ ?p) == ?p) , false , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "3pt32" "3pt32 , ((?p | ?q) == ?p | ~ ?q) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt32F" "(3pt32F @ ?q) , (|- ?p) , ((?p | ?q) == ?p | ~ ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt32" "3pt32 , (|- ?p) , ((?p | ?q) == ?p | ~ ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "GR" "GR , ((?p & ?q) == ?p | ?q) , (?p == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CTYPE" "CTYPE , (?p & ?q) , (|- (|- ?p) & |- ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "XORDEF" "XORDEF , (?p =/= ?q) , (~ ?p == ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "NOT1" "NOT1 , (~ ?y) , (?y || false , true) , NOT1 , 0";
forcetheorem "CZERF" "(CZERF @ ?p) , false , (?p & false) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "}CZER" "CZER , false , (?p & false) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "CDISC" "CDISC , (?p & ?q & ?r) , ((?p & ?q) & ?p & ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "}3pt43a" "3pt43a , (|- ?p) , (?p & ?p | ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt43b" "3pt43b , (?p | ?p & ?q) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt43b" "3pt43b , (|- ?p) , (?p | ?p & ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DUAL" "(DUAL @ ?thm) , ?x , (REMFLIP => (RIGHT @ ?thm) => FLIPALL => ?x) , 0";
forcetheorem "3pt48" "3pt48 , ((?p & ~ ?q) == ~ ?p) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "L3pt43" "L3pt43 , (?p == (~ ?p) | ?q) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt49" "3pt49 , ((?p & ?q) == (?p & ?r) == ?p) , (?p & ?q == ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "REPL" "REPL , ((?p == ?q) & ?r == ?p) , ((?p == ?q) & ?r == ?q) , AND , BOOLDEF , EQBOOL , IFF , 0";
forcetheorem "3pt50" "3pt50 , (?p & ?q == ?p) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "GR3" "GR3 , ((?p == ?q) == ?p & ?q) , (?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BDIS" "BDIS , (~ ?p == ?q) , ((~ ?p) == ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "BASSOC" "BASSOC , ((?p == ?q) == ?r) , (?p == ?q == ?r) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "IDISB" "IDISB , (?p -> ?q == ?r) , ((?p -> ?q) == ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CCON" "CCON , (?p & ~ ?p) , false , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "CIDEM" "CIDEM , (?p & ?p) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "3pt67" "3pt67 , (?p & ?q -> ?p) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt67F" "(3pt67F @ ?q) , (|- ?p) , (?p & ?q -> ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt67" "3pt67 , (|- ?p) , (?p & ?q -> ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt68" "3pt68 , (?p | ?p -> ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt68F" "(3pt68F @ ?p , ?q) , true , (?p | ?p -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt68" "3pt68 , true , (?p | ?p -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DDIS" "DDIS , (?p | ?q == ?r) , ((?p | ?q) == ?p | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DIDEM" "DIDEM , (?p | ?p) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt69" "3pt69 , (?p | ?q -> ?p) , (?q -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BALTDEF" "BALTDEF , (?p == ?q) , ((?p & ?q) | (~ ?p) & ~ ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt70" "3pt70 , ((?p | ?q) -> ?p & ?q) , (?p == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IREFF" "(IREFF @ ?p) , true , (?p -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}IREF" "IREF , true , (?p -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IRZERF" "(IRZERF @ ?p) , true , (?p -> true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}IRZER" "IRZER , true , (?p -> true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt75F" "(3pt75F @ ?p) , true , (false -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt75" "3pt75 , true , (false -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76aF" "(3pt76aF @ ?p , ?q) , true , (?p -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt76a" "3pt76a , true , (?p -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76a" "3pt76a , (?p -> ?p | ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76bF" "(3pt76bF @ ?p , ?q) , true , ((?p & ?q) -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt76b" "3pt76b , true , ((?p & ?q) -> ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76c" "3pt76c , ((?p & ?q) -> ?p | ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76cF" "(3pt76cF @ ?p , ?q) , true , ((?p & ?q) -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt76c" "3pt76c , true , ((?p & ?q) -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76dF" "(3pt76dF @ ?p , ?q , ?r) , true , ((?p | ?q & ?r) -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt76d" "3pt76d , true , ((?p | ?q & ?r) -> ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76d" "3pt76d , ((?p | ?q & ?r) -> ?p | ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76e" "3pt76e , ((?p & ?q) -> ?p & ?q | ?r) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt76eF" "(3pt76eF @ ?p , ?q , ?r) , true , ((?p & ?q) -> ?p & ?q | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt76e" "3pt76e , true , ((?p & ?q) -> ?p & ?q | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "MOP" "MOP , ((?p & ?p -> ?q) -> ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "MOPF" "(MOPF @ ?p , ?q) , true , ((?p & ?p -> ?q) -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}MOP" "MOP , true , ((?p & ?p -> ?q) -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt79" "3pt79 , ((?p -> ?r) & (~ ?p) -> ?r) , (|- ?r) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt79F" "(3pt79F @ ?p) , (|- ?r) , ((?p -> ?r) & (~ ?p) -> ?r) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt79" "3pt79 , (|- ?r) , ((?p -> ?r) & (~ ?p) -> ?r) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "XALTDEF" "XALTDEF , (?p =/= ?q) , (((~ ?p) & ?q) | ?p & ~ ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , XOR , 0";
forcetheorem "IREF" "IREF , (?p -> ?p) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt81" "3pt81 , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt81F" "(3pt81F @ ?p , ?q) , true , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt81" "3pt81 , true , (((?p -> ?q) & ?q -> ?p) -> ?p == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt64" "3pt64 , ((?p -> ?q) -> ?p -> ?r) , (?p -> ?q -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt82aF" "(3pt82aF @ ?p , ?q , ?r) , true , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt82a" "3pt82a , true , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt82a" "3pt82a , (((?p -> ?q) & ?q -> ?r) -> ?p -> ?r) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt82bF" "(3pt82bF @ ?p , ?q , ?r) , true , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt82b" "3pt82b , true , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NEQ" "NEQ , (?p == ?q) , ((~ ?p) == ~ ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "3pt82b" "3pt82b , (((?p == ?q) & ?q -> ?r) -> ?p -> ?r) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt82c" "3pt82c , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt82cF" "(3pt82cF @ ?p , ?q , ?r) , true , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt82c" "3pt82c , true , (((?p -> ?q) & ?q == ?r) -> ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt83" "3pt83 , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt83F" "(3pt83F @ ?F , ?e , ?f) , true , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "}3pt83" "3pt83 , true , ((?e = ?f) -> (?F @ ?e) = ?F @ ?f) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "REMFLIP" "REMFLIP , ?x , ((BRULE1 =>> CRULE1 =>> DRULE1 =>> NRULE1 =>> XRULE1 =>> AT =>> AF) => TWOASSERTS => DUBNEG2 => SREMFLIP => ?x) , 0";
forcetheorem "SREMFLIP" "SREMFLIP , ?x , ((FDEF <<= NEGF <<= BFLIP <<= XORFLIP =>> DEMa =>> DEMb =>> REMA) => NOTCLEAN => ASSERTCLEAN => (LEFT @ SREMFLIP) => (RIGHT @ SREMFLIP) => ?x) , 0";
forcetheorem "ASSERTCLEAN" "ASSERTCLEAN , (|- ?y) , (|- ?y) , ASSERT , 0";
forcetheorem "NOTCLEAN" "NOTCLEAN , (~ ?y) , (~ ?y) , NOT1 , 0";
forcetheorem "BFLIP" "BFLIP , (~ ?p == ?q) , ((~ ?p) =/= ~ ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "XORFLIP" "XORFLIP , (~ ?p =/= ?q) , ((~ ?p) == ~ ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "3pt84c" "3pt84c , ((?q & ?e = ?f) -> ?F @ ?e) , ((?q & ?e = ?f) -> ?F @ ?f) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt85b" "3pt85b , ((?q & ?p) -> ?F @ ?p) , ((?q & ?p) -> ?F @ true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "APLZ" "APLZ , ((?e = ?f) & ?x) , (((RIGHT @ BIND @ ?e) ** LZ ** RIGHT @ EVAL) => (?e = ?f) & ?x) , 0";
forcetheorem "AP3pt86a" "AP3pt86a , (?x -> ?p) , ((THMAP @ LEFT , ?p , 3pt86a) => ?x -> ?p) , 0";
forcetheorem "3pt86b" "3pt86b , ((?F @ |- ?p) -> ?p | ?q) , ((?F @ false) -> ?p | ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "AP3pt86b" "AP3pt86b , (?x -> ?p | ?q) , ((THMAP @ LEFT , ?p , 3pt86b) => ?x -> ?p | ?q) , 0";
forcetheorem "3pt85a" "3pt85a , (?p -> ?F @ ?p) , (?p -> ?F @ true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt88" "3pt88 , (?p | ?F @ |- ?p) , (?p | ?F @ false) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "AP3pt88" "AP3pt88 , (?p | ?x) , ((THMAP @ RIGHT , ?p , 3pt88) => ?p | ?x) , 0";
forcetheorem "3pt87" "3pt87 , (?p & ?F @ ?p) , (?p & ?F @ true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "FLIPALL" "FLIPALL , ?x , (SFLIPALL => DUBNEG2 <= (BRULE1 <<= XRULE1 <<= DRULE1 <<= CRULE1) <= ?x) , 0";
forcetheorem "SFLIPALL" "SFLIPALL , ?x , ((FLIPPASTA =>> FLIPPASTN =>> FLIPPASTB =>> FLIPPASTX =>> FLIPPASTD =>> FLIPPASTC <<= FDEF =>> NEGF) => ?x) , 0";
forcetheorem "FLIPPASTA" "FLIPPASTA , (~ |- ?p) , (|- SFLIPALL => ~ ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , TYPES , 0";
forcetheorem "FLIPPASTN" "FLIPPASTN , (~ ~ ?x) , (~ SFLIPALL => ~ ?x) , 0";
forcetheorem "FLIPPASTB" "FLIPPASTB , (~ ?x == ?y) , ((SFLIPALL => ~ ?x) =/= SFLIPALL => ~ ?y) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "FLIPPASTX" "FLIPPASTX , (~ ?x =/= ?y) , ((SFLIPALL => ~ ?x) == SFLIPALL => ~ ?y) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "FLIPPASTD" "FLIPPASTD , (~ ?x | ?y) , ((SFLIPALL => ~ ?x) & SFLIPALL => ~ ?y) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "FLIPPASTC" "FLIPPASTC , (~ ?x & ?y) , ((SFLIPALL => ~ ?x) | SFLIPALL => ~ ?y) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt86a" "3pt86a , ((?F @ |- ?p) -> ?p) , ((?F @ false) -> ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt89" "3pt89 , ((?p & ?F @ true) | (~ ?p) & ?F @ false) , (|- ?F @ |- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IDIS1" "IDIS1 , ((?p | ?q) -> ?r) , ((?p -> ?r) & ?q -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IDIS2" "IDIS2 , ((?p & ?q) -> ?r) , ((?p -> ?r) | ?q -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IDIS3" "IDIS3 , (?p -> ?q & ?r) , ((?p -> ?q) & ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DDISD" "DDISD , (?p | ?q | ?r) , ((?p | ?q) | ?p | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IDIS4" "IDIS4 , (?p -> ?q | ?r) , ((?p -> ?q) | ?p -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVIMPAND" "(CONVIMPAND @ ?thm) , (?p & ?q) , (CID => ?p & ?thm => ?p -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVIMPOR" "(CONVIMPOR @ ?thm) , (?p | ?q) , (DID => ?q | FDEF <= ~ ?thm => ?p -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVANDIMP" "(CONVANDIMP @ ?thm) , (?p -> ?q) , (BID => BRULE2 => (?thm => ?p & ?q) == ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt44b" "3pt44b , (?p | (~ ?p) & ?q) , (?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVANDOR" "(CONVANDOR @ ?thm) , (?p | ?q) , (DID => ?q | FDEF <= ~ (CONVANDIMP @ ?thm) => ?p -> ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVORIMP" "(CONVORIMP @ ?thm) , (?p -> ?q) , (BID => BRULE2 => (?thm => ?p | ?q) == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "GR2" "GR2 , ((?p == ?q) == ?p | ?q) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVORAND" "(CONVORAND @ ?thm) , (?p & ?q) , (BID2 => (RIGHT @ BID) => BASSOC => BRULE3 => (?p == ?q) == ?thm => ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "EQSYMM" "EQSYMM , (?x = ?y) , (?y = ?x) , CASEINTRO , EQUATION , REFLEX , 0";
forcetheorem "EQSYMM2" "EQSYMM2 , (?x || ?y , ?z) , ((?x = true) || ?y , ?z) , CASEINTRO , EQUATION , REFLEX , 0";
forcetheorem "EQT" "EQT , ((|- ?p) = true) , (?p = true) , ASSERT , BOOLDEF , CASEINTRO , EQUATION , REFLEX , TYPES , 0";
forcetheorem "ASRTRIGHT" "(ASRTRIGHT @ ?p) , (?q ^+ ?p) , ((LEFT @ MKASRT @ ?p) => ((?r ^+ |- ?s) = ?r ^+ ?s) <= ?q ^+ ?p) , 0";
forcetheorem "3pt84b" "3pt84b , ((?e = ?f) -> ?F @ ?e) , ((?e = ?f) -> ?F @ ?f) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BTYPE" "BTYPE , (?p == ?q) , (|- (|- ?p) == |- ?q) , ASSERT , EQBOOL , IFF , TYPES , 0";
forcetheorem "BRULE2" "BRULE2 , ((|- ?p) == ?q) , (?p == ?q) , ASSERT , EQBOOL , IFF , TYPES , 0";
forcetheorem "BID2" "BID2 , (?p == true) , (|- ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "ASSRTBOTH" "(ASSRTBOTH @ ?p) , (?p ^+ ?p) , (((?r ^+ |- ?s) = ?r ^+ ?s) <= (((|- ?r) ^+ ?s) = ?r ^+ ?s) <= ?p ^+ ?p) , 0";
forcetheorem "ASRTLEFT" "(ASRTLEFT @ ?p) , (?p ^+ ?q) , ((RIGHT @ MKASRT @ ?p) => (((|- ?r) ^+ ?s) = ?r ^+ ?s) <= ?p ^+ ?q) , 0";
forcetheorem "MKASRT" "(MKASRT @ ?p) , (?r ^+ ?s) , (((ASSRTBOTH @ ?p) =>> (ASRTLEFT @ ?p) =>> (ASRTRIGHT @ ?p) =>> RL @ MKASRT @ ?p) => ?r ^+ ?s) , 0";
forcetheorem "LZ" "LZ , ((?e = ?f) & ?F @ ?e) , ((?e = ?f) & ?F @ ?f) , AND , BOOLDEF , EQBOOL , 0";
forcetheorem "CZER" "CZER , (?p & false) , false , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "REMA" "REMA , (|- ~ ?p) , (~ |- ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , TYPES , 0";
forcetheorem "BRULE3" "BRULE3 , (?p == |- ?q) , (?p == ?q) , ASSERT , EQBOOL , IFF , TYPES , 0";
forcetheorem "ASRTEQ" "ASRTEQ , (?e = ?f) , (|- ?e = ?f) , ASSERT , EQBOOL , 0";
forcetheorem "BCONV" "BCONV , (?e == ?f) , ((|- ?e) = |- ?f) , ASSERT , IFF , 0";
forcetheorem "3pt15a" "3pt15a , (?p == false) , (~ ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "DXM" "DXM , (?p | ~ ?p) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "}CONDCASESL1" "CONDCASESL1 , true , ((?a || ?b , ?c) == (?a & ?b) | (~ ?a) & ?c) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DTYPE" "DTYPE , (?p | ?q) , (|- (|- ?p) | |- ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "CONDCASESL1F" "(CONDCASESL1F @ ?a , ?b , ?c) , true , ((?a || ?b , ?c) == (?a & ?b) | (~ ?a) & ?c) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BEQSUBS" "BEQSUBS , ((?a == ?b) -> ?a) , ((?a == ?b) -> ?b) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BSYM" "BSYM , (?p == ?q) , (?q == ?p) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "CONDCASESL1" "CONDCASESL1 , ((?a || ?b , ?c) == (?a & ?b) | (~ ?a) & ?c) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IMPTYPE" "IMPTYPE , (?p -> ?q) , (|- (|- ?p) -> |- ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "3pt43a" "3pt43a , (?p & ?p | ?q) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IMPTOCOND" "IMPTOCOND , (?a -> ?b) , (|- ?a || ?b , true) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "FNDIST" "FNDIST , (?f @ ?x || ?y , ?z) , (?x || (?f @ ?y) , ?f @ ?z) , FNDIST , 0";
forcetheorem "CONDCASES" "CONDCASES , ((?a & ?b) | (~ ?a) & ?c) , (|- ?a || ?b , ?c) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CASEPREP" "CASEPREP , (?a || ?b , ?c) , (?a || (ALLASSERTS => (?b = |- ?b) => ?b) , ALLASSERTS => (?c = |- ?c) => ?c) , 0";
forcetheorem "XORALTDEF" "XORALTDEF , ((?a & ~ ?b) | (~ ?a) & ?b) , (~ ?a == ?b) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONDCASES2" "CONDCASES2 , (?a || (|- ?b) , |- ?c) , ((?a & ?b) | (~ ?a) & ?c) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONDSIMP" "CONDSIMP , (?a || (|- ?b) , |- ?c) , ((DID =>> DZER =>> DSYM) => DSYM => (DID ** DZER) => XORALTDEF => BALTDEF <= (DRULE1 ** DRULE2) => (RL @ CRULE1 ** CRULE2 ** CID ** CZER) => (?a & ?b) | (~ ?a) & ?c) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "TESTSIMP" "TESTSIMP , (?a || ?b , ?c) , ((EVERYWHERE @ $ XOR) => (EVERYWHERE @ $ IDEF2) => (EVERYWHERE @ CASEPREP ** CONDSIMP) => ?a || ?b , ?c) , 0";
forcetheorem "}DINSTANTIATE" "DINSTANTIATE , (forsome @ ?P) , ((?P @ ?x) | forsome @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , forall , forsome , 0";
forcetheorem "3pt43bF" "(3pt43bF @ ?q) , (|- ?p) , (?p | ?p & ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ANDUNPACK" "ANDUNPACK , ((?P & ?Q) || ?x , ?y) , (?P || (?Q || ?x , ?y) , ?y) , AND , CASEINTRO , 0";
forcetheorem "ANDBOOL" "ANDBOOL , (?x & ?y) , (bool : ?x & ?y) , AND , EQBOOL , FNDIST , NONTRIV , 0";
forcetheorem "FORSOMEDROP" "FORSOMEDROP , (forsome @ [?x]) , (|- ?x) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "EQBOOL" "EQBOOL , (?x = ?y) , (bool : ?x = ?y) , EQBOOL , 0";
forcetheorem "FORALLSWITCH2" "FORALLSWITCH2 , (forall @ [forall @ [(?P @ ?1) @ ?2]]) , (forall @ [forall @ [bool : (?P @ ?2) @ ?1]]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "AF" "AF , (|- false) , false , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "3pt43aF" "(3pt43aF @ ?q) , (|- ?p) , (?p & ?p | ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NOTFORALL" "NOTFORALL , (~ forall @ [?P @ ?1]) , ((forall @ [~ ?P @ ?1]) | ~ forall @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , 0";
forcetheorem "FORALLNOT" "FORALLNOT , (forall @ [~ ?P @ ?1]) , ((forall @ [~ ?P @ ?1]) & ~ forall @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "FORALLOR" "FORALLOR , (forall @ [(?P @ ?1) | ?Q @ ?1]) , ((forall @ [?P @ ?1]) | forall @ [(?P @ ?1) | ?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , 0";
forcetheorem "DID" "DID , (?p | false) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BOOLDEF0" "BOOLDEF0 , (bool : ?p) , (?p || true , false) , BOOLDEF , EQUATION , 0";
forcetheorem "ORBOOL" "ORBOOL , (?x | ?y) , (bool : ?x | ?y) , EQBOOL , FNDIST , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "GCLEAN" "GCLEAN , ?x , ((RL @ GCLEAN) => NRULE2 => NRULE1 => STL => STR => STT => (ALLASSERTS ** RIGHT @ (RIGHT @ ALLASSERTS) ** LEFT @ ALLASSERTS) => ?x) , 0";
forcetheorem "ALLASSERTS" "ALLASSERTS , (|- |- ?x) , (ALLASSERTS => |- ?x) , ASSERT , TYPES , 0";
forcetheorem "STT" "STT , (|- ?x ^+ ?y) , (((|- ?p ^+ ?q) = ?p ^+ ?q) => |- ?x ^+ ?y) , 0";
forcetheorem "STR" "STR , ((|- ?x) ^+ ?y) , ((((|- ?p) ^+ ?q) = ?p ^+ ?q) => (|- ?x) ^+ ?y) , 0";
forcetheorem "STL" "STL , (?x ^+ |- ?y) , (((?p ^+ |- ?q) = ?p ^+ ?q) => ?x ^+ |- ?y) , 0";
forcetheorem "OR" "OR , (?x | ?y) , (~ (~ ?x) & ~ ?y) , OR , 0";
forcetheorem "ANDSCIN" "ANDSCIN , ((bool : ?x) & bool : ?y) , (?x & ?y) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , REFLEX , TYPES , 0";
forcetheorem "ORSCIN" "ORSCIN , ((bool : ?x) | bool : ?y) , (?x | ?y) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , NOT1 , OR , REFLEX , 0";
forcetheorem "AND" "AND , (?x & ?y) , (?x || (true = ?y) , false) , AND , 0";
forcetheorem "ALTORDEF" "ALTORDEF , (?x | ?y) , (?x || true , ?y || true , false) , AND , CASEINTRO , NONTRIV , NOT1 , OR , REFLEX , 0";
forcetheorem "TAB_OR_2" "TAB_OR_2 , ((?p | ?q) || ?a , ?b) , (?p || ?a , ?q || ?a , ?b) , AND , CASEINTRO , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "TAB_OR" "TAB_OR , (?p | ?q) , (?p || true , ?q || true , false) , AND , CASEINTRO , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "TAB_IF_2" "TAB_IF_2 , ((?p -> ?q) || ?a , ?b) , (?p || (?q || ?a , ?b) , ?a) , AND , CASEINTRO , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "TAB_IFF_2" "TAB_IFF_2 , ((?x == ?y) || ?a , ?b) , (?x || (?y || ?a , ?b) , ?y || ?b , ?a) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "3pt14" "3pt14 , (?p =/= ?q) , ((~ ?p) == ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "TAB_XOR" "TAB_XOR , (?x =/= ?y) , (?x || (?y || false , true) , ?y || true , false) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "TAB_XOR_2" "TAB_XOR_2 , ((?x =/= ?y) || ?a , ?b) , (?x || (?y || ?b , ?a) , ?y || ?a , ?b) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , XOR , 0";
forcetheorem "TAB_NOT" "TAB_NOT , (~ ?p) , (?p || false , true) , NOT1 , ODDCHOICE , 0";
forcetheorem "TAB_ALL" "(TAB_ALL @ ?x) , (forall @ [?P @ ?1]) , ((forall @ [?P @ ?1]) || ((EVAL => ?P @ ?x) || true , false) , false) , CASEINTRO , EQUATION , forall , 0";
forcetheorem "TAB_SOME" "(TAB_SOME @ ?x) , (forsome @ [?P @ ?1]) , ((forsome @ [?P @ ?1]) || true , (EVAL => ?P @ ?x) || true , false) , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , forall , forsome , 0";
forcetheorem "UNPACK" "UNPACK , ((?x || ?y , ?z) || ?u , ?v) , (?x || (?y || ?u , ?v) , ?z || ?u , ?v) , CASEINTRO , 0";
forcetheorem "NOT" "NOT , (~ ?y) , (?y || false , true) , NOT1 , 0";
forcetheorem "NONTRIV" "NONTRIV , (true = false) , false , NONTRIV , 0";
forcetheorem "TAB_SOME_NEW_1" "TAB_SOME_NEW_1 , ((forsome @ [?P @ ?1]) || ?a , ?b) , ((forsome @ [?P @ ?1]) || (([?a] = [(EVAL => ?P @ ?1) || ?a , ?a]) || ?a , true) , ?b) , CASEINTRO , REFLEX , 0";
forcetheorem "TAB_ALL_NEW_1" "TAB_ALL_NEW_1 , ((forall @ [?P @ ?1]) || ?a , ?b) , ((forall @ [?P @ ?1]) || ?a , ([?b] = [(EVAL => ?P @ ?1) || ?b , ?b]) || ?b , true) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , forall , 0";
forcetheorem "TAB_ALL_NEW_2" "TAB_ALL_NEW_2 , ((forall @ [?P @ ?1]) || ?a , ([?b] = [(?P @ ?1) || ?b , true]) || ?b , true) , ((forall @ [?P @ ?1]) || ?a , true) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , forall , 0";
forcetheorem "TAB_SOME_NEW_2" "TAB_SOME_NEW_2 , ((forsome @ [?P @ ?1]) || (([?a] = [(?P @ ?1) || true , ?a]) || ?a , true) , ?b) , ((forsome @ [?P @ ?1]) || true , ?b) , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , forall , forsome , 0";
forcetheorem "ALT_QUANT_IMP" "ALT_QUANT_IMP , ((forsome @ [forall @ [?P @ ?1 , ?2]]) -> forall @ [forsome @ [?P @ ?2 , ?1]]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , forall , forsome , 0";
forcetheorem "COUNTER1" "COUNTER1 , (*** ?P) , (!!! [~ ?P @ ?1]) , COUNTER1 , 0";
forcetheorem "SUBTYPE" "SUBTYPE , ((?t |/ ?P) : ?x) , ((?P @ ?t : ?x) || (?t : ?x) , ?t : !!! [?P @ ?t : ?1]) , SUBTYPE , 0";
forcetheorem "COUNTER" "COUNTER , (*** [?P @ ?1]) , (!!! [~ ?P @ ?1]) , COUNTER1 , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , 0";
forcetheorem "CEX" "CEX , (forall @ [?P @ ?1]) , (bool : ?P @ !!! [[~ ?P @ ?2] @ ?1]) , BOOLDEF , CASEINTRO , CHOICE , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "FORSOMEBOOL" "FORSOMEBOOL , (forsome @ ?P) , (bool : forsome @ ?P) , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , forsome , 0";
forcetheorem "forsomecase" "forsomecase , (forsome @ [?P @ ?1]) , ((forsome @ [?P @ ?1]) || true , false) , BOOLDEF , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , forsome , 0";
forcetheorem "forallcase" "forallcase , (forall @ [?P @ ?1]) , ((forall @ [?P @ ?1]) || true , false) , BOOLDEF , EQBOOL , EQUATION , ODDCHOICE , forall , 0";
forcetheorem "CHOICE" "CHOICE , (forsome @ [?P @ ?1]) , (?P @ !!! [?P @ ?1]) , CHOICE , 0";
forcetheorem "forsome" "forsome , (forsome @ ?P) , (~ forall @ [~ ?P @ ?1]) , forsome , 0";
forcetheorem "ANY_INSTANCE" "ANY_INSTANCE , ((?P @ ?x) -> ?P @ !!! [?P @ ?1]) , true , AND , CASEINTRO , CHOICE , EQBOOL , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , forall , forsome , 0";
forcetheorem "TAB_WITNESS" "TAB_WITNESS , ((forsome @ [?P @ ?1]) || ?a , ?b) , ((forsome @ [?P @ ?1]) || ((CHOICE_TAC => forsome @ [?P @ ?1]) || ?a , ?b) , ?b) , ODDCHOICE , 0";
forcetheorem "CHOICE_TAC" "CHOICE_TAC , (forsome @ [?P @ ?1]) , (EVAL => ?P @ !!! [?P @ ?1]) , CHOICE , 0";
forcetheorem "TAB_SOME_2" "(TAB_SOME_2 @ ?x) , ((forsome @ [?P @ ?1]) || ?a , ?b) , ((forsome @ [?P @ ?1]) || ?a , (EVAL => ?P @ ?x) || ?a , ?b) , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , forall , forsome , 0";
forcetheorem "ALT_QUANT_AGAIN" "ALT_QUANT_AGAIN , ((forsome @ [forall @ [?P @ ?1 , ?2]]) -> forall @ [forsome @ [?P @ ?2 , ?1]]) , ((forsome @ [forall @ [?P @ ?1 , ?2]]) || ((forall @ [?P @ (!!! [[forall @ [?P @ ?3 , ?4]] @ ?2]) , ?1]) || ((forall @ [forsome @ [?P @ ?2 , ?1]]) || true , (forsome @ [?P @ ?1 , !!! [[~ [forsome @ [?P @ ?5 , ?4]] @ ?3] @ ?2]]) || true , (forall @ [?P @ (!!! [[forall @ [?P @ ?3 , ?4]] @ ?2]) , ?1]) || ((?P @ (!!! [[forall @ [?P @ ?2 , ?3]] @ ?1]) , *** [forsome @ [?P @ ?2 , ?1]]) || ((forsome @ [?P @ ?1 , !!! [[~ [forsome @ [?P @ ?5 , ?4]] @ ?3] @ ?2]]) || true , (?P @ (!!! [forall @ [?P @ ?1 , ?2]]) , !!! [[~ [forsome @ [?P @ ?4 , ?3]] @ ?2] @ ?1]) || true , (?P @ (!!! [[forall @ [?P @ ?2 , ?3]] @ ?1]) , *** [forsome @ [?P @ ?2 , ?1]]) || false , true) , true) , true) , true) , true) , AND , BOOLDEF , CASEINTRO , CHOICE , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , forall , forsome , 0";
forcetheorem "TAB_IFF" "TAB_IFF , (?x == ?y) , (?x || (?y || true , false) , ?y || false , true) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "TAB_CEX" "TAB_CEX , ((forall @ [?P @ ?1]) || ?a , ?b) , ((forall @ [?P @ ?1]) || ?a , ODDCHOICE <= (BOOLDEF => CEX_TAC => forall @ [?P @ ?1]) || ?a , ?b) , ODDCHOICE , 0";
forcetheorem "CEX_TAC" "CEX_TAC , (forall @ [?P @ ?1]) , (bool : EVAL => ?P @ !!! [[~ ?P @ ?2] @ ?1]) , BOOLDEF , CASEINTRO , CHOICE , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "TAB_ALL_2" "(TAB_ALL_2 @ ?x) , ((forall @ [?P @ ?1]) || ?a , ?b) , ((forall @ [?P @ ?1]) || ((EVAL => ?P @ ?x) || ?a , ?b) , ?b) , CASEINTRO , EQUATION , forall , 0";
forcetheorem "COMMUTE_LEVEL_QUANT" "COMMUTE_LEVEL_QUANT , ((forall @ [forall @ [?P @ ?1 , ?2]]) == forall @ [forall @ [?P @ ?2 , ?1]]) , ((forall @ [forall @ [?P @ ?1 , ?2]]) || ((forall @ [forall @ [?P @ ?2 , ?1]]) || true , (forall @ [forall @ [?P @ ?2 , ?1]]) || true , (forall @ [?P @ ?1 , !!! [[~ [forall @ [?P @ ?5 , ?4]] @ ?3] @ ?2]]) || true , (?P @ (!!! [[~ [?P @ ?3 , !!! [[~ [forall @ [?P @ ?7 , ?6]] @ ?5] @ ?4]] @ ?2] @ ?1]) , !!! [[~ [forall @ [?P @ ?4 , ?3]] @ ?2] @ ?1]) || true , (forall @ [forall @ [?P @ ?1 , ?2]]) || ((forall @ [?P @ (*** [?P @ ?2 , *** [forall @ [?P @ ?4 , ?3]]]) , ?1]) || ((?P @ (*** [?P @ ?1 , *** [forall @ [?P @ ?3 , ?2]]]) , *** [forall @ [?P @ ?2 , ?1]]) || ((?P @ (*** [?P @ ?1 , *** [forall @ [?P @ ?3 , ?2]]]) , *** [forall @ [?P @ ?2 , ?1]]) || false , true) , true) , true) , true) , (forall @ [forall @ [?P @ ?2 , ?1]]) || ((forall @ [forall @ [?P @ ?1 , ?2]]) || true , (forall @ [?P @ (!!! [[~ [forall @ [?P @ ?4 , ?5]] @ ?3] @ ?2]) , ?1]) || true , (?P @ (!!! [[~ [forall @ [?P @ ?3 , ?4]] @ ?2] @ ?1]) , !!! [[~ [?P @ (!!! [[~ [forall @ [?P @ ?6 , ?7]] @ ?5] @ ?4]) , ?3] @ ?2] @ ?1]) || true , (forall @ [forall @ [?P @ ?2 , ?1]]) || ((forall @ [?P @ ?1 , *** [?P @ (*** [forall @ [?P @ ?3 , ?4]]) , ?2]]) || ((?P @ (*** [forall @ [?P @ ?1 , ?2]]) , *** [?P @ (*** [forall @ [?P @ ?2 , ?3]]) , ?1]) || ((?P @ (*** [forall @ [?P @ ?1 , ?2]]) , *** [?P @ (*** [forall @ [?P @ ?2 , ?3]]) , ?1]) || false , true) , true) , true) , true) , true) , BOOLDEF , CASEINTRO , CHOICE , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , forall , forsome , 0";
forcetheorem "EQ_TRANS" "EQ_TRANS , (((?x = ?y) & ?y = ?z) -> ?x = ?z) , true , AND , CASEINTRO , EQUATION , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "forallr" "forallr , (forallr @ ?x) , (forall @ [((P1 @ ?x) @ ?1) -> (P2 @ ?x) @ ?1]) , forallr , 0";
forcetheorem "NOTBOOL" "NOTBOOL , (~ ?y) , (bool : ~ ?y) , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , 0";
forcetheorem "FORSOMERBOOL" "FORSOMERBOOL , (forsomer @ ?x) , (bool : forsomer @ ?x) , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , forsomer , 0";
forcetheorem "forsomer" "forsomer , (forsomer @ ?x) , (~ forallr @ (P1 @ ?x) , [~ (P2 @ ?x) @ ?1]) , forsomer , 0";
forcetheorem "ILID" "ILID , (true -> ?p) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "TAB_AND" "TAB_AND , (?p & ?q) , (?p || (?q || true , false) , false) , AND , EQUATION , ODDCHOICE , 0";
forcetheorem "ONEPOINT" "ONEPOINT , (forallr @ [?1 = ?e] , [?P @ ?1]) , (|- EVAL => ?P @ ?e) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "CONVERT_IMP_1" "(CONVERT_IMP_1 @ ?thm) , (?p -> ?q) , (3pt76b => (LEFT @ ?thm) => ($ IRULE2) => ?p -> ?q) , 0";
forcetheorem "DXMF" "(DXMF @ ?p) , true , (?p | ~ ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "CDISD" "CDISD , (?p & ?q | ?r) , ((?p & ?q) | ?p & ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONVERT_IMP_2" "(CONVERT_IMP_2 @ ?thm , ?q) , (|- ?p) , (CRULE1 => DID => (?p & ?q) | FDEF <= ~ ?thm => ?p -> ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt66" "3pt66 , (?p & ?p -> ?q) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "PRE9pt12" "PRE9pt12 , ((forall @ [(?P @ ?1) -> ?Q @ ?1]) -> (forall @ [?P @ ?1]) -> forall @ [?Q @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , 0";
forcetheorem "forall2" "forall2 , (forall @ [?P @ ?1]) , ([?P @ ?1] = [true]) , forall , 0";
forcetheorem "9pt16a1" "(9pt16a1 @ ?thm) , (?P @ ?x) , ((LEFT @ ?thm) => (forall @ [?P @ ?1]) || true , [?P @ ?1] @ ?x) , CASEINTRO , forall , 0";
forcetheorem "9pt16a" "(9pt16a @ ?x , ?thm) , ?y , ((9pt16a1 @ ?thm) => (BIND @ ?x) => ?y) , 0";
forcetheorem "9pt16b" "(9pt16b @ ?thm) , (forall @ [?P @ ?1]) , ((FORALLDROP ** AT) => forall @ [?thm => ?P @ ?1]) , 0";
forcetheorem "9pt30a" "(9pt30a @ ?thm) , ((?P @ ?x) -> ?Q) , ((LEFT @ ?thm) => ((forsome @ [?P @ ?1]) -> ?Q) || true , [(?P @ ?1) -> ?Q] @ ?x) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "9pt30b" "(9pt30b @ ?thm) , ((forsome @ [?P @ ?1]) -> ?Q) , ((FORALLDROP ** AT) => forall @ [?thm => (?P @ ?1) -> ?Q]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "}ONEPOINT" "ONEPOINT , (forallr @ [?1 = ?e] , [?P @ ?1]) , (|- EVAL => ?P @ ?e) , EQBOOL , AND , ASSERT , BOOLDEF , CASEINTRO , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "}RIGHT" "(RIGHT @ ?thm) , ?x , (((RIGHT1 @ ?thm) =>> RIGHT2 @ ?thm) => ?x) , 0";
forcetheorem "}LEFT" "(LEFT @ ?thm) , ?x , (((LEFT1 @ ?thm) =>> LEFT2 @ ?thm) => ?x) , 0";
forcetheorem "8pt14U" "8pt14U , (forallr @ [?1 = ?e] , [?P @ ?1]) , (|- EVAL => ?P @ ?e) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "NRULE2" "NRULE2 , (~ |- ?p) , (~ ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , TYPES , 0";
forcetheorem "8pt14E" "8pt14E , (forsomer @ [?1 = ?e] , [?P @ ?1]) , (|- EVAL => ?P @ ?e) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "UNIV_RANGE_1" "UNIV_RANGE_1 , (forallr @ [true] , [?P @ ?1]) , (forall @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "UNIV_RANGE_2" "UNIV_RANGE_2 , (forsomer @ [true] , [?P @ ?1]) , (forsome @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsome , forsomer , 0";
forcetheorem "FORALLRBOOL2" "FORALLRBOOL2 , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forallr @ [bool : ?R @ ?1] , [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "FORSOMERBOOL2" "FORSOMERBOOL2 , (forsomer @ [?R @ ?1] , [?P @ ?1]) , (forsomer @ [bool : ?R @ ?1] , [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , TYPES , forallr , forsomer , 0";
forcetheorem "NOTBOOLDROP" "NOTBOOLDROP , (~ bool : ?x) , (~ ?x) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , NOT1 , REFLEX , 0";
forcetheorem "FORSOMERBOOL3" "FORSOMERBOOL3 , (forsomer @ [?R @ ?1] , [?P @ ?1]) , (forsomer @ [?R @ ?1] , [bool : ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , P1 , P2 , REFLEX , forsomer , 0";
forcetheorem "3pt75" "3pt75 , (false -> ?p) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "8pt13U" "8pt13U , (forallr @ [false] , [?P @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "8pt13E" "8pt13E , (forsomer @ [false] , [?P @ ?1]) , false , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "DDISC" "DDISC , (?p | ?q & ?r) , ((?p | ?q) & ?p | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IF" "IF , (?x -> ?y) , ((~ ?x) | ?y) , IF , 0";
forcetheorem "8pt15E" "8pt15E , ((forsomer @ [?R @ ?1] , [?P @ ?1]) | forsomer @ [?R @ ?1] , [?Q @ ?1]) , (forsomer @ [?R @ ?1] , [(?P @ ?1) | ?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "3pt78" "3pt78 , ((?p -> ?r) & ?q -> ?r) , ((?p | ?q) -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "FORALLDIST" "FORALLDIST , (forall @ [(?P @ ?1) & ?Q @ ?1]) , ((forall @ [?P @ ?1]) & forall @ [?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "8pt16E" "8pt16E , (forsomer @ [(?R @ ?1) | ?S @ ?1] , [?P @ ?1]) , ((forsomer @ [?R @ ?1] , [?P @ ?1]) | forsomer @ [?S @ ?1] , [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "PAIRBIND" "(PAIRBIND @ ?x , ?y) , ?t , ((BIND @ ?x , ?y) => EVAL => (LEFT @ VALUE @ [EVAL]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [EVAL]]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [RIGHT @ PI2F @ ?x]]) => (LEFT @ VALUE @ [LEFT @ VALUE @ [BIND @ ?y]]) => (LEFT @ VALUE @ [RIGHT @ PI1F @ ?y]) => (LEFT @ VALUE @ [BIND @ ?x]) => (BIND @ ?x , ?y) => ?t) , 0";
forcetheorem "PI1F" "(PI1F @ ?y) , ?x , (P1 @ ?x , ?y) , P1 , 0";
forcetheorem "PI2F" "(PI2F @ ?y) , ?x , (P2 @ ?y , ?x) , P2 , 0";
forcetheorem "FORALLSWITCH" "FORALLSWITCH , (forall @ [forall @ [?P @ ?1 , ?2]]) , (forall @ [forall @ [?P @ ?2 , ?1]]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , REFLEX , forall , 0";
forcetheorem "p2" "p2 , (p2 @ ?x , ?y) , ?y , p2 , 0";
forcetheorem "p1" "p1 , (p1 @ ?x , ?y) , ?x , p1 , 0";
forcetheorem "PI1" "PI1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "PI2" "PI2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "8pt19U" "8pt19U , (forallr @ [?R @ ?1] , [forallr @ [?Q @ ?2] , [?P @ ?1 , ?2]]) , (forallr @ [?Q @ ?1] , [forallr @ [?R @ ?2] , [?P @ ?2 , ?1]]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "8pt19E" "8pt19E , (forsomer @ [?R @ ?1] , [forsomer @ [?Q @ ?2] , [?P @ ?1 , ?2]]) , (forsomer @ [?Q @ ?1] , [forsomer @ [?R @ ?2] , [?P @ ?2 , ?1]]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "9pt3b" "9pt3b , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forall @ [((?R @ ?1) & ?P @ ?1) == ?R @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "9pt3c" "9pt3c , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forall @ [((?R @ ?1) | ?P @ ?1) == ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "3pt65" "3pt65 , (?p -> ?q -> ?r) , ((?p & ?q) -> ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "9pt4b" "9pt4b , (forallr @ [(?Q @ ?1) & ?R @ ?1] , [?P @ ?1]) , (forallr @ [?Q @ ?1] , [(~ ?R @ ?1) | ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "IDEF3" "IDEF3 , (?p -> ?q) , ((?p & ?q) == ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "9pt4c" "9pt4c , (forallr @ [(?Q @ ?1) & ?R @ ?1] , [?P @ ?1]) , (forallr @ [?Q @ ?1] , [((?R @ ?1) & ?P @ ?1) == ?R @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "9pt4a" "9pt4a , (forallr @ [(?Q @ ?1) & ?R @ ?1] , [?P @ ?1]) , (forallr @ [?Q @ ?1] , [(?R @ ?1) -> ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "IDEF" "IDEF , (?p -> ?q) , ((?p | ?q) == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "9pt4d" "9pt4d , (forallr @ [(?Q @ ?1) & ?R @ ?1] , [?P @ ?1]) , (forallr @ [?Q @ ?1] , [((?R @ ?1) | ?P @ ?1) == ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "9pt3a" "9pt3a , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forall @ [(~ ?R @ ?1) | ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "9pt6" "9pt6 , (forallr @ [?R @ ?1] , [?P]) , (?P | forall @ [~ ?R @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "3pt44a" "3pt44a , (?p & (~ ?p) | ?q) , (?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt62" "3pt62 , (?p -> ?q == ?r) , ((?p & ?q) == ?p & ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "BID" "BID , (?p == ?p) , true , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "forallr2" "forallr2 , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forall @ [(?R @ ?1) -> ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , forallr , 0";
forcetheorem "IRZER" "IRZER , (?p -> true) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "8pt16U" "8pt16U , (forallr @ [(?R @ ?1) | ?S @ ?1] , [?P @ ?1]) , ((forallr @ [?R @ ?1] , [?P @ ?1]) & forallr @ [?S @ ?1] , [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "8pt15U" "8pt15U , ((forallr @ [?R @ ?1] , [?P @ ?1]) & forallr @ [?R @ ?1] , [?Q @ ?1]) , (forallr @ [?R @ ?1] , [(?P @ ?1) & ?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "3pt76b" "3pt76b , ((?p & ?q) -> ?p) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "9pt11" "9pt11 , ((forallr @ [?R @ ?1] , [(?P @ ?1) & ?Q @ ?1]) -> forallr @ [?R @ ?1] , [?P @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "9pt18a" "9pt18a , (~ forsomer @ [?R @ ?1] , [~ ?P @ ?1]) , (forallr @ [?R @ ?1] , [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "9pt18b" "9pt18b , (~ forsomer @ [?R @ ?1] , [?P @ ?1]) , (forallr @ [?R @ ?1] , [~ ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , forall , forallr , forsomer , 0";
forcetheorem "FORALLRBOOL3" "FORALLRBOOL3 , (forallr @ [?R @ ?1] , [?P @ ?1]) , (forallr @ [?R @ ?1] , [bool : ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , TYPES , forallr , 0";
forcetheorem "9pt18c" "9pt18c , (forsomer @ [?R @ ?1] , [~ ?P @ ?1]) , (~ forallr @ [?R @ ?1] , [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , P1 , P2 , REFLEX , TYPES , forallr , forsomer , 0";
forcetheorem "9pt20" "9pt20 , (forsomer @ [(?Q @ ?1) & ?R @ ?1] , [?P @ ?1]) , (forsomer @ [?Q @ ?1] , [(?R @ ?1) & ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , forsomer , 0";
forcetheorem "9pt5" "9pt5 , (?P | forallr @ [?R @ ?1] , [?Q @ ?1]) , (forallr @ [?R @ ?1] , [?P | ?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "9pt21" "9pt21 , (forsomer @ [?R @ ?1] , [?P & ?Q @ ?1]) , (?P & forsomer @ [?R @ ?1] , [?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "FORSOMEDIST2" "FORSOMEDIST2 , (forsome @ [(?P @ ?1) & ?Q]) , ((forsome @ [?P @ ?1]) & ?Q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "9pt22" "9pt22 , (forsomer @ [?R @ ?1] , [?P]) , (?P & forsome @ [?R @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsome , forsomer , 0";
forcetheorem "3pt11" "3pt11 , ((~ ?p) == ?q) , (?p == ~ ?q) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IFF , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "FORALLRBOOL" "FORALLRBOOL , (forallr @ ?x) , (bool : forallr @ ?x) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , forall , forallr , 0";
forcetheorem "9pt7" "9pt7 , ((~ forall @ [~ ?R @ ?1]) -> (forallr @ [?R @ ?1] , [?P & ?Q @ ?1]) == ?P & forallr @ [?R @ ?1] , [?Q @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "9pt23" "9pt23 , ((forsome @ [?R @ ?1]) -> (forsomer @ [?R @ ?1] , [?P | ?Q @ ?1]) == ?P | forsomer @ [?R @ ?1] , [?Q @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsome , forsomer , 0";
forcetheorem "NEGF" "NEGF , (~ false) , true , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "9pt8" "9pt8 , (forallr @ [?R @ ?1] , [true]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "FDEF" "FDEF , false , (~ true) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , 0";
forcetheorem "9pt24" "9pt24 , (forsomer @ [?R @ ?1] , [false]) , false , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "forsomer2" "forsomer2 , (forsomer @ [?R @ ?1] , [?P @ ?1]) , (~ forallr @ [?R @ ?1] , [~ ?P @ ?1]) , EQBOOL , FNDIST , NONTRIV , NOT1 , P1 , P2 , REFLEX , forsomer , 0";
forcetheorem "9pt10" "9pt10 , ((forallr @ [(?Q @ ?1) | ?R @ ?1] , [?P @ ?1]) -> forallr @ [?Q @ ?1] , [?P @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , 0";
forcetheorem "RL" "(RL @ ?thm) , (?p ^+ ?q) , ((?thm => ?p) ^+ ?thm => ?q) , 0";
forcetheorem "forsomer3" "forsomer3 , (forsomer @ [?R @ ?1] , [?P @ ?1]) , (forsome @ [(?R @ ?1) & ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forallr , forsome , forsomer , 0";
forcetheorem "R" "(R @ ?thm) , ?x , (((RIGHT1 @ ?thm) =>> RIGHT2 @ ?thm) => ?x) , 0";
forcetheorem "L" "(L @ ?thm) , ?x , (((LEFT1 @ ?thm) =>> LEFT2 @ ?thm) => ?x) , 0";
forcetheorem "9pt25" "9pt25 , ((forsomer @ [?R @ ?1] , [?P @ ?1]) -> forsomer @ [(?Q @ ?1) | ?R @ ?1] , [?P @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "9pt26" "9pt26 , ((forsomer @ [?R @ ?1] , [?P @ ?1]) -> forsomer @ [?R @ ?1] , [(?P @ ?1) | ?Q @ ?1]) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , P1 , P2 , REFLEX , TYPES , forall , forallr , forsomer , 0";
forcetheorem "UNIV_TAC" "UNIV_TAC , ((forall @ ?t) || ?x , ?y) , ((LEFT @ $ forall) => (LEFT_CASE @ EVERYWHERE2 @ EVAL) => PIVOT => (LEFT_CASE @ EVERYWHERE2 @ UNEVAL @ ?t) => (LEFT @ forall) => (forall @ ?t) || ?x , ?y) , 0";
forcetheorem "UNIV_EQ" "UNIV_EQ , (forall @ [(?P @ ?1) = ?Q @ ?1]) , ([?P @ ?1] = [?Q @ ?1]) , CASEINTRO , EQBOOL , EQUATION , HYP , REFLEX , forall , 0";
forcetheorem "UNIV_EQ_TAC" "UNIV_EQ_TAC , ((forall @ [(?P @ ?1) = ?Q @ ?1]) || ?t , ?u) , ((LEFT @ $ UNIV_EQ) => ([?P @ ?1] = [?Q @ ?1]) || ((EVERYWHERE @ EVAL) => (EVERYWHERE @ 0 |-| 1) => (EVERYWHERE @ UNEVAL @ [?P @ ?1]) => ?t) , ?u) , CASEINTRO , EQBOOL , EQUATION , HYP , REFLEX , forall , 0";
forcetheorem "STRONG_REWRITE_WITH_EQUATION" "(STRONG_REWRITE_WITH_EQUATION @ ?thm) , ?x , (((REFLEX ** $ ?thm) => ?a = ?a) => ?x) , 0";
forcetheorem "REWRITE_TAC" "(REWRITE_TAC @ ?thm) , ?x , (REWRITE_ENGINE => ((!$ IGNOREFIRST) @ ?thm =>> $ ?thm) => (?thm <= true) . ?x) , IGNOREFIRST , 0";
forcetheorem "SUB_REWRITE_TAC" "(SUB_REWRITE_TAC @ ?thm) , ?x , (REWRITE_ENGINE => ((!$ IGNOREFIRST) @ ?thm) => (?thm => true) . ?x) , IGNOREFIRST , 0";
forcetheorem "REWRITE_ENGINE" "REWRITE_ENGINE , (?thm . ?x . ?y) , ((REWRITE_WITH_EQUATION =>> REWRITE_WITH_CONJUNCTION =>> REWRITE_WITH_UNIVERSAL_EQUATION =>> REWRITE_WITH_UNIVERSAL_CONJUNCTION) => ?thm . ?x . ?y) , 0";
forcetheorem "REWRITE_WITH_EQUATION" "REWRITE_WITH_EQUATION , (?thm . (?x = ?y) . ?z) , ((LEFT @ ?thm) => ((REFLEX ** ?thm) => 0 = 0) || ((EVERYWHERE2 @ 0 |-| 1) => ?z) , ?z) , CASEINTRO , IGNOREFIRST , 0";
forcetheorem "REWRITE_WITH_CONJUNCTION" "REWRITE_WITH_CONJUNCTION , (?thm . (?x & ?y) . ?z) , ((SUB_REWRITE_TAC @ RCT @ ?thm) => (SUB_REWRITE_TAC @ LCT @ ?thm) => (IGNOREFIRST ** IGNOREFIRST) => ?thm . (?x & ?y) . ?z) , 0";
forcetheorem "REWRITE_WITH_UNIVERSAL_EQUATION" "REWRITE_WITH_UNIVERSAL_EQUATION , (?thm . (forall @ [(?P @ ?1) = ?Q @ ?1]) . ?z) , ((EVERYWHERE2 @ EVAL) => (SUB_REWRITE_TAC @ UET @ ?thm) => (EVERYWHERE2 @ UNEVAL @ [?P @ ?1]) => ?z) , EQBOOL , IGNOREFIRST , 0";
forcetheorem "REWRITE_WITH_UNIVERSAL_CONJUNCTION" "REWRITE_WITH_UNIVERSAL_CONJUNCTION , (?thm . (forall @ [(?P @ ?1) & ?Q @ ?1]) . ?z) , ((SUB_REWRITE_TAC @ UCT @ ?thm) => ?z) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "LCT0" "LCT0 , ((?x & ?y) || ?x , ?x) , ((?x & ?y) || true , ?x) , AND , CASEINTRO , EQUATION , ODDCHOICE , 0";
forcetheorem "LCT2" "(LCT2 @ ?thm) , ?x , ((LEFT @ ?thm) => LCT0 => ((REFLEX ** ?thm) => 0 = 0) || ?x , ?x) , CASEINTRO , 0";
forcetheorem "ELIM_ASSERT" "(ELIM_ASSERT @ ?thm) , (|- ?x) , ((LEFT @ (RIGHT @ ?thm) ** (LEFT @ (RIGHT @ ?thm) ** AT) ** REFLEX) => ((|- ?x) = ?x) || ?x , |- ?x) , CASEINTRO , HYP , 0";
forcetheorem "LCT1" "(LCT1 @ ?thm) , true , ((ELIM_ASSERT @ LCT2 @ ?thm) => CID => (RIGHT @ RCT2 @ ?thm) => ?thm => true) , 0";
forcetheorem "LCT" "(LCT @ ?thm) , ?x , (((LCT1 @ ?thm) =>> LCT2 @ ?thm) => ?x) , 0";
forcetheorem "RCT2" "(RCT2 @ ?thm) , ?y , ((LEFT @ ?thm) => (LEFT @ CSYM) => LCT0 => (LEFT @ CSYM) => ((REFLEX ** ?thm) => 0 = 0) || ?y , ?y) , CASEINTRO , 0";
forcetheorem "RCT1" "(RCT1 @ ?thm) , true , ((ELIM_ASSERT @ RCT2 @ ?thm) => (CSYM ** CID) => (LEFT @ LCT2 @ ?thm) => ?thm => true) , 0";
forcetheorem "RCT" "(RCT @ ?thm) , ?x , (((RCT1 @ ?thm) =>> RCT2 @ ?thm) => ?x) , 0";
forcetheorem "UET1" "(UET1 @ ?thm) , true , (UNIV_EQ => ?thm => true) , 0";
forcetheorem "UET2" "(UET2 @ ?thm) , ?x , (?thm => UNIV_EQ <= ?x) , 0";
forcetheorem "UET" "(UET @ ?thm) , ?x , (((UET1 @ ?thm) =>> UET2 @ ?thm) => ?x) , 0";
forcetheorem "UCT1" "(UCT1 @ ?thm) , true , (FORALLDIST => ?thm => true) , 0";
forcetheorem "UCT2" "(UCT2 @ ?thm) , ?x , (?thm => FORALLDIST <= ?x) , 0";
forcetheorem "UCT" "(UCT @ ?thm) , ?x , (((UCT1 @ ?thm) =>> UCT2 @ ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE2" "(EVERYWHERE2 @ ?thm) , ?x , (((STRONG_EVERYWHERE_CASE @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_INFIX @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_PREFIX @ EVERYWHERE2 , ?thm) =>> (EVERYWHERE_ABS @ EVERYWHERE2 , ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "STRONG_EVERYWHERE_CASE" "(STRONG_EVERYWHERE_CASE @ ?EVERYWHERE , ?thm) , (?a || ?x , ?y) , (?thm => ((?EVERYWHERE @ ?thm) => ?a) || ((?EVERYWHERE @ ?thm) => ?x) , (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_ABS" "(EVERYWHERE_ABS @ ?EVERYWHERE , ?thm) , [?f @ ?1] , (?thm => [(?EVERYWHERE @ ?thm) => ?f @ ?1]) , 0";
forcetheorem "TYPES" "TYPES , (?t : ?t : ?x) , (?t : ?x) , TYPES , 0";
forcetheorem "PCASEINTRO" "(PCASEINTRO @ ?p) , ?x , (?p || ?x , ?x) , CASEINTRO , 0";
forcetheorem "PIVOT" "PIVOT , ((?a = ?b) || ?T , ?U) , ((LEFT_CASE @ EVAL) => HYP => (?a = ?b) || ((BIND @ ?a) => ?T) , ?U) , 0";
forcetheorem "HYP" "HYP , ((?a = ?b) || (?f @ ?a) , ?c) , ((?a = ?b) || (?f @ ?b) , ?c) , HYP , 0";
forcetheorem "TRUEBOOL" "TRUEBOOL , true , (bool : true) , EQBOOL , REFLEX , 0";
forcetheorem "REFLEX" "REFLEX , (?a = ?a) , true , REFLEX , 0";
forcetheorem "UNIV_SWITCH" "UNIV_SWITCH , (forall @ [forall @ [(?P @! ?1) @ ?2]]) , (forall @ [forall @ [bool : (?P @! ?2) @ ?1]]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , HYP , NONTRIV , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "GETL" "(GETL @ ?z) , (?x & ?y) , ((GET @ ?z , CSYM , CASSOC) => ?x & ?y) , 0";
forcetheorem "LABELINTRO" "(LABELINTRO @ ?x) , ?y , (?x . ?y) , IGNOREFIRST , 0";
forcetheorem "NEGL" "NEGL , (((~ ?P) & ?gamma) -> ?delta) , ((((~ ?P) & ?gamma) -> ?delta) . ?gamma -> ?P | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NEGR" "NEGR , (?gamma -> (~ ?P) | ?delta) , ((?gamma -> (~ ?P) | ?delta) . (?P & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ANDL" "ANDL , (((?P & ?Q) & ?gamma) -> ?delta) , ((((?P & ?Q) & ?gamma) -> ?delta) . (?P & ?Q & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ANDR" "ANDR , (?gamma -> (?P & ?Q) | ?delta) , ((?gamma -> (?P & ?Q) | ?delta) . (?gamma -> ?P | ?delta) & ?gamma -> ?Q | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ORL" "ORL , (((?P | ?Q) & ?gamma) -> ?delta) , ((((?P | ?Q) & ?gamma) -> ?delta) . ((?P & ?gamma) -> ?delta) & (?Q & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ORR" "ORR , (?gamma -> (?P | ?Q) | ?delta) , ((?gamma -> (?P | ?Q) | ?delta) . ?gamma -> ?P | ?Q | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IFL" "IFL , (((?P -> ?Q) & ?gamma) -> ?delta) , ((((?P -> ?Q) & ?gamma) -> ?delta) . (?gamma -> ?P | ?delta) & (?Q & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "EXL" "(EXL @ ?P) , (?gamma -> ?delta) , ((?gamma -> ?delta) . ((GETL @ ?P) => ?gamma) -> ?delta) , IGNOREFIRST , 0";
forcetheorem "WEAKL" "WEAKL , ((?P & ?gamma) -> ?delta) , (((?P & ?gamma) -> ?delta) . (?P & ?P & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "WEAKR" "WEAKR , (?gamma -> ?Q | ?delta) , ((?gamma -> ?Q | ?delta) . ?gamma -> ?Q | ?Q | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IFFL" "IFFL , (((?P == ?Q) & ?gamma) -> ?delta) , ((((?P == ?Q) & ?gamma) -> ?delta) . ((?P & ?Q & ?gamma) -> ?delta) & ?gamma -> ?P | ?Q | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IFFR" "IFFR , (?gamma -> (?P == ?Q) | ?delta) , ((?gamma -> (?P == ?Q) | ?delta) . ((?P & ?gamma) -> ?Q | ?delta) & (?Q & ?gamma) -> ?P | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CUT" "(CUT @ ?P) , (?gamma -> ?delta) , ((?gamma -> ?delta) . ((?P & ?gamma) -> ?delta) & ?gamma -> ?P | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "INSTANTIATE" "INSTANTIATE , ((?P @ ?x) & forall @ [?P @ ?1]) , (forall @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , NONTRIV , forall , 0";
forcetheorem "CASSOC" "CASSOC , ((?p & ?q) & ?r) , (?p & ?q & ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "UNIVL" "(UNIVL @ ?t) , (((forall @ [?P @ ?1]) & ?gamma) -> ?delta) , ((((forall @ [?P @ ?1]) & ?gamma) -> ?delta) . ((EVAL => ?P @ ?t) & (forall @ [?P @ ?1]) & ?gamma) -> ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , NONTRIV , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "FORSOMEANDDIST" "FORSOMEANDDIST , (?Q & forsome @ [?P @ ?1]) , (forsome @ [?Q & ?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "CSYM" "CSYM , (?p & ?q) , (?q & ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "forsome2" "forsome2 , (forsome @ [?P @ ?1]) , (~ forall @ [~ ?P @ ?1]) , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , forsome , 0";
forcetheorem "DUBNEG" "DUBNEG , (~ ~ ?p) , (bool : ?p) , BOOLDEF , CASEINTRO , EQUATION , NOT1 , 0";
forcetheorem "FORALLBOOL" "FORALLBOOL , (forall @ ?P) , (bool : forall @ ?P) , EQBOOL , forall , 0";
forcetheorem "FORALLORDIST" "FORALLORDIST , (forall @ [?P | ?Q @ ?1]) , (?P | forall @ [?Q @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , 0";
forcetheorem "IDEF2" "IDEF2 , (?p -> ?q) , ((~ ?p) | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "EXISTL" "EXISTL , (((forsome @ [?P @ ?1]) & ?gamma) -> ?delta) , ((((forsome @ [?P @ ?1]) & ?gamma) -> ?delta) . forall @ [((?P @ ?1) & ?gamma) -> ?delta]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "DINSTANTIATEF1" "(DINSTANTIATEF1 @ ?x) , (forsome @ ?P) , ((?P @ ?x) | forsome @ [?P @ ?1]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , forall , forsome , 0";
forcetheorem "ASSERTSCOUT" "ASSERTSCOUT , (|- ?x) , (bool : |- ?x) , ASSERT , TYPES , 0";
forcetheorem "INSCOUT" "INSCOUT , (?x << ?y) , (bool : ?x << ?y) , ASSERT , IN , TYPES , 0";
forcetheorem "INL" "INL , (((?x << [?P @ ?1]) & ?gamma) -> ?delta) , ((((?x << [?P @ ?1]) & ?gamma) -> ?delta) . ((EVAL => ?P @ ?x) & ?gamma) -> ?delta) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , IN , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "SELFLABEL" "SELFLABEL , ?x , (?x . ?x) , IGNOREFIRST , 0";
forcetheorem "IN" "IN , (?x << ?y) , (|- ?y @ ?x) , IN , 0";
forcetheorem "DRULE2" "DRULE2 , ((|- ?p) | ?q) , (?p | ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "INR" "INR , (?gamma -> (?x << [?P @ ?1]) | ?delta) , ((?gamma -> (?x << [?P @ ?1]) | ?delta) . ?gamma -> (EVAL => ?P @ ?x) | ?delta) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , IN , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "SETUP_SEQUENT" "SETUP_SEQUENT , (|- ?P) , (true -> ?P | false) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "UNIVR" "UNIVR , (?gamma -> (forall @ [?P @ ?1]) | ?delta) , ((?gamma -> (forall @ [?P @ ?1]) | ?delta) . forall @ [?gamma -> (?P @ ?1) | ?delta]) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , 0";
forcetheorem "EXISTR" "(EXISTR @ ?t) , (?gamma -> (forsome @ [?P @ ?1]) | ?delta) , ((?gamma -> (forsome @ [?P @ ?1]) | ?delta) . ?gamma -> (EVAL => ?P @ ?t) | (forsome @ [?P @ ?1]) | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "IFR" "IFR , (?gamma -> (?P -> ?Q) | ?delta) , ((?gamma -> (?P -> ?Q) | ?delta) . (?P & ?gamma) -> ?Q | ?delta) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "EXR" "(EXR @ ?P) , (?gamma -> ?delta) , ((?gamma -> ?delta) . ?gamma -> (GETR @ ?P) => ?delta) , IGNOREFIRST , 0";
forcetheorem "GETR" "(GETR @ ?z) , (?x | ?y) , ((GET @ ?z , DSYM , DASSOC) => ?x | ?y) , 0";
forcetheorem "GET" "(GET @ ?y , ?comm , ?assoc) , ?x , (((GET1 @ ?y , ?comm) =>> GET2 @ ?y , ?comm , ?assoc) => ((GET0 @ ?y) =>> RIGHT @ GET @ ?y , ?comm , ?assoc) => (ASSOCS @ ?assoc) => ?x) , 0";
forcetheorem "ASSOCS" "(ASSOCS @ ?thm) , ?x , ((?thm *> ASSOCS @ ?thm) => ?x) , 0";
forcetheorem "GET0" "(GET0 @ ?x) , (?x ^+ ?y) , (?x ^+ ?y) , 0";
forcetheorem "GET1" "(GET1 @ ?x , ?comm) , (?y ^+ ?x) , (?comm => ?y ^+ ?x) , 0";
forcetheorem "GET2" "(GET2 @ ?x , ?comm , ?assoc) , (?y ^+ ?x ^+ ?z) , (?assoc => (LEFT @ ?comm) => ?assoc <= ?y ^+ ?x ^+ ?z) , 0";
forcetheorem "DASSOC" "DASSOC , ((?p | ?q) | ?r) , (?p | ?q | ?r) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "AXIOM" "AXIOM , ((?P & ?gamma) -> ?P | ?delta) , (((?P & ?gamma) -> ?P | ?delta) . true) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "FS_SEQUENT" "FS_SEQUENT , (?x . ?y) , (((FS1 @ FS_SEQUENT) =>> (FS2 @ FS_SEQUENT) =>> (FS5 @ FS_SEQUENT) =>> (FS3 @ FS_SEQUENT) =>> (FS4 @ FS_SEQUENT) =>> FS6 @ FS_SEQUENT) => ?x . ?y) , 0";
forcetheorem "FS1" "(FS1 @ ?finish) , (?x . ?y . ?z) , (?x . FS0 => ?finish => ?y . ?z) , 0";
forcetheorem "FS2" "(FS2 @ ?finish) , (?x . forall @ [?z @ ?1]) , (?x . FS0b => forall @ [FS0 => ?finish => ?z @ ?1]) , 0";
forcetheorem "FS5" "(FS5 @ ?finish) , (?x . (forall @ [?y @ ?1]) & forall @ [?z @ ?1]) , (?x . (CID ** AT) => (FS0b => forall @ [(?finish ** FS0) => ?y @ ?1]) & FS0b => forall @ [(?finish ** FS0) => ?z @ ?1]) , 0";
forcetheorem "FS3" "(FS3 @ ?finish) , (?x . (forall @ [?y @ ?1]) & ?z) , (?x . (CID ** AT) => (FS0b => forall @ [(?finish ** FS0) => ?y @ ?1]) & (?finish ** FS0) => ?z) , 0";
forcetheorem "FS4" "(FS4 @ ?finish) , (?x . ?y & forall @ [?z @ ?1]) , (?x . (CID ** AT) => ((?finish ** FS0) => ?y) & FS0b => forall @ [(?finish ** FS0) => ?z @ ?1]) , 0";
forcetheorem "FS6" "(FS6 @ ?finish) , (?x . ?y & ?z) , (?x . (CID ** AT) => ((?finish ** FS0) => ?y) & (?finish ** FS0) => ?z) , 0";
forcetheorem "FS0b" "FS0b , (forall @ [true]) , true , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , forall , 0";
forcetheorem "FS0" "FS0 , (?x . true) , true , IGNOREFIRST , 0";
forcetheorem "breakout" "breakout , (breakout @ ?x) , ?x , breakout , 0";
forcetheorem "BREAKOUT" "BREAKOUT , ?x , (breakout @ ?x) , breakout , 0";
forcetheorem "}breakout" "breakout , ?x , (breakout @ ?x) , breakout , 0";
forcetheorem "done" "done , (done @ ?x) , ?x , done , 0";
forcetheorem "halfdone" "halfdone , (halfdone @ ?x) , ?x , halfdone , 0";
forcetheorem "IRULE3" "IRULE3 , (?p -> |- ?q) , (?p -> ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "3pt74" "3pt74 , (?p -> false) , (~ ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NOTGOAL" "NOTGOAL , (|- ~ ?p) , ((ANNOUNCE @ done @ ~ ?p) => IFGOAL => |- ?p -> false) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "3pt80" "3pt80 , ((?p -> ?q) & ?q -> ?p) , (?p == ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "SWAP_DISJUNCTS" "SWAP_DISJUNCTS , (|- ?x | ?y) , (|- ?y | ?x) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "TWOASSERTS" "TWOASSERTS , (|- |- ?p) , (|- ?p) , ASSERT , TYPES , 0";
forcetheorem "DOUBLE_NEGATION" "DOUBLE_NEGATION , (|- ~ ~ ?p) , (|- ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "DEMa" "DEMa , ((~ ?p) | ~ ?q) , (~ ?p & ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NOTAND" "NOTAND , (|- ~ ?x & ?y) , (|- (~ ?x) | ~ ?y) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DEMb" "DEMb , ((~ ?p) & ~ ?q) , (~ ?p | ?q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NOTOR" "NOTOR , (|- ~ ?x | ?y) , (|- (~ ?x) & ~ ?y) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "NOTIF" "NOTIF , (|- ~ ?x -> ?y) , (|- ?x & ~ ?y) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONTP" "CONTP , (?p -> ?q) , ((~ ?q) -> ~ ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CONTRAPOSITIVE" "CONTRAPOSITIVE , (|- ?x -> ?y) , (|- (IRULE2 ** IRULE3) => (RL @ DUBNEG2) => (~ ?y) -> ~ ?x) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "PROVETAUT2" "(PROVETAUT2 @ ?y) , ?x , ((BRULE1 =>> CRULE1 =>> DRULE1 =>> NRULE1 =>> XRULE1 =>> IRULE1 =>> CNRULE1) => ASSERT2 => (PROVETAUT @ ?y) => ASSERT => (BRULE1 <<= CRULE1 <<= DRULE1 <<= NRULE1 <<= XRULE1 <<= IRULE1 <<= CNRULE1) <= ?x) , 0";
forcetheorem "NRULE1" "NRULE1 , (|- ~ ?p) , (~ ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , TYPES , 0";
forcetheorem "XRULE1" "XRULE1 , (|- ?p =/= ?q) , (?p =/= ?q) , ASSERT , EQBOOL , FNDIST , IFF , NONTRIV , NOT1 , REFLEX , TYPES , XOR , 0";
forcetheorem "IRULE1" "IRULE1 , (|- ?p -> ?q) , (?p -> ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "CNRULE1" "CNRULE1 , (|- ?p <- ?q) , (?p <- ?q) , ASSERT , BOOLDEF , CASEINTRO , CONVIF , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "ASSERT" "ASSERT , (|- ?x) , (bool : ?x) , ASSERT , 0";
forcetheorem "PROVETAUT" "(PROVETAUT @ ?y) , (bool : ?x) , ((NEWTAUT => IFF <= (bool : ?x) = bool : ?y) || (bool : ?y) , bool : ?x) , CASEINTRO , 0";
forcetheorem "IFF" "IFF , (?x == ?y) , ((bool : ?x) = bool : ?y) , IFF , 0";
forcetheorem "NEWTAUT" "NEWTAUT , ?x , (ALT_PUSH => (TOPDOWN @ ALL_EXP) => MAKE_CASE => ?x) , 0";
forcetheorem "MAKE_CASE" "MAKE_CASE , ?p , (ODDCHOICE <= EQUATION => BOOLDEF => (?p = bool : ?p) => ?p) , 0";
forcetheorem "IFFBOOL" "IFFBOOL , (?x == ?y) , (bool : ?x == ?y) , EQBOOL , IFF , 0";
forcetheorem "BOOLDEF" "BOOLDEF , (bool : ?x) , (true = ?x) , BOOLDEF , 0";
forcetheorem "EQUATION" "EQUATION , (?a = ?b) , ((?a = ?b) || true , false) , EQUATION , 0";
forcetheorem "ODDCHOICE" "ODDCHOICE , ?x , ?x , ODDCHOICE , 0";
forcetheorem "ASSERT_EXP" "ASSERT_EXP , ((|- ?p) || ?x , ?y) , (?p || ?x , ?y) , ASSERT , BOOLDEF , ODDCHOICE , 0";
forcetheorem "NOT_EXP" "NOT_EXP , ((~ ?p) || ?a , ?b) , (?p || ?b , ?a) , CASEINTRO , NOT1 , ODDCHOICE , 0";
forcetheorem "AND_EXP" "AND_EXP , ((?p & ?q) || ?a , ?b) , (?p || (?q || ?a , ?b) , ?b) , AND , CASEINTRO , ODDCHOICE , 0";
forcetheorem "IF_EXP" "IF_EXP , ((?p -> ?q) || ?a , ?b) , (?p || (?q || ?a , ?b) , ?a) , AND , CASEINTRO , IF , NOT1 , ODDCHOICE , OR , 0";
forcetheorem "IFF_EXP" "IFF_EXP , ((?p == ?q) || ?a , ?b) , (?p || (?q || ?a , ?b) , ?q || ?b , ?a) , BOOLDEF , CASEINTRO , EQUATION , IFF , ODDCHOICE , REFLEX , 0";
forcetheorem "XOR_EXP" "XOR_EXP , ((?p =/= ?q) || ?a , ?b) , (?p || (?q || ?b , ?a) , ?q || ?a , ?b) , BOOLDEF , CASEINTRO , EQUATION , IFF , NOT1 , ODDCHOICE , REFLEX , XOR , 0";
forcetheorem "CN_EXP" "CN_EXP , ((?p <- ?q) || ?a , ?b) , (?q || (?p || ?a , ?b) , ?a) , AND , CASEINTRO , CONVIF , IF , NOT1 , ODDCHOICE , OR , 0";
forcetheorem "BOTH_CASES" "(BOTH_CASES @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?thm => ?z) , 0";
forcetheorem "TOPDOWN" "(TOPDOWN @ ?thm) , ?x , (((TOPDOWN_CASE @ ?thm) =>> (TOPDOWN_INFIX @ ?thm) =>> (TOPDOWN_PREFIX @ ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "TOPDOWN_CASE" "(TOPDOWN_CASE @ ?thm) , (?a || ?x , ?y) , ((BOTH_CASES @ TOPDOWN @ ?thm) => ?thm => ?a || ?x , ?y) , 0";
forcetheorem "TOPDOWN_INFIX" "(TOPDOWN_INFIX @ ?thm) , (?x ^+ ?y) , ((RL @ TOPDOWN @ ?thm) => ?thm => ?x ^+ ?y) , 0";
forcetheorem "TOPDOWN_PREFIX" "(TOPDOWN_PREFIX @ ?thm) , (^-- ?x) , ((RIGHT @ TOPDOWN @ ?thm) => ?thm => ^-- ?x) , 0";
forcetheorem "ALL_EXP" "ALL_EXP , (?p || ?a , ?b) , (((ASSERT_EXP *> ALL_EXP) =>> (NOT_EXP *> ALL_EXP) =>> (AND_EXP *> ALL_EXP) =>> (OR_EXP *> ALL_EXP) =>> (IF_EXP *> ALL_EXP) =>> (IFF_EXP *> ALL_EXP) =>> (XOR_EXP *> ALL_EXP) =>> CN_EXP *> ALL_EXP) => ?p || ?a , ?b) , 0";
forcetheorem "EVERYWHERE" "(EVERYWHERE @ ?thm) , ?x , (((EVERYWHERE_CASE @ EVERYWHERE , ?thm) =>> (EVERYWHERE_INFIX @ EVERYWHERE , ?thm) =>> (EVERYWHERE_PREFIX @ EVERYWHERE , ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE_CASE" "(EVERYWHERE_CASE @ ?EVERYWHERE , ?thm) , (?a || ?x , ?y) , (?thm => ?a || ((?EVERYWHERE @ ?thm) => ?x) , (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_INFIX" "(EVERYWHERE_INFIX @ ?EVERYWHERE , ?thm) , (?x ^+ ?y) , (?thm => ((?EVERYWHERE @ ?thm) => ?x) ^+ (?EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_PREFIX" "(EVERYWHERE_PREFIX @ ?EVERYWHERE , ?thm) , (^-- ?x) , (?thm => ^-- (?EVERYWHERE @ ?thm) => ?x) , 0";
forcetheorem "ALT_PUSH" "ALT_PUSH , (?p || ?a , ?b) , (CASEINTRO <= ?p || (ALT_PUSH => (EVERYWHERE @ 1 |-| 1) => ?a) , ALT_PUSH => (EVERYWHERE @ 1 |-| 1) => ?b) , 0";
forcetheorem "BRULE1" "BRULE1 , (|- ?p == ?q) , (?p == ?q) , ASSERT , EQBOOL , IFF , TYPES , 0";
forcetheorem "CRULE2" "CRULE2 , ((|- ?p) & ?q) , (?p & ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "CRULE3" "CRULE3 , (?p & |- ?q) , (?p & ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "IFFHYP" "(IFFHYP @ ?n) , (|- ?x) , (CASEINTRO <= (LEFT_CASE @ $ CASEINTRO) => (LEFT_CASE @ LEFT_CASE @ INPUTS) => (LEFT_CASE @ LEFT_CASE @ (!$ IGNOREFIRST) @ true) => (LEFT_CASE @ ASRTCOND) => ASRTCOND => TAB_AND_2 => ASRTCOND <= (1 |-| ?n) => ASRTCOND => (LEFT @ $ 3pt80) => ASRTCOND <= ((2 |-| ?n) @ true) <= |- ?x) , 0";
forcetheorem "UNIV_GOAL" "UNIV_GOAL , (|- forall @ [?P @ ?1]) , (AT => |- (FORALLDROP ** AT) => forall @ [(ANNOUNCE @ done @ forall @ [?P @ ?1]) => INPUTS => true . |- ?P @ ?1]) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , IGNOREFIRST , REFLEX , TYPES , forall , 0";
forcetheorem "DINSTANTIATE" "DINSTANTIATE , ((?P @ ?x) | forsome @ [?P @ ?1]) , (forsome @ ?P) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , forall , forsome , 0";
forcetheorem "DSYM" "DSYM , (?p | ?q) , (?q | ?p) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "DRULE3" "DRULE3 , (?p | |- ?q) , (?p | ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "FORSOME_NOTFORALL" "FORSOME_NOTFORALL , (~ forall @ ?P) , (forsome @ [~ ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "FORALL_NOTFORSOME" "FORALL_NOTFORSOME , (~ forsome @ ?P) , (forall @ [~ ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "NOT_EXIST" "NOT_EXIST , (|- ~ forsome @ [?P @ ?1]) , (|- forall @ [~ ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "NOT_UNIV" "NOT_UNIV , (|- ~ forall @ [?P @ ?1]) , (|- forsome @ [~ ?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , REFLEX , forall , forsome , 0";
forcetheorem "GOAL_ABORTED" "GOAL_ABORTED , (?x . breakout @ ?y) , (((RIGHT @ breakout) ** IGNOREFIRST) => ?x . breakout @ ?y) , 0";
forcetheorem "NEGHYP" "(NEGHYP @ ?n) , (|- ?x) , (ASSERT_UNEXP => TAB_NOT_2 => ASRTCOND <= CASEINTRO <= (|- ~ ?x) || (CASEINTRO <= ((1 |-| ?n) =>> LEFT @ ((!$ IGNOREFIRST) @ true) ** INPUTS) => ASRTCOND => TAB_NOT_2 => ASRTCOND <= ((2 |-| ?n) @ true) <= false) , true) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "ORGOAL" "ORGOAL , (|- ?x | ?y) , ((ANNOUNCE @ done @ ?x | ?y) => IFGOAL => |- ((LEFT @ DUBNEG2) ** IRULE2) => (~ ?x) -> ?y) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "IRULE2" "IRULE2 , ((|- ?p) -> ?q) , (?p -> ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "ORHYP" "(ORHYP @ ?n) , (|- ?x) , (CASEINTRO <= (LEFT_CASE @ $ CASEINTRO) => (LEFT_CASE @ LEFT_CASE @ INPUTS) => (LEFT_CASE @ LEFT_CASE @ (!$ IGNOREFIRST) @ true) => (LEFT_CASE @ ASRTCOND) => ASRTCOND => ASRTCOND <= (LEFT @ DUBNEG2) => TAB_NOT_2 <= ASRTCOND <= (LEFT_CASE @ INPUTS) => (LEFT_CASE @ (!$ IGNOREFIRST) @ true) => ASRTCOND => (OR_EXP =>> 1 |-| ?n) => (LEFT @ DRULE1) => ((2 |-| ?n) @ true) <= |- ?x) , 0";
forcetheorem "DRULE1" "DRULE1 , (|- ?p | ?q) , (?p | ?q) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , OR , REFLEX , TYPES , 0";
forcetheorem "OR_EXP" "OR_EXP , ((?p | ?q) || ?a , ?b) , (?p || ?a , ?q || ?a , ?b) , AND , CASEINTRO , NOT1 , ODDCHOICE , OR , 0";
forcetheorem "UNIV_HYP" "(UNIV_HYP @ ?n) , (|- ?x) , (AT => |- (1 |-| ?n) => ASRTCOND => (LEFT @ $ forall2) => CASEINTRO <= (LEFT_CASE @ EVAL) => ASRTCOND <= (1 |-| ?n) => ASRTCOND => TWIDDLE => (LEFT @ forall) => ASRTCOND <= TWIDDLE2 => ((2 |-| ?n) @ true) <= ?x) , 0";
forcetheorem "TWIDDLE2" "TWIDDLE2 , ((|- forall @ [?P @ ?1]) || ?x , true) , ((|- forall @ [?P @ ?1]) || ((UNEVAL @ [?P @ ?1]) => ?x) , true) , 0";
forcetheorem "forall" "forall , (forall @ ?P) , ([?P @ ?1] = [true]) , forall , 0";
forcetheorem "TWIDDLE" "TWIDDLE , (?x || ?y , ?z) , (?x || ((LEFT @ 0 |-| 1) => ?y) , ?z) , 0";
forcetheorem "TAB_NOT_2" "TAB_NOT_2 , ((~ ?p) || ?a , ?b) , (?p || ?b , ?a) , CASEINTRO , NOT1 , ODDCHOICE , 0";
forcetheorem "DUBNEG2" "DUBNEG2 , (~ ~ ?p) , (|- ?p) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "EXIST_HYP" "(EXIST_HYP @ ?n) , (|- ?x) , ((FORALLDROP ** AT) => (RIGHT @ VALUE @ [ASSERT2 ** IFGOAL]) => FORALLBOOL2 <= (FORALL_IMP_FORSOME_EQ =>> TAB_IF ** (LEFT_CASE @ ASSERT_UNEXP) ** ASRTCOND ** 1 |-| ?n) <= TAB_IF <= (LEFT_CASE @ $ ASSERT_UNEXP) => ASRTCOND <= ((2 |-| ?n) @ true) <= |- ?x) , 0";
forcetheorem "ASSERT_UNEXP" "ASSERT_UNEXP , (?p || true , false) , (|- ?p) , ASSERT , BOOLDEF , EQUATION , 0";
forcetheorem "TAB_IF" "TAB_IF , (?p -> ?q) , (?p || (?q || true , false) , true) , AND , CASEINTRO , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , 0";
forcetheorem "FORALL_IMP_FORSOME_EQ" "FORALL_IMP_FORSOME_EQ , (forall @ [(?P @ ?1) -> ?Q]) , ((forsome @ [?P @ ?1]) -> ?Q) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "FORALLBOOL2" "FORALLBOOL2 , (forall @ [bool : ?P @ ?1]) , (forall @ [?P @ ?1]) , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , REFLEX , forall , 0";
forcetheorem "VALUE" "(VALUE @ ?thm) , [?P @ ?1] , [(?thm @ ?1) => ?P @ ?1] , 0";
forcetheorem "ASSERT2" "ASSERT2 , (bool : ?x) , (|- ?x) , ASSERT , 0";
forcetheorem "EXIST_GOAL" "(EXIST_GOAL @ ?x) , (|- forsome @ [?P @ ?1]) , (AT => |- DZER => (forsome @ [?P @ ?1]) | (ANNOUNCE @ done @ forsome @ [?P @ ?1]) => INPUTS => ((!$ IGNOREFIRST) @ true) => (RIGHT @ EVAL) => |- ?P @ ?x) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , forall , forsome , 0";
forcetheorem "RIGHT2" "(RIGHT2 @ ?thm) , (^- ?x) , (^- ?thm => ?x) , 0";
forcetheorem "FORALLDROP" "FORALLDROP , (forall @ [?x]) , (|- ?x) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , REFLEX , forall , 0";
forcetheorem "}backup" "backup , (|- ((forall @ [?P @ ?1]) -> forall @ [forsome @ [?Q @ ?1 , ?2]]) -> (forall @ [forall @ [forall @ [((?Q @ ?1 , ?2) & ?Q @ ?2 , ?3) -> ?S @ ?1 , ?3]]]) -> (forall @ [(?P @ ?1) | ~ ?R @ ?1]) -> (forall @ [forall @ [((?R @ ?1) & ~ ?R @ ?2) -> ?S @ ?1 , ?2]]) -> ((~ forsome @ [?R @ ?1]) -> forsome @ [?S @ ?1 , ?1]) -> forsome @ [forsome @ [?S @ ?1 , ?2]]) , true , EQBOOL , FNDIST , NONTRIV , NOT1 , REFLEX , BOOLDEF , CASEINTRO , EQUATION , OR , AND , TYPES , IF , forall , forsome , ASSERT , ODDCHOICE , IGNOREFIRST , 0";
forcetheorem "IFFGOAL" "IFFGOAL , (|- ?x == ?y) , ((ANNOUNCE @ done @ ?x == ?y) => ANDGOAL => |- (?x -> ?y) & ?y -> ?x) , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IFF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ANDHYP" "(ANDHYP @ ?n) , (|- ?x) , (CASEINTRO <= (LEFT_CASE @ $ CASEINTRO) => (LEFT_CASE @ LEFT_CASE @ INPUTS) => (LEFT_CASE @ LEFT_CASE @ (!$ IGNOREFIRST) @ true) => (LEFT_CASE @ ASRTCOND) => ASRTCOND => (TAB_AND_2 =>> 1 |-| ?n) => (LEFT @ CRULE1) => ((2 |-| ?n) @ true) <= |- ?x) , 0";
forcetheorem "LEFT" "(LEFT @ ?thm) , ?x , (((LEFT1 @ ?thm) =>> LEFT2 @ ?thm) => ?x) , 0";
forcetheorem "LEFT1" "(LEFT1 @ ?thm) , (?p ^+ ?q) , ((?thm => ?p) ^+ ?q) , 0";
forcetheorem "LEFT2" "(LEFT2 @ ?thm) , (?x || ?y , ?z) , ((?thm => ?x) || ?y , ?z) , 0";
forcetheorem "CRULE1" "CRULE1 , (|- ?p & ?q) , (?p & ?q) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "TAB_AND_2" "TAB_AND_2 , ((?p & ?q) || ?a , ?b) , (?p || (?q || ?a , ?b) , ?b) , AND , CASEINTRO , EQUATION , ODDCHOICE , 0";
forcetheorem "ASRTCOND" "ASRTCOND , (?a || ?b , ?c) , ((|- ?a) || ?b , ?c) , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "LEFT_CASE" "(LEFT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?z) , 0";
forcetheorem "$" "($ ?thm) , ?x , (?thm <= ?x) , 0";
forcetheorem "IFGOAL" "IFGOAL , (|- ?x -> ?y) , (AT => |- CASEINTRO <= (|- ?x) || ((ANNOUNCE @ done @ ?x -> ?y) => INPUTS => true . |- ?y) , true) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , IGNOREFIRST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "MODUS_PONENS" "(MODUS_PONENS @ ?y) , (|- ?x) , (((RIGHT @ CID ** AT) ** DZER) => ?x | ((ANNOUNCE @ done @ ?y) => INPUTS => ((!$ IGNOREFIRST) @ true) => |- ?y) & (ANNOUNCE @ done @ ?y -> ?x) => INPUTS => ((!$ IGNOREFIRST) @ true) => |- ?y -> ?x) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IF , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "ANDGOAL" "ANDGOAL , (|- ?x & ?y) , (AT => |- (CID ** AT) => ((ANNOUNCE @ halfdone @ ?x & ?y) => INPUTS => true . |- ?x) & (ANNOUNCE @ done @ ?x & ?y) => INPUTS => true . |- ?y) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , IGNOREFIRST , NONTRIV , REFLEX , TYPES , 0";
forcetheorem "INPUTS" "INPUTS , (?x . ?y) , ((GOAL_DONE =>> GOAL_ABORTED =>> INPUTS) => (RIGHT @ INPUT) => ?x . ?y) , 0";
forcetheorem "PREMISE" "(PREMISE @ ?n) , ?x , ((0 |-| ?n) <= ?x) , 0";
forcetheorem "RIGHT" "(RIGHT @ ?thm) , ?x , (((RIGHT1 @ ?thm) =>> RIGHT2 @ ?thm) => ?x) , 0";
forcetheorem "RIGHT1" "(RIGHT1 @ ?thm) , (?p ^+ ?q) , (?p ^+ ?thm => ?q) , 0";
forcetheorem "DZER" "DZER , (?p | true) , true , AND , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , NOT1 , ODDCHOICE , OR , REFLEX , TYPES , 0";
forcetheorem "CASEINTRO" "CASEINTRO , ?x , (?y || ?x , ?x) , CASEINTRO , 0";
forcetheorem "GOAL_DONE" "GOAL_DONE , (?x . ?x) , (IGNOREFIRST => ?x . ?x) , 0";
forcetheorem "IGNOREFIRST" "IGNOREFIRST , (?x . ?y) , ?y , IGNOREFIRST , 0";
forcetheorem "**" "(?thm1 ** ?thm2) , ?x , (?thm2 => ?thm1 => ?x) , 0";
forcetheorem "CID" "CID , (?p & true) , (|- ?p) , AND , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "AT" "AT , (|- true) , true , ASSERT , BOOLDEF , CASEINTRO , EQBOOL , EQUATION , FNDIST , NONTRIV , ODDCHOICE , REFLEX , TYPES , 0";
forcetheorem "ANNOUNCE" "(ANNOUNCE @ ?x) , true , ((OUTPUT @ ?x) => true) , 0";
adddef "halfdone" "halfdone";
adddef "done" "done";
adddef "breakout" "breakout";
adddef "IN" "<<";
adddef "forsomer" "forsomer";
adddef "forallr" "forallr";
adddef "COUNTER1" "***";
adddef "CONVIF" "<-";
adddef "XOR" "=/=";
adddef "ASSERT" "|-";
adddef "IFF" "==";
adddef "IF" "->";
adddef "OR" "|";
adddef "AND" "&";
adddef "forsome" "forsome";
adddef "NOT1" "~";
adddef "forall" "forall";
adddef "upfun" "upfun";
adddef "IGNOREFIRST" ".";
adddef "Id" "Id";
adddef "p2" "p2";
adddef "p1" "p1";
adddef "P2" "P2";
adddef "P1" "P1";
adddef "COMP" "@@";
addscript "deduction_examples";
addscript "deduction";
addscript "sequent";
addscript "new.quantifiers";
addscript "gries9";
addscript "tableau2";
addscript "logic_tools";
addscript "logicdefs2";
addscript "tableau";
addscript "logicdefs";
addscript "lambda";
addscript "structural";
setprogram "p2" "p2";
setprogram "p1" "p1";
adddefdep2 "NOT_EXIST" "ASSERT , forall , NOT1 , forsome , 0";
adddefdep2 "NOT_UNIV" "ASSERT , NOT1 , forall , forsome , 0";
adddefdep2 "EXIST_HYP" "ASSERT , 0";
adddefdep2 "UNIV_HYP" "ASSERT , 0";
adddefdep2 "TWIDDLE2" "ASSERT , forall , 0";
adddefdep2 "TWIDDLE" "0";
adddefdep2 "EXIST_GOAL" "ASSERT , NOT1 , AND , OR , forall , forsome , 0";
adddefdep2 "UNIV_GOAL" "ASSERT , forall , IGNOREFIRST , 0";
adddefdep2 "IFFHYP" "ASSERT , 0";
adddefdep2 "NEGHYP" "ASSERT , NOT1 , 0";
adddefdep2 "ORHYP" "ASSERT , 0";
adddefdep2 "ANDHYP" "ASSERT , 0";
adddefdep2 "MODUS_PONENS" "NOT1 , AND , OR , ASSERT , IF , 0";
adddefdep2 "CONTRAPOSITIVE" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "NOTIF" "ASSERT , AND , NOT1 , OR , IF , 0";
adddefdep2 "NOTOR" "ASSERT , AND , NOT1 , OR , 0";
adddefdep2 "NOTAND" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "DOUBLE_NEGATION" "ASSERT , NOT1 , 0";
adddefdep2 "SWAP_DISJUNCTS" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "IFFGOAL" "ASSERT , AND , NOT1 , OR , IF , IFF , 0";
adddefdep2 "ORGOAL" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "NOTGOAL" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "IFGOAL" "ASSERT , IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "ANDGOAL" "ASSERT , AND , IGNOREFIRST , 0";
adddefdep2 "halfdone" "halfdone , 0";
adddefdep2 "done" "done , 0";
adddefdep2 "PREMISE" "0";
adddefdep2 "ANNOUNCE" "0";
adddefdep2 "INPUTS" "IGNOREFIRST , 0";
adddefdep2 "GOAL_ABORTED" "IGNOREFIRST , breakout , 0";
adddefdep2 "GOAL_DONE" "IGNOREFIRST , 0";
adddefdep2 "BREAKOUT" "breakout , 0";
adddefdep2 "breakout" "breakout , 0";
adddefdep2 "FS_SEQUENT" "IGNOREFIRST , 0";
adddefdep2 "FS6" "IGNOREFIRST , AND , 0";
adddefdep2 "FS5" "IGNOREFIRST , AND , forall , 0";
adddefdep2 "FS4" "IGNOREFIRST , AND , forall , 0";
adddefdep2 "FS3" "IGNOREFIRST , AND , forall , 0";
adddefdep2 "FS2" "IGNOREFIRST , forall , 0";
adddefdep2 "FS1" "IGNOREFIRST , 0";
adddefdep2 "FS0b" "forall , 0";
adddefdep2 "FS0" "IGNOREFIRST , 0";
adddefdep2 "SETUP_SEQUENT" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "INR" "IGNOREFIRST , NOT1 , AND , OR , IF , ASSERT , IN , 0";
adddefdep2 "INL" "IGNOREFIRST , NOT1 , AND , OR , IF , ASSERT , IN , 0";
adddefdep2 "INSCOUT" "ASSERT , IN , 0";
adddefdep2 "IN" "ASSERT , IN , 0";
adddefdep2 "EXISTR" "IGNOREFIRST , NOT1 , AND , OR , IF , forall , forsome , 0";
adddefdep2 "EXISTL" "IGNOREFIRST , NOT1 , AND , OR , IF , forall , forsome , 0";
adddefdep2 "FORSOMEANDDIST" "NOT1 , forall , forsome , AND , 0";
adddefdep2 "UNIVR" "IGNOREFIRST , NOT1 , AND , OR , IF , forall , 0";
adddefdep2 "UNIVL" "IGNOREFIRST , NOT1 , AND , OR , IF , forall , 0";
adddefdep2 "CUT" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "IFFR" "IGNOREFIRST , NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "IFFL" "IGNOREFIRST , NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "WEAKR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "WEAKL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "EXR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "EXL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "AXIOM" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "IFR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "IFL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "ORR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "ORL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "ANDR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "ANDL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "NEGR" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "NEGL" "IGNOREFIRST , NOT1 , AND , OR , IF , 0";
adddefdep2 "SELFLABEL" "IGNOREFIRST , 0";
adddefdep2 "GETR" "NOT1 , AND , OR , 0";
adddefdep2 "GETL" "AND , 0";
adddefdep2 "UNIV_SWITCH" "forall , 0";
adddefdep2 "UCT" "0";
adddefdep2 "UCT2" "0";
adddefdep2 "UCT1" "0";
adddefdep2 "UET" "0";
adddefdep2 "UET2" "0";
adddefdep2 "UET1" "0";
adddefdep2 "RCT" "0";
adddefdep2 "RCT1" "0";
adddefdep2 "RCT2" "0";
adddefdep2 "LCT" "0";
adddefdep2 "LCT1" "0";
adddefdep2 "ELIM_ASSERT" "ASSERT , 0";
adddefdep2 "LCT2" "0";
adddefdep2 "LCT0" "AND , 0";
adddefdep2 "REWRITE_WITH_UNIVERSAL_CONJUNCTION" "IGNOREFIRST , forall , AND , 0";
adddefdep2 "REWRITE_WITH_UNIVERSAL_EQUATION" "IGNOREFIRST , forall , 0";
adddefdep2 "REWRITE_WITH_CONJUNCTION" "IGNOREFIRST , AND , 0";
adddefdep2 "REWRITE_WITH_EQUATION" "IGNOREFIRST , 0";
adddefdep2 "REWRITE_ENGINE" "IGNOREFIRST , 0";
adddefdep2 "SUB_REWRITE_TAC" "IGNOREFIRST , 0";
adddefdep2 "REWRITE_TAC" "IGNOREFIRST , 0";
adddefdep2 "STRONG_REWRITE_WITH_EQUATION" "0";
adddefdep2 "UNIV_EQ_TAC" "forall , 0";
adddefdep2 "UNIV_EQ" "forall , 0";
adddefdep2 "UNIV_TAC" "forall , 0";
adddefdep2 "9pt26" "NOT1 , AND , OR , IF , forall , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt25" "NOT1 , AND , OR , IF , forall , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt24" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt23" "NOT1 , AND , OR , IF , forall , forsome , IFF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt22" "AND , NOT1 , forall , forsome , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt21" "AND , NOT1 , forall , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt20" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt18c" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt18b" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt18a" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "9pt11" "NOT1 , AND , OR , IF , forall , P1 , P2 , forallr , 0";
adddefdep2 "9pt10" "NOT1 , AND , OR , IF , forall , P1 , P2 , forallr , 0";
adddefdep2 "9pt8" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt7" "NOT1 , AND , OR , IF , forall , IFF , P1 , P2 , forallr , 0";
adddefdep2 "9pt6" "NOT1 , AND , OR , forall , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt5" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt4d" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , IFF , 0";
adddefdep2 "9pt4c" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , IFF , 0";
adddefdep2 "9pt4b" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt4a" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt3c" "forall , IFF , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt3b" "forall , IFF , AND , NOT1 , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt3a" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "8pt19E" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "8pt19U" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "8pt16E" "NOT1 , AND , OR , forall , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "8pt16U" "AND , forall , NOT1 , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "8pt15E" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "8pt15U" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "8pt13E" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "8pt13U" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "FORSOMERBOOL3" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "FORSOMERBOOL2" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "FORALLRBOOL3" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "FORALLRBOOL2" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "UNIV_RANGE_2" "NOT1 , forall , forsome , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "8pt14E" "ASSERT , NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "L" "0";
adddefdep2 "R" "0";
adddefdep2 "8pt14U" "ASSERT , forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "9pt30b" "forall , NOT1 , AND , OR , IF , forsome , 0";
adddefdep2 "9pt30a" "NOT1 , AND , OR , IF , forall , forsome , 0";
adddefdep2 "9pt16b" "forall , 0";
adddefdep2 "9pt16a" "0";
adddefdep2 "9pt16a1" "forall , 0";
adddefdep2 "PRE9pt12" "NOT1 , AND , OR , IF , forall , 0";
adddefdep2 "CONVERT_IMP_2" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "CONVERT_IMP_1" "NOT1 , AND , OR , IF , 0";
adddefdep2 "ONEPOINT" "ASSERT , forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "UNIV_RANGE_1" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "forsomer3" "NOT1 , forall , forsome , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "forsomer2" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "FORSOMERBOOL" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "forsomer" "NOT1 , forall , AND , OR , IF , P1 , P2 , forallr , forsomer , 0";
adddefdep2 "forallr2" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "FORALLRBOOL" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "forallr" "forall , NOT1 , AND , OR , IF , P1 , P2 , forallr , 0";
adddefdep2 "EQ_TRANS" "NOT1 , AND , OR , IF , 0";
adddefdep2 "COMMUTE_LEVEL_QUANT" "forall , NOT1 , COUNTER1 , IFF , 0";
adddefdep2 "ALT_QUANT_AGAIN" "NOT1 , forall , forsome , COUNTER1 , AND , OR , IF , 0";
adddefdep2 "TAB_CEX" "forall , 0";
adddefdep2 "TAB_WITNESS" "NOT1 , forall , forsome , 0";
adddefdep2 "ANY_INSTANCE" "NOT1 , AND , OR , IF , 0";
adddefdep2 "forallcase" "forall , 0";
adddefdep2 "forsomecase" "NOT1 , forall , forsome , 0";
adddefdep2 "CEX_TAC" "NOT1 , forall , 0";
adddefdep2 "CHOICE_TAC" "NOT1 , forall , forsome , 0";
adddefdep2 "CEX" "NOT1 , forall , 0";
adddefdep2 "SUBTYPE" "0";
adddefdep2 "COUNTER" "NOT1 , COUNTER1 , 0";
adddefdep2 "COUNTER1" "NOT1 , COUNTER1 , 0";
adddefdep2 "CHOICE" "NOT1 , forall , forsome , 0";
adddefdep2 "ALT_QUANT_IMP" "NOT1 , AND , OR , IF , forall , forsome , 0";
adddefdep2 "TAB_ALL_NEW_2" "forall , 0";
adddefdep2 "TAB_ALL_NEW_1" "forall , 0";
adddefdep2 "TAB_SOME_NEW_2" "NOT1 , forall , forsome , 0";
adddefdep2 "TAB_SOME_NEW_1" "NOT1 , forall , forsome , 0";
adddefdep2 "TAB_SOME_2" "NOT1 , forall , forsome , 0";
adddefdep2 "TAB_ALL_2" "forall , 0";
adddefdep2 "TAB_SOME" "NOT1 , forall , forsome , 0";
adddefdep2 "TAB_ALL" "forall , 0";
adddefdep2 "TAB_XOR_2" "NOT1 , IFF , XOR , 0";
adddefdep2 "TAB_XOR" "NOT1 , IFF , XOR , 0";
adddefdep2 "TAB_IFF_2" "IFF , 0";
adddefdep2 "TAB_IFF" "IFF , 0";
adddefdep2 "TAB_IF_2" "NOT1 , AND , OR , IF , 0";
adddefdep2 "TAB_IF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "TAB_OR_2" "NOT1 , AND , OR , 0";
adddefdep2 "TAB_OR" "NOT1 , AND , OR , 0";
adddefdep2 "TAB_AND_2" "AND , 0";
adddefdep2 "TAB_AND" "AND , 0";
adddefdep2 "TAB_NOT_2" "NOT1 , 0";
adddefdep2 "TAB_NOT" "NOT1 , 0";
adddefdep2 "FORALL_IMP_FORSOME_EQ" "NOT1 , AND , OR , IF , forall , forsome , 0";
adddefdep2 "FORSOME_NOTFORALL" "NOT1 , forall , forsome , 0";
adddefdep2 "FORALL_NOTFORSOME" "forall , NOT1 , forsome , 0";
adddefdep2 "FORSOMEDIST2" "AND , NOT1 , forall , forsome , 0";
adddefdep2 "FORALLORDIST" "NOT1 , AND , OR , forall , 0";
adddefdep2 "FORALLOR" "NOT1 , AND , OR , forall , 0";
adddefdep2 "FORALLNOT" "AND , forall , NOT1 , 0";
adddefdep2 "NOTFORALL" "NOT1 , AND , OR , forall , 0";
adddefdep2 "FORALLSWITCH2" "forall , 0";
adddefdep2 "FORSOMEDROP" "ASSERT , NOT1 , forall , forsome , 0";
adddefdep2 "FORALLDROP" "ASSERT , forall , 0";
adddefdep2 "FORALLSWITCH" "forall , 0";
adddefdep2 "FORALLDIST" "AND , forall , 0";
adddefdep2 "DINSTANTIATEF1" "NOT1 , AND , OR , forall , forsome , 0";
adddefdep2 "DINSTANTIATE" "NOT1 , forall , forsome , AND , OR , 0";
adddefdep2 "INSTANTIATE" "forall , AND , 0";
adddefdep2 "TESTSIMP" "0";
adddefdep2 "CONDSIMP" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "XORALTDEF" "NOT1 , IFF , AND , OR , 0";
adddefdep2 "CASEPREP" "0";
adddefdep2 "CONDCASES2" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "IMPTOCOND" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "CONDCASES" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "CONDCASESL1F" "IFF , NOT1 , AND , OR , 0";
adddefdep2 "CONDCASESL1" "IFF , NOT1 , AND , OR , 0";
adddefdep2 "BEQSUBS" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "ASRTCOND" "ASSERT , 0";
adddefdep2 "EQSYMM2" "0";
adddefdep2 "CONVORAND" "IFF , NOT1 , AND , OR , 0";
adddefdep2 "CONVORIMP" "IFF , NOT1 , AND , OR , IF , 0";
adddefdep2 "CONVANDOR" "NOT1 , AND , OR , IF , 0";
adddefdep2 "CONVANDIMP" "IFF , AND , NOT1 , OR , IF , 0";
adddefdep2 "CONVIMPOR" "NOT1 , AND , OR , IF , 0";
adddefdep2 "CONVIMPAND" "AND , NOT1 , OR , IF , 0";
adddefdep2 "IDIS4" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IDIS3" "AND , NOT1 , OR , IF , 0";
adddefdep2 "IDIS2" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IDIS1" "AND , NOT1 , OR , IF , 0";
adddefdep2 "3pt89" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "AP3pt88" "NOT1 , AND , OR , 0";
adddefdep2 "3pt88" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "3pt87" "AND , 0";
adddefdep2 "AP3pt86b" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt86b" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "AP3pt86a" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt86a" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "3pt85b" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt85a" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt84c" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt84b" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt83F" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt83" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt82cF" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt82c" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt82bF" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt82b" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt82aF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt82a" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt81F" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt81" "NOT1 , AND , OR , IF , IFF , 0";
adddefdep2 "3pt80" "IFF , AND , NOT1 , OR , IF , 0";
adddefdep2 "3pt79F" "AND , NOT1 , OR , IF , ASSERT , 0";
adddefdep2 "3pt79" "ASSERT , AND , NOT1 , OR , IF , 0";
adddefdep2 "3pt78" "NOT1 , AND , OR , IF , 0";
adddefdep2 "MOPF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "MOP" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76eF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76e" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76dF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76d" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76cF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76c" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76bF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76b" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76aF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt76a" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt75F" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt75" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt74" "NOT1 , AND , OR , IF , 0";
adddefdep2 "ILID" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "IRZERF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IRZER" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IREFF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IREF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt70" "IFF , NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt69" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt68F" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt68" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt67F" "AND , NOT1 , OR , IF , ASSERT , 0";
adddefdep2 "3pt67" "ASSERT , AND , NOT1 , OR , IF , 0";
adddefdep2 "3pt66" "AND , NOT1 , OR , IF , 0";
adddefdep2 "3pt64" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt65" "NOT1 , AND , OR , IF , 0";
adddefdep2 "3pt62" "IFF , AND , NOT1 , OR , IF , 0";
adddefdep2 "IDISB" "IFF , NOT1 , AND , OR , IF , 0";
adddefdep2 "CONTP" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IDEF3" "IFF , AND , NOT1 , OR , IF , 0";
adddefdep2 "IDEF2" "NOT1 , AND , OR , IF , 0";
adddefdep2 "XALTDEF" "NOT1 , AND , OR , IFF , XOR , 0";
adddefdep2 "BALTDEF" "NOT1 , AND , OR , IFF , 0";
adddefdep2 "REPL" "AND , IFF , 0";
adddefdep2 "3pt50" "AND , IFF , 0";
adddefdep2 "3pt49" "AND , IFF , 0";
adddefdep2 "3pt48" "AND , IFF , NOT1 , 0";
adddefdep2 "CDISD" "NOT1 , AND , OR , 0";
adddefdep2 "DDISC" "AND , NOT1 , OR , 0";
adddefdep2 "3pt44b" "NOT1 , AND , OR , 0";
adddefdep2 "3pt44a" "AND , NOT1 , OR , 0";
adddefdep2 "L3pt43" "AND , IFF , NOT1 , OR , 0";
adddefdep2 "3pt43bF" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "3pt43b" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "3pt43aF" "AND , NOT1 , OR , ASSERT , 0";
adddefdep2 "3pt43a" "ASSERT , AND , NOT1 , OR , 0";
adddefdep2 "CCON" "AND , NOT1 , 0";
adddefdep2 "CDISC" "AND , 0";
adddefdep2 "CZERF" "AND , 0";
adddefdep2 "CZER" "AND , 0";
adddefdep2 "CID" "ASSERT , AND , 0";
adddefdep2 "CIDEM" "ASSERT , AND , 0";
adddefdep2 "CASSOC" "AND , 0";
adddefdep2 "CSYM" "AND , 0";
adddefdep2 "DUAL" "0";
adddefdep2 "REMFLIP" "0";
adddefdep2 "SREMFLIP" "0";
adddefdep2 "NOTCLEAN" "NOT1 , 0";
adddefdep2 "ASSERTCLEAN" "ASSERT , 0";
adddefdep2 "REMA" "NOT1 , ASSERT , 0";
adddefdep2 "AF" "ASSERT , 0";
adddefdep2 "AT" "ASSERT , 0";
adddefdep2 "FLIPALL" "0";
adddefdep2 "SFLIPALL" "0";
adddefdep2 "FLIPPASTC" "NOT1 , AND , OR , 0";
adddefdep2 "FLIPPASTD" "AND , NOT1 , OR , 0";
adddefdep2 "FLIPPASTX" "IFF , NOT1 , XOR , 0";
adddefdep2 "FLIPPASTB" "NOT1 , IFF , XOR , 0";
adddefdep2 "FLIPPASTN" "NOT1 , 0";
adddefdep2 "FLIPPASTA" "ASSERT , NOT1 , 0";
adddefdep2 "XORFLIP" "IFF , NOT1 , XOR , 0";
adddefdep2 "BFLIP" "NOT1 , IFF , XOR , 0";
adddefdep2 "DEMa" "NOT1 , AND , OR , 0";
adddefdep2 "DEMb" "NOT1 , AND , OR , 0";
adddefdep2 "GR3" "NOT1 , AND , OR , IFF , 0";
adddefdep2 "GR2" "AND , IFF , NOT1 , OR , 0";
adddefdep2 "3pt32F" "IFF , NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "3pt32" "ASSERT , IFF , NOT1 , AND , OR , 0";
adddefdep2 "DID" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "DDISD" "NOT1 , AND , OR , 0";
adddefdep2 "DZERF" "NOT1 , AND , OR , 0";
adddefdep2 "DZER" "NOT1 , AND , OR , 0";
adddefdep2 "MUTINT" "IFF , NOT1 , XOR , 0";
adddefdep2 "MUTASSOC" "NOT1 , IFF , XOR , 0";
adddefdep2 "XORASSOC" "NOT1 , IFF , XOR , 0";
adddefdep2 "XORSYM" "NOT1 , IFF , XOR , 0";
adddefdep2 "NEQ" "IFF , NOT1 , 0";
adddefdep2 "DUBNEG2" "ASSERT , NOT1 , 0";
adddefdep2 "NEGF" "NOT1 , 0";
adddefdep2 "3pt15bF" "IFF , NOT1 , 0";
adddefdep2 "3pt15b" "IFF , NOT1 , 0";
adddefdep2 "3pt15a" "NOT1 , IFF , 0";
adddefdep2 "3pt14" "IFF , NOT1 , XOR , 0";
adddefdep2 "3pt11" "IFF , NOT1 , 0";
adddefdep2 "APLZ" "AND , 0";
adddefdep2 "THMAP" "0";
adddefdep2 "MKASRT" "0";
adddefdep2 "ASRTRIGHT" "0";
adddefdep2 "ASRTLEFT" "0";
adddefdep2 "ASSRTBOTH" "0";
adddefdep2 "GCLEAN" "0";
adddefdep2 "STT" "ASSERT , 0";
adddefdep2 "STR" "ASSERT , 0";
adddefdep2 "STL" "ASSERT , 0";
adddefdep2 "EQT" "ASSERT , 0";
adddefdep2 "BCONV" "ASSERT , IFF , 0";
adddefdep2 "ASRTEQ" "ASSERT , 0";
adddefdep2 "LZ" "AND , 0";
adddefdep2 "CONS" "NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "IDEF" "IFF , NOT1 , AND , OR , IF , 0";
adddefdep2 "GR" "IFF , AND , NOT1 , OR , 0";
adddefdep2 "DXMF" "NOT1 , AND , OR , 0";
adddefdep2 "BIDF" "IFF , 0";
adddefdep2 "DXM" "NOT1 , AND , OR , 0";
adddefdep2 "DDIS" "IFF , NOT1 , AND , OR , 0";
adddefdep2 "DIDEM" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "DSYM" "NOT1 , AND , OR , 0";
adddefdep2 "DASSOC" "NOT1 , AND , OR , 0";
adddefdep2 "XORDEF" "NOT1 , IFF , XOR , 0";
adddefdep2 "BDIS" "IFF , NOT1 , 0";
adddefdep2 "FDEF" "NOT1 , 0";
adddefdep2 "BID2" "ASSERT , IFF , 0";
adddefdep2 "BID" "IFF , 0";
adddefdep2 "BSYM" "IFF , 0";
adddefdep2 "BASSOC" "IFF , 0";
adddefdep2 "PROVETAUT2" "0";
adddefdep2 "PROVETAUT" "0";
adddefdep2 "CNRULE3" "NOT1 , AND , OR , IF , CONVIF , ASSERT , 0";
adddefdep2 "CNRULE2" "NOT1 , AND , OR , IF , CONVIF , ASSERT , 0";
adddefdep2 "CNRULE1" "NOT1 , AND , OR , IF , CONVIF , ASSERT , 0";
adddefdep2 "IRULE3" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "IRULE2" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "IRULE1" "NOT1 , AND , OR , IF , ASSERT , 0";
adddefdep2 "NRULE2" "NOT1 , ASSERT , 0";
adddefdep2 "NRULE1" "NOT1 , ASSERT , 0";
adddefdep2 "XRULE3" "NOT1 , IFF , XOR , ASSERT , 0";
adddefdep2 "XRULE2" "NOT1 , IFF , XOR , ASSERT , 0";
adddefdep2 "XRULE1" "NOT1 , IFF , XOR , ASSERT , 0";
adddefdep2 "CRULE3" "AND , ASSERT , 0";
adddefdep2 "CRULE2" "AND , ASSERT , 0";
adddefdep2 "CRULE1" "AND , ASSERT , 0";
adddefdep2 "DRULE3" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "DRULE2" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "DRULE1" "NOT1 , AND , OR , ASSERT , 0";
adddefdep2 "BRULE3" "IFF , ASSERT , 0";
adddefdep2 "BRULE2" "IFF , ASSERT , 0";
adddefdep2 "BRULE1" "IFF , ASSERT , 0";
adddefdep2 "NEWTAUT" "0";
adddefdep2 "ALL_EXP" "0";
adddefdep2 "ALT_PUSH" "0";
adddefdep2 "CN_EXP" "NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "XOR_EXP" "NOT1 , IFF , XOR , 0";
adddefdep2 "IFF_EXP" "IFF , 0";
adddefdep2 "NONTRIV2a" "0";
adddefdep2 "IF_EXP" "NOT1 , AND , OR , IF , 0";
adddefdep2 "OR_EXP" "NOT1 , AND , OR , 0";
adddefdep2 "AND_EXP" "AND , 0";
adddefdep2 "NOT_EXP" "NOT1 , 0";
adddefdep2 "ASSERT_EXP" "ASSERT , 0";
adddefdep2 "MAKE_CASE" "0";
adddefdep2 "FORSOMEBOOL2" "NOT1 , forall , forsome , 0";
adddefdep2 "FORALLBOOL2" "forall , 0";
adddefdep2 "BOOLDEF2" "0";
adddefdep2 "ASSERT_UNEXP" "ASSERT , 0";
adddefdep2 "ANDUNPACK" "AND , 0";
adddefdep2 "DUBNEG" "NOT1 , 0";
adddefdep2 "BOOLDEF0" "0";
adddefdep2 "UNPACK" "0";
adddefdep2 "EXAMPLE1" "forall , NOT1 , forsome , 0";
adddefdep2 "CNBOOL" "NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "CONSCIN" "NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "CONTYPE" "ASSERT , NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "CONVIF" "NOT1 , AND , OR , IF , CONVIF , 0";
adddefdep2 "IMPTYPE" "ASSERT , NOT1 , AND , OR , IF , 0";
adddefdep2 "CTYPE" "ASSERT , AND , 0";
adddefdep2 "DTYPE" "ASSERT , NOT1 , AND , OR , 0";
adddefdep2 "NTYPE" "ASSERT , NOT1 , 0";
adddefdep2 "XORBOOL" "NOT1 , IFF , XOR , 0";
adddefdep2 "XORSCIN" "NOT1 , IFF , XOR , 0";
adddefdep2 "XORTYPE" "ASSERT , NOT1 , IFF , XOR , 0";
adddefdep2 "XOR" "NOT1 , IFF , XOR , 0";
adddefdep2 "ALLASSERTS" "ASSERT , 0";
adddefdep2 "BTYPE" "ASSERT , IFF , 0";
adddefdep2 "ASSERT2" "ASSERT , 0";
adddefdep2 "TWOASSERTS" "ASSERT , 0";
adddefdep2 "ASSERTSCOUT" "ASSERT , 0";
adddefdep2 "ASSERT" "ASSERT , 0";
adddefdep2 "IFFSCIN" "IFF , 0";
adddefdep2 "IFSCIN" "NOT1 , AND , OR , IF , 0";
adddefdep2 "ORSCIN" "NOT1 , AND , OR , 0";
adddefdep2 "NOTBOOLDROP" "NOT1 , 0";
adddefdep2 "ANDSCIN" "AND , 0";
adddefdep2 "IFFBOOL" "IFF , 0";
adddefdep2 "IFF" "IFF , 0";
adddefdep2 "IFBOOL" "NOT1 , AND , OR , IF , 0";
adddefdep2 "IF" "NOT1 , AND , OR , IF , 0";
adddefdep2 "ALTORDEF" "NOT1 , AND , OR , 0";
adddefdep2 "NOT" "NOT1 , 0";
adddefdep2 "ORBOOL" "NOT1 , AND , OR , 0";
adddefdep2 "OR" "NOT1 , AND , OR , 0";
adddefdep2 "ANDBOOL" "AND , 0";
adddefdep2 "AND" "AND , 0";
adddefdep2 "BOOLDEF" "0";
adddefdep2 "FALSEBOOL" "0";
adddefdep2 "TRUEBOOL" "0";
adddefdep2 "forsome2" "NOT1 , forall , forsome , 0";
adddefdep2 "FORSOMEBOOL" "NOT1 , forall , forsome , 0";
adddefdep2 "forsome" "NOT1 , forall , forsome , 0";
adddefdep2 "NOTBOOL" "NOT1 , 0";
adddefdep2 "NOT1" "NOT1 , 0";
adddefdep2 "forall2" "forall , 0";
adddefdep2 "FORALLBOOL" "forall , 0";
adddefdep2 "forall" "forall , 0";
adddefdep2 "EQBOOL" "0";
adddefdep2 "EQSYMM" "0";
adddefdep2 "LAMBDAREMOVE" "0";
adddefdep2 "LAMBDAREMOVE3" "0";
adddefdep2 "LAMBDAREMOVE2" "0";
adddefdep2 "LAMBDAREMOVE1" "0";
adddefdep2 "LAMBDAINTRO" "0";
adddefdep2 "LAMBDAINTRO3" "0";
adddefdep2 "LAMBDAINTRO2" "0";
adddefdep2 "LAMBDAINTRO1" "0";
adddefdep2 "LABELINTRO" "IGNOREFIRST , 0";
adddefdep2 "goto" "0";
adddefdep2 "INPUT_AT" "0";
adddefdep2 "value" "0";
adddefdep2 "left_case" "0";
adddefdep2 "right_case" "0";
adddefdep2 "left" "0";
adddefdep2 "right" "0";
adddefdep2 "INPUTS2" "0";
adddefdep2 "up" "upfun , 0";
adddefdep2 "upfun" "upfun , 0";
adddefdep2 "BINDLABELS" "0";
adddefdep2 "APPLYATLABELS" "0";
adddefdep2 "APPLYATLABEL" "0";
adddefdep2 "APPLYATLABEL0" "IGNOREFIRST , 0";
adddefdep2 "LABELTERM" "0";
adddefdep2 "LABELTERMS" "0";
adddefdep2 "LABELTERMS_CASE" "0";
adddefdep2 "LABELTERMS_UNARY" "0";
adddefdep2 "LABELTERMS_ABSTRACT" "0";
adddefdep2 "LABELTERMS_SPLIT" "0";
adddefdep2 "LABELTERMS_FOUND" "0";
adddefdep2 "POP_CASE" "0";
adddefdep2 "POP_CASE_2" "0";
adddefdep2 "POP_CASE_1" "IGNOREFIRST , 0";
adddefdep2 "ANTI_UNEVAL_TAC" "0";
adddefdep2 "TYPEBIND" "0";
adddefdep2 "UNEVAL_TAC" "0";
adddefdep2 "GET" "0";
adddefdep2 "GET2" "0";
adddefdep2 "GET1" "0";
adddefdep2 "GET0" "0";
adddefdep2 "ALLASSOCS" "0";
adddefdep2 "ASSOCS" "0";
adddefdep2 "VIEWCASES" "0";
adddefdep2 "LOOP_TAC" "0";
adddefdep2 "ALL_STEPS" "IGNOREFIRST , 0";
adddefdep2 "STOPLOOP" "IGNOREFIRST , 0";
adddefdep2 "STARTLOOP" "IGNOREFIRST , 0";
adddefdep2 "LISTBIND" "0";
adddefdep2 "PAIRBIND" "0";
adddefdep2 "VALUE" "0";
adddefdep2 "VALUE0" "0";
adddefdep2 "PI2F" "P2 , 0";
adddefdep2 "PI1F" "P1 , 0";
adddefdep2 "REVPIVOT" "0";
adddefdep2 "PIVOT" "0";
adddefdep2 "TOPDOWN" "0";
adddefdep2 "TOPDOWN_PREFIX" "0";
adddefdep2 "TOPDOWN_INFIX" "0";
adddefdep2 "TOPDOWN_CASE" "0";
adddefdep2 "EVERYWHERE2" "0";
adddefdep2 "EVERYWHERE" "0";
adddefdep2 "EVERYWHERE_INFIX" "0";
adddefdep2 "EVERYWHERE_PREFIX" "0";
adddefdep2 "EVERYWHERE_ABS" "0";
adddefdep2 "STRONG_EVERYWHERE_CASE" "0";
adddefdep2 "EVERYWHERE_CASE" "0";
adddefdep2 "BOTH_CASES" "0";
adddefdep2 "RIGHT_CASE" "0";
adddefdep2 "LEFT_CASE" "0";
adddefdep2 "RL" "0";
adddefdep2 "RIGHT" "0";
adddefdep2 "RIGHT2" "0";
adddefdep2 "RIGHT1" "0";
adddefdep2 "LEFT" "0";
adddefdep2 "LEFT2" "0";
adddefdep2 "LEFT1" "0";
adddefdep2 "$" "0";
adddefdep2 "**" "0";
adddefdep2 "PCASEINTRO" "0";
adddefdep2 "ID" "Id , 0";
adddefdep2 "PI2" "P2 , 0";
adddefdep2 "PI1" "P1 , 0";
adddefdep2 "IGNOREFIRST" "IGNOREFIRST , 0";
adddefdep2 "HYP" "0";
adddefdep2 "ODDCHOICE" "0";
adddefdep2 "EQUATION" "0";
adddefdep2 "NONTRIV" "0";
adddefdep2 "REFLEX" "0";
adddefdep2 "CASEINTRO" "0";
adddefdep2 "FNDIST" "0";
adddefdep2 "Id" "Id , 0";
adddefdep2 "p2" "p2 , 0";
adddefdep2 "p1" "p1 , 0";
adddefdep2 "P2" "P2 , 0";
adddefdep2 "P1" "P1 , 0";
adddefdep2 "COMP" "COMP , 0";
adddefdep2 "TYPES" "0";
addthmtextdep2 "NOT_EXIST" "NOT_EXIST , forsome , forall , NOT1 , ASSERT , 0";
addthmtextdep2 "ASSERT" "ASSERT , 0";
addthmtextdep2 "forsome" "forsome , forall , NOT1 , 0";
addthmtextdep2 "NOT1" "NOT1 , 0";
addthmtextdep2 "forall" "forall , 0";
addthmtextdep2 "NOT_UNIV" "NOT_UNIV , forall , NOT1 , ASSERT , forsome , 0";
addthmtextdep2 "EXIST_HYP" "EXIST_HYP , ASSERT , FORALLDROP , forall , AT , (?x ** ?y) , RIGHT , RIGHT1 , RIGHT2 , VALUE , ASSERT2 , IFGOAL , IF , NOT1 , OR , AND , CASEINTRO , ANNOUNCE , done , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , INPUTS , FORALLBOOL2 , FORALL_IMP_FORSOME_EQ , forsome , TAB_IF , LEFT_CASE , ASSERT_UNEXP , ASRTCOND , (?x $ ?y) , 0";
addthmtextdep2 "$" "(?x $ ?y) , 0";
addthmtextdep2 "ASRTCOND" "ASRTCOND , ASSERT , 0";
addthmtextdep2 "ASSERT_UNEXP" "ASSERT_UNEXP , ASSERT , 0";
addthmtextdep2 "LEFT_CASE" "LEFT_CASE , 0";
addthmtextdep2 "TAB_IF" "TAB_IF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORALL_IMP_FORSOME_EQ" "FORALL_IMP_FORSOME_EQ , forall , IF , NOT1 , OR , AND , forsome , 0";
addthmtextdep2 "FORALLBOOL2" "FORALLBOOL2 , forall , 0";
addthmtextdep2 "IFGOAL" "IFGOAL , IF , NOT1 , OR , AND , ASSERT , AT , CASEINTRO , ANNOUNCE , done , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , 0";
addthmtextdep2 "INPUTS" "IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , 0";
addthmtextdep2 "GOAL_ABORTED" "GOAL_ABORTED , breakout , IGNOREFIRST , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , 0";
addthmtextdep2 "breakout" "breakout , 0";
addthmtextdep2 "GOAL_DONE" "GOAL_DONE , IGNOREFIRST , 0";
addthmtextdep2 "IGNOREFIRST" "IGNOREFIRST , 0";
addthmtextdep2 "done" "done , 0";
addthmtextdep2 "ANNOUNCE" "ANNOUNCE , 0";
addthmtextdep2 "CASEINTRO" "CASEINTRO , 0";
addthmtextdep2 "IF" "IF , NOT1 , OR , AND , 0";
addthmtextdep2 "OR" "OR , NOT1 , AND , 0";
addthmtextdep2 "AND" "AND , 0";
addthmtextdep2 "ASSERT2" "ASSERT2 , ASSERT , 0";
addthmtextdep2 "VALUE" "VALUE , 0";
addthmtextdep2 "RIGHT" "RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "RIGHT2" "RIGHT2 , 0";
addthmtextdep2 "RIGHT1" "RIGHT1 , 0";
addthmtextdep2 "**" "(?x ** ?y) , 0";
addthmtextdep2 "AT" "AT , ASSERT , 0";
addthmtextdep2 "FORALLDROP" "FORALLDROP , forall , ASSERT , 0";
addthmtextdep2 "UNIV_HYP" "UNIV_HYP , ASSERT , AT , ASRTCOND , LEFT , LEFT1 , LEFT2 , forall2 , forall , (?x $ ?y) , CASEINTRO , LEFT_CASE , TWIDDLE , TWIDDLE2 , 0";
addthmtextdep2 "TWIDDLE2" "TWIDDLE2 , forall , ASSERT , 0";
addthmtextdep2 "TWIDDLE" "TWIDDLE , LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "forall2" "forall2 , forall , 0";
addthmtextdep2 "LEFT" "LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "LEFT2" "LEFT2 , 0";
addthmtextdep2 "LEFT1" "LEFT1 , 0";
addthmtextdep2 "EXIST_GOAL" "EXIST_GOAL , forsome , forall , NOT1 , ASSERT , AT , DZER , OR , AND , ANNOUNCE , done , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , 0";
addthmtextdep2 "DZER" "DZER , OR , NOT1 , AND , 0";
addthmtextdep2 "UNIV_GOAL" "UNIV_GOAL , forall , ASSERT , AT , FORALLDROP , (?x ** ?y) , ANNOUNCE , done , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , INPUTS , 0";
addthmtextdep2 "IFFHYP" "IFFHYP , ASSERT , CASEINTRO , LEFT_CASE , (?x $ ?y) , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , ASRTCOND , TAB_AND_2 , AND , LEFT , LEFT1 , LEFT2 , 3pt80 , IF , NOT1 , OR , IFF , 0";
addthmtextdep2 "3pt80" "3pt80 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "IFF" "IFF , 0";
addthmtextdep2 "TAB_AND_2" "TAB_AND_2 , AND , 0";
addthmtextdep2 "NEGHYP" "NEGHYP , ASSERT , ASSERT_UNEXP , TAB_NOT_2 , NOT1 , ASRTCOND , CASEINTRO , LEFT , LEFT1 , LEFT2 , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , 0";
addthmtextdep2 "TAB_NOT_2" "TAB_NOT_2 , NOT1 , 0";
addthmtextdep2 "ORHYP" "ORHYP , ASSERT , CASEINTRO , LEFT_CASE , (?x $ ?y) , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , ASRTCOND , LEFT , LEFT1 , LEFT2 , DUBNEG2 , NOT1 , TAB_NOT_2 , OR_EXP , OR , AND , DRULE1 , 0";
addthmtextdep2 "DRULE1" "DRULE1 , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "OR_EXP" "OR_EXP , OR , NOT1 , AND , 0";
addthmtextdep2 "DUBNEG2" "DUBNEG2 , NOT1 , ASSERT , 0";
addthmtextdep2 "ANDHYP" "ANDHYP , ASSERT , CASEINTRO , LEFT_CASE , (?x $ ?y) , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , ASRTCOND , TAB_AND_2 , AND , LEFT , LEFT1 , LEFT2 , CRULE1 , 0";
addthmtextdep2 "CRULE1" "CRULE1 , AND , ASSERT , 0";
addthmtextdep2 "MODUS_PONENS" "MODUS_PONENS , ASSERT , RIGHT , RIGHT1 , RIGHT2 , CID , AND , AT , (?x ** ?y) , DZER , OR , NOT1 , ANNOUNCE , done , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , INPUTS , IF , 0";
addthmtextdep2 "CID" "CID , AND , ASSERT , 0";
addthmtextdep2 "CONTRAPOSITIVE" "CONTRAPOSITIVE , IF , NOT1 , OR , AND , ASSERT , IRULE2 , IRULE3 , (?x ** ?y) , RL , DUBNEG2 , 0";
addthmtextdep2 "RL" "RL , 0";
addthmtextdep2 "IRULE3" "IRULE3 , ASSERT , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IRULE2" "IRULE2 , ASSERT , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "NOTIF" "NOTIF , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "NOTOR" "NOTOR , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "NOTAND" "NOTAND , AND , NOT1 , ASSERT , OR , 0";
addthmtextdep2 "DOUBLE_NEGATION" "DOUBLE_NEGATION , NOT1 , ASSERT , 0";
addthmtextdep2 "SWAP_DISJUNCTS" "SWAP_DISJUNCTS , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "IFFGOAL" "IFFGOAL , IFF , ASSERT , ANNOUNCE , done , ANDGOAL , AND , AT , CID , (?x ** ?y) , halfdone , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , INPUTS , IF , NOT1 , OR , 0";
addthmtextdep2 "ANDGOAL" "ANDGOAL , AND , ASSERT , AT , CID , (?x ** ?y) , ANNOUNCE , halfdone , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , INPUTS , done , 0";
addthmtextdep2 "halfdone" "halfdone , 0";
addthmtextdep2 "ORGOAL" "ORGOAL , OR , NOT1 , AND , ASSERT , ANNOUNCE , done , IFGOAL , IF , AT , CASEINTRO , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , LEFT , LEFT1 , LEFT2 , DUBNEG2 , IRULE2 , 0";
addthmtextdep2 "NOTGOAL" "NOTGOAL , NOT1 , ASSERT , ANNOUNCE , done , IFGOAL , IF , OR , AND , AT , CASEINTRO , IGNOREFIRST , GOAL_DONE , GOAL_ABORTED , breakout , RIGHT , RIGHT1 , RIGHT2 , (?x ** ?y) , INPUTS , 0";
addthmtextdep2 "PREMISE" "PREMISE , 0";
addthmtextdep2 "BREAKOUT" "BREAKOUT , breakout , 0";
addthmtextdep2 "FS_SEQUENT" "IGNOREFIRST , FS1 , FS0 , FS_SEQUENT , FS2 , forall , FS0b , FS5 , AND , CID , ASSERT , AT , (?x ** ?y) , FS3 , FS4 , FS6 , 0";
addthmtextdep2 "FS6" "FS6 , AND , IGNOREFIRST , CID , ASSERT , AT , (?x ** ?y) , FS0 , 0";
addthmtextdep2 "FS4" "FS4 , forall , AND , IGNOREFIRST , CID , ASSERT , AT , (?x ** ?y) , FS0 , FS0b , 0";
addthmtextdep2 "FS3" "FS3 , forall , AND , IGNOREFIRST , CID , ASSERT , AT , (?x ** ?y) , FS0b , FS0 , 0";
addthmtextdep2 "FS5" "FS5 , forall , AND , IGNOREFIRST , CID , ASSERT , AT , (?x ** ?y) , FS0b , FS0 , 0";
addthmtextdep2 "FS2" "FS2 , forall , IGNOREFIRST , FS0b , FS0 , 0";
addthmtextdep2 "FS0b" "FS0b , forall , 0";
addthmtextdep2 "FS1" "FS1 , IGNOREFIRST , FS0 , 0";
addthmtextdep2 "FS0" "FS0 , IGNOREFIRST , 0";
addthmtextdep2 "SETUP_SEQUENT" "SETUP_SEQUENT , ASSERT , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "INR" "INR , IN , ASSERT , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "IN" "IN , ASSERT , 0";
addthmtextdep2 "INL" "INL , IN , ASSERT , AND , IF , NOT1 , OR , IGNOREFIRST , 0";
addthmtextdep2 "INSCOUT" "INSCOUT , IN , ASSERT , 0";
addthmtextdep2 "EXISTR" "EXISTR , forsome , forall , NOT1 , OR , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "EXISTL" "EXISTL , forsome , forall , NOT1 , AND , IF , OR , IGNOREFIRST , 0";
addthmtextdep2 "FORSOMEANDDIST" "FORSOMEANDDIST , forsome , forall , NOT1 , AND , 0";
addthmtextdep2 "UNIVR" "UNIVR , forall , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "UNIVL" "UNIVL , forall , AND , IF , NOT1 , OR , IGNOREFIRST , 0";
addthmtextdep2 "CUT" "CUT , IF , NOT1 , OR , AND , IGNOREFIRST , 0";
addthmtextdep2 "IFFR" "IFFR , IFF , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "IFFL" "IFFL , IFF , AND , IF , NOT1 , OR , IGNOREFIRST , 0";
addthmtextdep2 "WEAKR" "WEAKR , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "WEAKL" "WEAKL , AND , IF , NOT1 , OR , IGNOREFIRST , 0";
addthmtextdep2 "EXR" "EXR , IF , NOT1 , OR , AND , GETR , GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , DSYM , DASSOC , IGNOREFIRST , 0";
addthmtextdep2 "GETR" "GETR , OR , NOT1 , AND , GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , DSYM , DASSOC , 0";
addthmtextdep2 "DASSOC" "DASSOC , OR , NOT1 , AND , 0";
addthmtextdep2 "DSYM" "DSYM , OR , NOT1 , AND , 0";
addthmtextdep2 "GET" "GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , 0";
addthmtextdep2 "ASSOCS" "ASSOCS , 0";
addthmtextdep2 "GET0" "GET0 , 0";
addthmtextdep2 "GET2" "GET2 , LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "GET1" "GET1 , 0";
addthmtextdep2 "EXL" "EXL , IF , NOT1 , OR , AND , GETL , GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , CSYM , CASSOC , IGNOREFIRST , 0";
addthmtextdep2 "GETL" "GETL , AND , GET1 , GET2 , LEFT , LEFT1 , LEFT2 , GET0 , RIGHT , RIGHT1 , RIGHT2 , GET , ASSOCS , CSYM , CASSOC , 0";
addthmtextdep2 "CASSOC" "CASSOC , AND , 0";
addthmtextdep2 "CSYM" "CSYM , AND , 0";
addthmtextdep2 "AXIOM" "AXIOM , AND , OR , NOT1 , IF , IGNOREFIRST , 0";
addthmtextdep2 "IFR" "IFR , IF , NOT1 , OR , AND , IGNOREFIRST , 0";
addthmtextdep2 "IFL" "IFL , IF , NOT1 , OR , AND , IGNOREFIRST , 0";
addthmtextdep2 "ORR" "ORR , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "ORL" "ORL , OR , NOT1 , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "ANDR" "ANDR , AND , OR , NOT1 , IF , IGNOREFIRST , 0";
addthmtextdep2 "ANDL" "ANDL , AND , IF , NOT1 , OR , IGNOREFIRST , 0";
addthmtextdep2 "NEGR" "NEGR , NOT1 , OR , AND , IF , IGNOREFIRST , 0";
addthmtextdep2 "NEGL" "NEGL , NOT1 , AND , IF , OR , IGNOREFIRST , 0";
addthmtextdep2 "SELFLABEL" "SELFLABEL , IGNOREFIRST , 0";
addthmtextdep2 "UNIV_SWITCH" "UNIV_SWITCH , forall , 0";
addthmtextdep2 "REWRITE_ENGINE" "UCT , UCT1 , FORALLDIST , forall , AND , UCT2 , 0";
addthmtextdep2 "SUB_REWRITE_TAC" "AND , IGNOREFIRST , REWRITE_WITH_EQUATION , LEFT , LEFT1 , LEFT2 , REFLEX , (?x ** ?y) , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , forall , REWRITE_WITH_CONJUNCTION , RCT2 , CSYM , LCT0 , RCT , RCT1 , ELIM_ASSERT , ASSERT , RIGHT , RIGHT1 , RIGHT2 , AT , CID , LCT2 , LCT , LCT1 , REWRITE_WITH_UNIVERSAL_EQUATION , UET , REWRITE_WITH_UNIVERSAL_CONJUNCTION , SUB_REWRITE_TAC , REWRITE_ENGINE , UCT , UET1 , UNIV_EQ , UET2 , UCT1 , FORALLDIST , UCT2 , 0";
addthmtextdep2 "REWRITE_WITH_CONJUNCTION" "AND , IGNOREFIRST , REWRITE_WITH_EQUATION , LEFT , LEFT1 , LEFT2 , REFLEX , (?x ** ?y) , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , forall , REWRITE_WITH_CONJUNCTION , RCT2 , CSYM , LCT0 , RCT , RCT1 , ELIM_ASSERT , ASSERT , RIGHT , RIGHT1 , RIGHT2 , AT , CID , LCT2 , LCT , LCT1 , REWRITE_WITH_UNIVERSAL_EQUATION , UET , REWRITE_WITH_UNIVERSAL_CONJUNCTION , SUB_REWRITE_TAC , REWRITE_ENGINE , UCT , UET1 , UNIV_EQ , UET2 , UCT1 , FORALLDIST , UCT2 , 0";
addthmtextdep2 "LCT" "LCT , LCT1 , ELIM_ASSERT , ASSERT , LEFT , LEFT1 , LEFT2 , RIGHT , RIGHT1 , RIGHT2 , AT , (?x ** ?y) , REFLEX , LCT2 , LCT0 , AND , CID , RCT2 , CSYM , 0";
addthmtextdep2 "LCT1" "LCT1 , ELIM_ASSERT , ASSERT , LEFT , LEFT1 , LEFT2 , RIGHT , RIGHT1 , RIGHT2 , AT , (?x ** ?y) , REFLEX , LCT2 , LCT0 , AND , CID , RCT2 , CSYM , 0";
addthmtextdep2 "RCT" "RCT , RCT1 , ELIM_ASSERT , ASSERT , LEFT , LEFT1 , LEFT2 , RIGHT , RIGHT1 , RIGHT2 , AT , (?x ** ?y) , REFLEX , RCT2 , CSYM , AND , LCT0 , CID , LCT2 , 0";
addthmtextdep2 "RCT1" "RCT1 , ELIM_ASSERT , ASSERT , LEFT , LEFT1 , LEFT2 , RIGHT , RIGHT1 , RIGHT2 , AT , (?x ** ?y) , REFLEX , RCT2 , CSYM , AND , LCT0 , CID , LCT2 , 0";
addthmtextdep2 "LCT2" "LCT2 , LEFT , LEFT1 , LEFT2 , LCT0 , AND , REFLEX , (?x ** ?y) , 0";
addthmtextdep2 "RCT2" "RCT2 , LEFT , LEFT1 , LEFT2 , CSYM , AND , LCT0 , REFLEX , (?x ** ?y) , 0";
addthmtextdep2 "LCT0" "LCT0 , AND , 0";
addthmtextdep2 "ELIM_ASSERT" "ELIM_ASSERT , ASSERT , LEFT , LEFT1 , LEFT2 , RIGHT , RIGHT1 , RIGHT2 , AT , (?x ** ?y) , REFLEX , 0";
addthmtextdep2 "REWRITE_WITH_UNIVERSAL_CONJUNCTION" "REWRITE_WITH_UNIVERSAL_CONJUNCTION , forall , AND , IGNOREFIRST , UET , UET1 , UNIV_EQ , UET2 , UCT , UCT1 , FORALLDIST , UCT2 , 0";
addthmtextdep2 "REWRITE_WITH_UNIVERSAL_EQUATION" "REWRITE_WITH_UNIVERSAL_EQUATION , forall , IGNOREFIRST , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , UET , UET1 , UNIV_EQ , UET2 , 0";
addthmtextdep2 "UET" "UET , UET1 , UNIV_EQ , forall , UET2 , 0";
addthmtextdep2 "UET2" "UET2 , UNIV_EQ , forall , 0";
addthmtextdep2 "UET1" "UET1 , UNIV_EQ , forall , 0";
addthmtextdep2 "UNIV_EQ" "UNIV_EQ , forall , 0";
addthmtextdep2 "REWRITE_WITH_EQUATION" "REWRITE_WITH_EQUATION , IGNOREFIRST , LEFT , LEFT1 , LEFT2 , REFLEX , (?x ** ?y) , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , 0";
addthmtextdep2 "EVERYWHERE2" "STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , 0";
addthmtextdep2 "EVERYWHERE_ABS" "EVERYWHERE_ABS , 0";
addthmtextdep2 "EVERYWHERE_PREFIX" "EVERYWHERE_PREFIX , 0";
addthmtextdep2 "EVERYWHERE_INFIX" "EVERYWHERE_INFIX , 0";
addthmtextdep2 "STRONG_EVERYWHERE_CASE" "STRONG_EVERYWHERE_CASE , 0";
addthmtextdep2 "REFLEX" "REFLEX , 0";
addthmtextdep2 "UCT" "UCT , UCT1 , FORALLDIST , forall , AND , UCT2 , 0";
addthmtextdep2 "UCT2" "UCT2 , FORALLDIST , forall , AND , 0";
addthmtextdep2 "UCT1" "UCT1 , FORALLDIST , forall , AND , 0";
addthmtextdep2 "FORALLDIST" "FORALLDIST , forall , AND , 0";
addthmtextdep2 "REWRITE_TAC" "RCT2 , LEFT , LEFT1 , LEFT2 , CSYM , AND , LCT0 , REFLEX , (?x ** ?y) , 0";
addthmtextdep2 "STRONG_REWRITE_WITH_EQUATION" "STRONG_REWRITE_WITH_EQUATION , REFLEX , (?x $ ?y) , (?x ** ?y) , 0";
addthmtextdep2 "UNIV_EQ_TAC" "UNIV_EQ_TAC , forall , LEFT , LEFT1 , LEFT2 , UNIV_EQ , (?x $ ?y) , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , 0";
addthmtextdep2 "EVERYWHERE" "EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , 0";
addthmtextdep2 "EVERYWHERE_CASE" "EVERYWHERE_CASE , 0";
addthmtextdep2 "UNIV_TAC" "UNIV_TAC , forall , LEFT , LEFT1 , LEFT2 , (?x $ ?y) , LEFT_CASE , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , PIVOT , HYP , 0";
addthmtextdep2 "PIVOT" "PIVOT , LEFT_CASE , HYP , 0";
addthmtextdep2 "HYP" "HYP , 0";
addthmtextdep2 "9pt26" "9pt26 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "forsomer" "forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "forallr" "forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "P2" "P2 , 0";
addthmtextdep2 "P1" "P1 , 0";
addthmtextdep2 "9pt25" "9pt25 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt24" "9pt24 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt23" "9pt23 , forsome , forall , NOT1 , forsomer , forallr , P1 , P2 , IF , OR , AND , IFF , 0";
addthmtextdep2 "9pt22" "9pt22 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , forsome , 0";
addthmtextdep2 "9pt21" "9pt21 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt20" "9pt20 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt18c" "9pt18c , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt18b" "9pt18b , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt18a" "9pt18a , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt11" "9pt11 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt10" "9pt10 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt8" "9pt8 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt7" "9pt7 , forall , NOT1 , forallr , P1 , P2 , IF , OR , AND , IFF , 0";
addthmtextdep2 "9pt6" "9pt6 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt5" "9pt5 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt4d" "9pt4d , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "9pt4c" "9pt4c , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "9pt4b" "9pt4b , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt4a" "9pt4a , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "9pt3c" "9pt3c , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "9pt3b" "9pt3b , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "9pt3a" "9pt3a , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt19E" "8pt19E , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt19U" "8pt19U , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt16E" "8pt16E , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt16U" "8pt16U , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt15E" "8pt15E , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt15U" "8pt15U , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt13E" "8pt13E , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "8pt13U" "8pt13U , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORSOMERBOOL3" "FORSOMERBOOL3 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORSOMERBOOL2" "FORSOMERBOOL2 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORALLRBOOL3" "FORALLRBOOL3 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORALLRBOOL2" "FORALLRBOOL2 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "UNIV_RANGE_2" "UNIV_RANGE_2 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , forsome , 0";
addthmtextdep2 "8pt14E" "8pt14E , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "L" "L , LEFT1 , LEFT2 , 0";
addthmtextdep2 "R" "R , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "8pt14U" "8pt14U , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "9pt30b" "9pt30b , forsome , forall , NOT1 , IF , OR , AND , FORALLDROP , ASSERT , AT , (?x ** ?y) , 0";
addthmtextdep2 "9pt30a" "9pt30a , IF , NOT1 , OR , AND , LEFT , LEFT1 , LEFT2 , forsome , forall , 0";
addthmtextdep2 "9pt16b" "9pt16b , forall , FORALLDROP , ASSERT , AT , (?x ** ?y) , 0";
addthmtextdep2 "9pt16a" "9pt16a , 9pt16a1 , LEFT , LEFT1 , LEFT2 , forall , 0";
addthmtextdep2 "9pt16a1" "9pt16a1 , LEFT , LEFT1 , LEFT2 , forall , 0";
addthmtextdep2 "PRE9pt12" "PRE9pt12 , forall , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CONVERT_IMP_2" "CONVERT_IMP_2 , ASSERT , CRULE1 , AND , DID , OR , NOT1 , FDEF , IF , 0";
addthmtextdep2 "FDEF" "FDEF , NOT1 , 0";
addthmtextdep2 "DID" "DID , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "CONVERT_IMP_1" "CONVERT_IMP_1 , IF , NOT1 , OR , AND , 3pt76b , LEFT , LEFT1 , LEFT2 , IRULE2 , ASSERT , (?x $ ?y) , 0";
addthmtextdep2 "3pt76b" "3pt76b , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "ONEPOINT" "ONEPOINT , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "UNIV_RANGE_1" "UNIV_RANGE_1 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "forsomer3" "forsomer3 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , forsome , 0";
addthmtextdep2 "forsomer2" "forsomer2 , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORSOMERBOOL" "FORSOMERBOOL , forsomer , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "forallr2" "forallr2 , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "FORALLRBOOL" "FORALLRBOOL , forallr , forall , P1 , P2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "EQ_TRANS" "EQ_TRANS , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "COMMUTE_LEVEL_QUANT" "COMMUTE_LEVEL_QUANT , forall , IFF , NOT1 , COUNTER1 , 0";
addthmtextdep2 "COUNTER1" "COUNTER1 , NOT1 , 0";
addthmtextdep2 "ALT_QUANT_AGAIN" "ALT_QUANT_AGAIN , forsome , forall , NOT1 , IF , OR , AND , COUNTER1 , 0";
addthmtextdep2 "TAB_CEX" "TAB_CEX , forall , ODDCHOICE , BOOLDEF , CEX_TAC , NOT1 , 0";
addthmtextdep2 "CEX_TAC" "CEX_TAC , forall , NOT1 , 0";
addthmtextdep2 "BOOLDEF" "BOOLDEF , 0";
addthmtextdep2 "ODDCHOICE" "ODDCHOICE , 0";
addthmtextdep2 "TAB_WITNESS" "TAB_WITNESS , forsome , forall , NOT1 , CHOICE_TAC , 0";
addthmtextdep2 "CHOICE_TAC" "CHOICE_TAC , forsome , forall , NOT1 , 0";
addthmtextdep2 "ANY_INSTANCE" "ANY_INSTANCE , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "forallcase" "forallcase , forall , 0";
addthmtextdep2 "forsomecase" "forsomecase , forsome , forall , NOT1 , 0";
addthmtextdep2 "CEX" "CEX , forall , NOT1 , 0";
addthmtextdep2 "SUBTYPE" "SUBTYPE , 0";
addthmtextdep2 "COUNTER" "COUNTER , COUNTER1 , NOT1 , 0";
addthmtextdep2 "CHOICE" "CHOICE , forsome , forall , NOT1 , 0";
addthmtextdep2 "ALT_QUANT_IMP" "ALT_QUANT_IMP , forsome , forall , NOT1 , IF , OR , AND , 0";
addthmtextdep2 "TAB_ALL_NEW_2" "TAB_ALL_NEW_2 , forall , 0";
addthmtextdep2 "TAB_ALL_NEW_1" "TAB_ALL_NEW_1 , forall , 0";
addthmtextdep2 "TAB_SOME_NEW_2" "TAB_SOME_NEW_2 , forsome , forall , NOT1 , 0";
addthmtextdep2 "TAB_SOME_NEW_1" "TAB_SOME_NEW_1 , forsome , forall , NOT1 , 0";
addthmtextdep2 "TAB_SOME_2" "TAB_SOME_2 , forsome , forall , NOT1 , 0";
addthmtextdep2 "TAB_ALL_2" "TAB_ALL_2 , forall , 0";
addthmtextdep2 "TAB_SOME" "TAB_SOME , forsome , forall , NOT1 , 0";
addthmtextdep2 "TAB_ALL" "TAB_ALL , forall , 0";
addthmtextdep2 "TAB_XOR_2" "TAB_XOR_2 , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XOR" "XOR , IFF , NOT1 , 0";
addthmtextdep2 "TAB_XOR" "TAB_XOR , XOR , IFF , NOT1 , 0";
addthmtextdep2 "TAB_IFF_2" "TAB_IFF_2 , IFF , 0";
addthmtextdep2 "TAB_IFF" "TAB_IFF , IFF , 0";
addthmtextdep2 "TAB_IF_2" "TAB_IF_2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "TAB_OR_2" "TAB_OR_2 , OR , NOT1 , AND , 0";
addthmtextdep2 "TAB_OR" "TAB_OR , OR , NOT1 , AND , 0";
addthmtextdep2 "TAB_AND" "TAB_AND , AND , 0";
addthmtextdep2 "TAB_NOT" "TAB_NOT , NOT1 , 0";
addthmtextdep2 "FORSOME_NOTFORALL" "FORSOME_NOTFORALL , forall , NOT1 , forsome , 0";
addthmtextdep2 "FORALL_NOTFORSOME" "FORALL_NOTFORSOME , forsome , forall , NOT1 , 0";
addthmtextdep2 "FORSOMEDIST2" "FORSOMEDIST2 , forsome , forall , NOT1 , AND , 0";
addthmtextdep2 "FORALLORDIST" "FORALLORDIST , forall , OR , NOT1 , AND , 0";
addthmtextdep2 "FORALLOR" "FORALLOR , forall , OR , NOT1 , AND , 0";
addthmtextdep2 "FORALLNOT" "FORALLNOT , forall , NOT1 , AND , 0";
addthmtextdep2 "NOTFORALL" "NOTFORALL , forall , NOT1 , OR , AND , 0";
addthmtextdep2 "FORALLSWITCH2" "FORALLSWITCH2 , forall , 0";
addthmtextdep2 "FORSOMEDROP" "FORSOMEDROP , forsome , forall , NOT1 , ASSERT , 0";
addthmtextdep2 "FORALLSWITCH" "FORALLSWITCH , forall , 0";
addthmtextdep2 "DINSTANTIATEF1" "DINSTANTIATEF1 , forsome , forall , NOT1 , OR , AND , 0";
addthmtextdep2 "DINSTANTIATE" "DINSTANTIATE , forsome , forall , NOT1 , OR , AND , 0";
addthmtextdep2 "INSTANTIATE" "INSTANTIATE , forall , AND , 0";
addthmtextdep2 "TESTSIMP" "TESTSIMP , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , XOR , IFF , NOT1 , (?x $ ?y) , IDEF2 , IF , OR , AND , CASEPREP , ASSERT , ALLASSERTS , CONDSIMP , DID , DZER , DSYM , (?x ** ?y) , XORALTDEF , BALTDEF , DRULE1 , DRULE2 , RL , CRULE1 , CRULE2 , CID , CZER , 0";
addthmtextdep2 "CONDSIMP" "CONDSIMP , ASSERT , DID , OR , NOT1 , AND , DZER , DSYM , (?x ** ?y) , XORALTDEF , IFF , BALTDEF , DRULE1 , DRULE2 , RL , CRULE1 , CRULE2 , CID , CZER , 0";
addthmtextdep2 "CZER" "CZER , AND , 0";
addthmtextdep2 "CRULE2" "CRULE2 , ASSERT , AND , 0";
addthmtextdep2 "DRULE2" "DRULE2 , ASSERT , OR , NOT1 , AND , 0";
addthmtextdep2 "BALTDEF" "BALTDEF , IFF , AND , NOT1 , OR , 0";
addthmtextdep2 "XORALTDEF" "XORALTDEF , NOT1 , AND , OR , IFF , 0";
addthmtextdep2 "CASEPREP" "CASEPREP , ASSERT , ALLASSERTS , 0";
addthmtextdep2 "ALLASSERTS" "ASSERT , ALLASSERTS , 0";
addthmtextdep2 "IDEF2" "IDEF2 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CONDCASES2" "CONDCASES2 , ASSERT , AND , NOT1 , OR , 0";
addthmtextdep2 "IMPTOCOND" "IMPTOCOND , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "CONDCASES" "CONDCASES , AND , NOT1 , OR , ASSERT , 0";
addthmtextdep2 "CONDCASESL1F" "CONDCASESL1F , AND , NOT1 , OR , IFF , 0";
addthmtextdep2 "CONDCASESL1" "CONDCASESL1 , AND , NOT1 , OR , IFF , 0";
addthmtextdep2 "BEQSUBS" "BEQSUBS , IFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "EQSYMM2" "EQSYMM2 , 0";
addthmtextdep2 "CONVORAND" "CONVORAND , AND , BID2 , IFF , ASSERT , RIGHT , RIGHT1 , RIGHT2 , BID , BASSOC , BRULE3 , OR , NOT1 , 0";
addthmtextdep2 "BRULE3" "BRULE3 , ASSERT , IFF , 0";
addthmtextdep2 "BASSOC" "BASSOC , IFF , 0";
addthmtextdep2 "BID" "BID , IFF , 0";
addthmtextdep2 "BID2" "BID2 , IFF , ASSERT , 0";
addthmtextdep2 "CONVORIMP" "CONVORIMP , IF , NOT1 , OR , AND , BID , IFF , BRULE2 , ASSERT , 0";
addthmtextdep2 "BRULE2" "BRULE2 , ASSERT , IFF , 0";
addthmtextdep2 "CONVANDOR" "CONVANDOR , OR , NOT1 , AND , DID , ASSERT , FDEF , CONVANDIMP , IF , BID , IFF , BRULE2 , 0";
addthmtextdep2 "CONVANDIMP" "CONVANDIMP , IF , NOT1 , OR , AND , BID , IFF , BRULE2 , ASSERT , 0";
addthmtextdep2 "CONVIMPOR" "CONVIMPOR , OR , NOT1 , AND , DID , ASSERT , FDEF , IF , 0";
addthmtextdep2 "CONVIMPAND" "CONVIMPAND , AND , CID , ASSERT , IF , NOT1 , OR , 0";
addthmtextdep2 "IDIS4" "IDIS4 , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "IDIS3" "IDIS3 , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "IDIS2" "IDIS2 , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "IDIS1" "IDIS1 , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "3pt89" "3pt89 , AND , NOT1 , OR , ASSERT , 0";
addthmtextdep2 "AP3pt88" "AP3pt88 , OR , NOT1 , AND , THMAP , ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt88 , 0";
addthmtextdep2 "3pt88" "3pt88 , ASSERT , OR , NOT1 , AND , 0";
addthmtextdep2 "THMAP" "THMAP , ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 0";
addthmtextdep2 "MKASRT" "ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , 0";
addthmtextdep2 "ASRTRIGHT" "LEFT , LEFT1 , LEFT2 , ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , RL , 0";
addthmtextdep2 "ASRTLEFT" "RIGHT , RIGHT1 , RIGHT2 , ASSRTBOTH , ASSERT , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , 0";
addthmtextdep2 "ASSRTBOTH" "ASSRTBOTH , ASSERT , 0";
addthmtextdep2 "3pt87" "3pt87 , AND , 0";
addthmtextdep2 "AP3pt86b" "AP3pt86b , OR , NOT1 , AND , IF , THMAP , ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt86b , 0";
addthmtextdep2 "3pt86b" "3pt86b , ASSERT , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "AP3pt86a" "AP3pt86a , IF , NOT1 , OR , AND , THMAP , ASSRTBOTH , ASSERT , RIGHT , RIGHT1 , RIGHT2 , ASRTLEFT , MKASRT , ASRTRIGHT , LEFT , LEFT1 , LEFT2 , RL , (?x ** ?y) , 3pt86a , 0";
addthmtextdep2 "3pt86a" "3pt86a , ASSERT , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt85b" "3pt85b , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "3pt85a" "3pt85a , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt84c" "3pt84c , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "3pt84b" "3pt84b , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt83F" "3pt83F , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt83" "3pt83 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt82cF" "3pt82cF , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "3pt82c" "3pt82c , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "3pt82bF" "3pt82bF , IFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt82b" "3pt82b , IFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt82aF" "3pt82aF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt82a" "3pt82a , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt81F" "3pt81F , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "3pt81" "3pt81 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "3pt79F" "3pt79F , ASSERT , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt79" "3pt79 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "3pt78" "3pt78 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "MOPF" "MOPF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "MOP" "MOP , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt76eF" "3pt76eF , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76e" "3pt76e , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76dF" "3pt76dF , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76d" "3pt76d , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76cF" "3pt76cF , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76c" "3pt76c , AND , OR , NOT1 , IF , 0";
addthmtextdep2 "3pt76bF" "3pt76bF , AND , IF , NOT1 , OR , 0";
addthmtextdep2 "3pt76aF" "3pt76aF , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "3pt76a" "3pt76a , OR , NOT1 , AND , IF , 0";
addthmtextdep2 "3pt75F" "3pt75F , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt75" "3pt75 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt74" "3pt74 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "ILID" "ILID , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "IRZERF" "IRZERF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IRZER" "IRZER , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IREFF" "IREFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IREF" "IREF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt70" "3pt70 , OR , NOT1 , AND , IF , IFF , 0";
addthmtextdep2 "3pt69" "3pt69 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt68F" "3pt68F , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt68" "3pt68 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt67F" "3pt67F , ASSERT , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt67" "3pt67 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "3pt66" "3pt66 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt64" "3pt64 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt65" "3pt65 , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "3pt62" "3pt62 , IFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IDISB" "IDISB , IFF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CONTP" "CONTP , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IDEF3" "IDEF3 , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "XALTDEF" "XALTDEF , XOR , IFF , NOT1 , AND , OR , 0";
addthmtextdep2 "REPL" "REPL , IFF , AND , 0";
addthmtextdep2 "3pt50" "3pt50 , IFF , AND , 0";
addthmtextdep2 "3pt49" "3pt49 , AND , IFF , 0";
addthmtextdep2 "3pt48" "3pt48 , NOT1 , AND , IFF , 0";
addthmtextdep2 "CDISD" "CDISD , OR , NOT1 , AND , 0";
addthmtextdep2 "DDISC" "DDISC , AND , OR , NOT1 , 0";
addthmtextdep2 "3pt44b" "3pt44b , NOT1 , AND , OR , 0";
addthmtextdep2 "3pt44a" "3pt44a , NOT1 , OR , AND , 0";
addthmtextdep2 "L3pt43" "L3pt43 , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "3pt43bF" "3pt43bF , ASSERT , AND , OR , NOT1 , 0";
addthmtextdep2 "3pt43b" "3pt43b , AND , OR , NOT1 , ASSERT , 0";
addthmtextdep2 "3pt43aF" "3pt43aF , ASSERT , OR , NOT1 , AND , 0";
addthmtextdep2 "3pt43a" "3pt43a , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "CCON" "CCON , NOT1 , AND , 0";
addthmtextdep2 "CDISC" "CDISC , AND , 0";
addthmtextdep2 "CZERF" "CZERF , AND , 0";
addthmtextdep2 "CIDEM" "CIDEM , AND , ASSERT , 0";
addthmtextdep2 "DUAL" "DUAL , REMFLIP , BRULE1 , IFF , ASSERT , CRULE1 , AND , DRULE1 , OR , NOT1 , NRULE1 , XRULE1 , XOR , AT , AF , TWOASSERTS , DUBNEG2 , FDEF , NEGF , BFLIP , XORFLIP , DEMa , DEMb , REMA , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , FLIPALL , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , FLIPPASTC , 0";
addthmtextdep2 "FLIPALL" "FLIPALL , ASSERT , NOT1 , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , DUBNEG2 , BRULE1 , XRULE1 , DRULE1 , CRULE1 , 0";
addthmtextdep2 "SFLIPALL" "ASSERT , NOT1 , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTC" "AND , NOT1 , ASSERT , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , OR , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTD" "OR , NOT1 , AND , ASSERT , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTX" "XOR , IFF , NOT1 , ASSERT , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTB" "IFF , NOT1 , ASSERT , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , XOR , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTN" "NOT1 , ASSERT , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "FLIPPASTA" "ASSERT , NOT1 , FLIPPASTA , SFLIPALL , FLIPPASTN , FLIPPASTB , IFF , XOR , FLIPPASTX , FLIPPASTD , OR , AND , FLIPPASTC , FDEF , NEGF , 0";
addthmtextdep2 "REMFLIP" "REMFLIP , BRULE1 , IFF , ASSERT , CRULE1 , AND , DRULE1 , OR , NOT1 , NRULE1 , XRULE1 , XOR , AT , AF , TWOASSERTS , DUBNEG2 , FDEF , NEGF , BFLIP , XORFLIP , DEMa , DEMb , REMA , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "SREMFLIP" "FDEF , NOT1 , NEGF , BFLIP , IFF , XOR , XORFLIP , DEMa , OR , AND , DEMb , REMA , ASSERT , NOTCLEAN , ASSERTCLEAN , LEFT , LEFT1 , LEFT2 , SREMFLIP , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "ASSERTCLEAN" "ASSERTCLEAN , ASSERT , 0";
addthmtextdep2 "NOTCLEAN" "NOTCLEAN , NOT1 , 0";
addthmtextdep2 "REMA" "REMA , NOT1 , ASSERT , 0";
addthmtextdep2 "DEMb" "DEMb , NOT1 , AND , OR , 0";
addthmtextdep2 "DEMa" "DEMa , NOT1 , OR , AND , 0";
addthmtextdep2 "XORFLIP" "XORFLIP , XOR , IFF , NOT1 , 0";
addthmtextdep2 "BFLIP" "BFLIP , IFF , NOT1 , XOR , 0";
addthmtextdep2 "NEGF" "NEGF , NOT1 , 0";
addthmtextdep2 "TWOASSERTS" "TWOASSERTS , ASSERT , 0";
addthmtextdep2 "AF" "AF , ASSERT , 0";
addthmtextdep2 "XRULE1" "XRULE1 , XOR , IFF , NOT1 , ASSERT , 0";
addthmtextdep2 "NRULE1" "NRULE1 , NOT1 , ASSERT , 0";
addthmtextdep2 "BRULE1" "BRULE1 , IFF , ASSERT , 0";
addthmtextdep2 "GR3" "GR3 , IFF , AND , OR , NOT1 , 0";
addthmtextdep2 "GR2" "GR2 , IFF , OR , NOT1 , AND , 0";
addthmtextdep2 "3pt32F" "3pt32F , ASSERT , OR , NOT1 , AND , IFF , 0";
addthmtextdep2 "3pt32" "3pt32 , OR , NOT1 , AND , IFF , ASSERT , 0";
addthmtextdep2 "DDISD" "DDISD , OR , NOT1 , AND , 0";
addthmtextdep2 "DZERF" "DZERF , OR , NOT1 , AND , 0";
addthmtextdep2 "MUTINT" "MUTINT , IFF , XOR , NOT1 , 0";
addthmtextdep2 "MUTASSOC" "MUTASSOC , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XORASSOC" "XORASSOC , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XORSYM" "XORSYM , XOR , IFF , NOT1 , 0";
addthmtextdep2 "NEQ" "NEQ , IFF , NOT1 , 0";
addthmtextdep2 "3pt15bF" "3pt15bF , NOT1 , IFF , 0";
addthmtextdep2 "3pt15b" "3pt15b , NOT1 , IFF , 0";
addthmtextdep2 "3pt15a" "3pt15a , IFF , NOT1 , 0";
addthmtextdep2 "3pt14" "3pt14 , XOR , IFF , NOT1 , 0";
addthmtextdep2 "3pt11" "3pt11 , NOT1 , IFF , 0";
addthmtextdep2 "APLZ" "APLZ , AND , RIGHT , RIGHT1 , RIGHT2 , LZ , (?x ** ?y) , 0";
addthmtextdep2 "LZ" "LZ , AND , 0";
addthmtextdep2 "GCLEAN" "RL , GCLEAN , NRULE2 , ASSERT , NOT1 , NRULE1 , STL , STR , STT , ALLASSERTS , RIGHT , RIGHT1 , RIGHT2 , LEFT , LEFT1 , LEFT2 , (?x ** ?y) , 0";
addthmtextdep2 "STT" "STT , ASSERT , 0";
addthmtextdep2 "STR" "STR , ASSERT , 0";
addthmtextdep2 "STL" "STL , ASSERT , 0";
addthmtextdep2 "NRULE2" "NRULE2 , ASSERT , NOT1 , 0";
addthmtextdep2 "EQT" "EQT , ASSERT , 0";
addthmtextdep2 "BCONV" "BCONV , IFF , ASSERT , 0";
addthmtextdep2 "ASRTEQ" "ASRTEQ , ASSERT , 0";
addthmtextdep2 "CONS" "CONS , IF , NOT1 , OR , AND , CONVIF , 0";
addthmtextdep2 "CONVIF" "CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "IDEF" "IDEF , IF , NOT1 , OR , AND , IFF , 0";
addthmtextdep2 "GR" "GR , AND , OR , NOT1 , IFF , 0";
addthmtextdep2 "DXMF" "DXMF , NOT1 , OR , AND , 0";
addthmtextdep2 "BIDF" "BIDF , IFF , 0";
addthmtextdep2 "DXM" "DXM , NOT1 , OR , AND , 0";
addthmtextdep2 "DDIS" "DDIS , IFF , OR , NOT1 , AND , 0";
addthmtextdep2 "DIDEM" "DIDEM , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "XORDEF" "XORDEF , XOR , IFF , NOT1 , 0";
addthmtextdep2 "BDIS" "BDIS , IFF , NOT1 , 0";
addthmtextdep2 "BSYM" "BSYM , IFF , 0";
addthmtextdep2 "PROVETAUT2" "PROVETAUT2 , BRULE1 , IFF , ASSERT , CRULE1 , AND , DRULE1 , OR , NOT1 , NRULE1 , XRULE1 , XOR , IRULE1 , IF , CNRULE1 , CONVIF , ASSERT2 , PROVETAUT , NEWTAUT , CASEINTRO , ALT_PUSH , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , ASSERT_EXP , ALL_EXP , NOT_EXP , AND_EXP , OR_EXP , IF_EXP , IFF_EXP , XOR_EXP , CN_EXP , MAKE_CASE , ODDCHOICE , EQUATION , BOOLDEF , 0";
addthmtextdep2 "PROVETAUT" "PROVETAUT , NEWTAUT , CASEINTRO , ALT_PUSH , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , ASSERT_EXP , ASSERT , ALL_EXP , NOT_EXP , NOT1 , AND_EXP , AND , OR_EXP , OR , IF_EXP , IF , IFF_EXP , IFF , XOR_EXP , XOR , CN_EXP , CONVIF , MAKE_CASE , ODDCHOICE , EQUATION , BOOLDEF , 0";
addthmtextdep2 "NEWTAUT" "NEWTAUT , CASEINTRO , ALT_PUSH , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , ASSERT_EXP , ASSERT , ALL_EXP , NOT_EXP , NOT1 , AND_EXP , AND , OR_EXP , OR , IF_EXP , IF , IFF_EXP , IFF , XOR_EXP , XOR , CN_EXP , CONVIF , MAKE_CASE , ODDCHOICE , EQUATION , BOOLDEF , 0";
addthmtextdep2 "MAKE_CASE" "MAKE_CASE , ODDCHOICE , EQUATION , BOOLDEF , 0";
addthmtextdep2 "EQUATION" "EQUATION , 0";
addthmtextdep2 "ALL_EXP" "ASSERT_EXP , ASSERT , ALL_EXP , NOT_EXP , NOT1 , AND_EXP , AND , OR_EXP , OR , IF_EXP , IF , IFF_EXP , IFF , XOR_EXP , XOR , CN_EXP , CONVIF , 0";
addthmtextdep2 "CN_EXP" "CN_EXP , CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "XOR_EXP" "XOR_EXP , XOR , IFF , NOT1 , 0";
addthmtextdep2 "IFF_EXP" "IFF_EXP , IFF , 0";
addthmtextdep2 "IF_EXP" "IF_EXP , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "AND_EXP" "AND_EXP , AND , 0";
addthmtextdep2 "NOT_EXP" "NOT_EXP , NOT1 , 0";
addthmtextdep2 "ASSERT_EXP" "ASSERT_EXP , ASSERT , 0";
addthmtextdep2 "TOPDOWN" "BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TOPDOWN_PREFIX" "RIGHT , RIGHT1 , RIGHT2 , BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , 0";
addthmtextdep2 "TOPDOWN_INFIX" "RL , BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "TOPDOWN_CASE" "BOTH_CASES , TOPDOWN_CASE , TOPDOWN , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "BOTH_CASES" "BOTH_CASES , 0";
addthmtextdep2 "ALT_PUSH" "CASEINTRO , ALT_PUSH , EVERYWHERE_CASE , EVERYWHERE , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , 0";
addthmtextdep2 "CNRULE1" "CNRULE1 , CONVIF , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "IRULE1" "IRULE1 , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "CNRULE3" "CNRULE3 , ASSERT , CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CNRULE2" "CNRULE2 , ASSERT , CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "XRULE3" "XRULE3 , ASSERT , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XRULE2" "XRULE2 , ASSERT , XOR , IFF , NOT1 , 0";
addthmtextdep2 "CRULE3" "CRULE3 , ASSERT , AND , 0";
addthmtextdep2 "DRULE3" "DRULE3 , ASSERT , OR , NOT1 , AND , 0";
addthmtextdep2 "NONTRIV2a" "NONTRIV2a , 0";
addthmtextdep2 "FORSOMEBOOL2" "FORSOMEBOOL2 , forsome , forall , NOT1 , 0";
addthmtextdep2 "BOOLDEF2" "BOOLDEF2 , 0";
addthmtextdep2 "ANDUNPACK" "ANDUNPACK , AND , 0";
addthmtextdep2 "DUBNEG" "DUBNEG , NOT1 , 0";
addthmtextdep2 "BOOLDEF0" "BOOLDEF0 , 0";
addthmtextdep2 "UNPACK" "UNPACK , 0";
addthmtextdep2 "EXAMPLE1" "EXAMPLE1 , forall , forsome , NOT1 , 0";
addthmtextdep2 "CNBOOL" "CNBOOL , CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CONSCIN" "CONSCIN , CONVIF , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "CONTYPE" "CONTYPE , CONVIF , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "IMPTYPE" "IMPTYPE , IF , NOT1 , OR , AND , ASSERT , 0";
addthmtextdep2 "CTYPE" "CTYPE , AND , ASSERT , 0";
addthmtextdep2 "DTYPE" "DTYPE , OR , NOT1 , AND , ASSERT , 0";
addthmtextdep2 "NTYPE" "NTYPE , NOT1 , ASSERT , 0";
addthmtextdep2 "XORBOOL" "XORBOOL , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XORSCIN" "XORSCIN , XOR , IFF , NOT1 , 0";
addthmtextdep2 "XORTYPE" "XORTYPE , XOR , IFF , NOT1 , ASSERT , 0";
addthmtextdep2 "BTYPE" "BTYPE , IFF , ASSERT , 0";
addthmtextdep2 "ASSERTSCOUT" "ASSERTSCOUT , ASSERT , 0";
addthmtextdep2 "IFFSCIN" "IFFSCIN , IFF , 0";
addthmtextdep2 "IFSCIN" "IFSCIN , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "ORSCIN" "ORSCIN , OR , NOT1 , AND , 0";
addthmtextdep2 "NOTBOOLDROP" "NOTBOOLDROP , NOT1 , 0";
addthmtextdep2 "ANDSCIN" "ANDSCIN , AND , 0";
addthmtextdep2 "IFFBOOL" "IFFBOOL , IFF , 0";
addthmtextdep2 "IFBOOL" "IFBOOL , IF , NOT1 , OR , AND , 0";
addthmtextdep2 "ALTORDEF" "ALTORDEF , OR , NOT1 , AND , 0";
addthmtextdep2 "NOT" "NOT , NOT1 , 0";
addthmtextdep2 "ORBOOL" "ORBOOL , OR , NOT1 , AND , 0";
addthmtextdep2 "ANDBOOL" "ANDBOOL , AND , 0";
addthmtextdep2 "FALSEBOOL" "FALSEBOOL , 0";
addthmtextdep2 "TRUEBOOL" "TRUEBOOL , 0";
addthmtextdep2 "forsome2" "forsome2 , forsome , forall , NOT1 , 0";
addthmtextdep2 "FORSOMEBOOL" "FORSOMEBOOL , forsome , forall , NOT1 , 0";
addthmtextdep2 "NOTBOOL" "NOTBOOL , NOT1 , 0";
addthmtextdep2 "FORALLBOOL" "FORALLBOOL , forall , 0";
addthmtextdep2 "EQBOOL" "EQBOOL , 0";
addthmtextdep2 "EQSYMM" "EQSYMM , 0";
addthmtextdep2 "LAMBDAREMOVE3" "LAMBDAREMOVE3 , BOTH_CASES , LAMBDAREMOVE , LEFT , LEFT1 , LEFT2 , LAMBDAREMOVE2 , IGNOREFIRST , LAMBDAREMOVE1 , RL , 0";
addthmtextdep2 "LAMBDAREMOVE2" "LAMBDAREMOVE3 , BOTH_CASES , LAMBDAREMOVE , LEFT , LEFT1 , LEFT2 , LAMBDAREMOVE2 , IGNOREFIRST , LAMBDAREMOVE1 , RL , 0";
addthmtextdep2 "LAMBDAREMOVE1" "LAMBDAREMOVE3 , BOTH_CASES , LAMBDAREMOVE , LEFT , LEFT1 , LEFT2 , LAMBDAREMOVE2 , IGNOREFIRST , LAMBDAREMOVE1 , RL , 0";
addthmtextdep2 "LAMBDAREMOVE" "LAMBDAREMOVE3 , BOTH_CASES , LAMBDAREMOVE , LEFT , LEFT1 , LEFT2 , LAMBDAREMOVE2 , IGNOREFIRST , LAMBDAREMOVE1 , RL , 0";
addthmtextdep2 "LAMBDAINTRO3" "LAMBDAINTRO3 , BOTH_CASES , LAMBDAINTRO , LEFT , LEFT1 , LEFT2 , LAMBDAINTRO2 , LABELINTRO , IGNOREFIRST , LAMBDAINTRO1 , RL , 0";
addthmtextdep2 "LAMBDAINTRO2" "LAMBDAINTRO3 , BOTH_CASES , LAMBDAINTRO , LEFT , LEFT1 , LEFT2 , LAMBDAINTRO2 , LABELINTRO , IGNOREFIRST , LAMBDAINTRO1 , RL , 0";
addthmtextdep2 "LAMBDAINTRO1" "LAMBDAINTRO3 , BOTH_CASES , LAMBDAINTRO , LEFT , LEFT1 , LEFT2 , LAMBDAINTRO2 , LABELINTRO , IGNOREFIRST , LAMBDAINTRO1 , RL , 0";
addthmtextdep2 "LAMBDAINTRO" "LAMBDAINTRO3 , BOTH_CASES , LAMBDAINTRO , LEFT , LEFT1 , LEFT2 , LAMBDAINTRO2 , LABELINTRO , IGNOREFIRST , LAMBDAINTRO1 , RL , 0";
addthmtextdep2 "LABELINTRO" "LABELINTRO , IGNOREFIRST , 0";
addthmtextdep2 "goto" "goto , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , INPUT_AT , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "INPUT_AT" "INPUT_AT , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "INPUTS2" "upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "upfun" "upfun , 0";
addthmtextdep2 "value" "value , VALUE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "left_case" "left_case , LEFT_CASE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "right_case" "right_case , RIGHT_CASE , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "RIGHT_CASE" "RIGHT_CASE , 0";
addthmtextdep2 "left" "left , LEFT , LEFT1 , LEFT2 , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "right" "right , RIGHT , RIGHT1 , RIGHT2 , upfun , INPUTS2 , (?x ** ?y) , 0";
addthmtextdep2 "up" "up , upfun , 0";
addthmtextdep2 "BINDLABELS" "BINDLABELS , LEFT , LEFT1 , LEFT2 , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , IGNOREFIRST , RIGHT , RIGHT1 , RIGHT2 , ID , Id , APPLYATLABELS , APPLYATLABEL , APPLYATLABEL0 , (?x $ ?y) , 0";
addthmtextdep2 "APPLYATLABELS" "APPLYATLABELS , APPLYATLABEL , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "APPLYATLABEL" "APPLYATLABEL , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "APPLYATLABEL0" "APPLYATLABEL0 , IGNOREFIRST , 0";
addthmtextdep2 "ID" "ID , Id , 0";
addthmtextdep2 "Id" "Id , 0";
addthmtextdep2 "LABELTERM" "LABELTERM , LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_CASE" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_UNARY" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_ABSTRACT" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_SPLIT" "LABELTERMS_FOUND , IGNOREFIRST , LABELTERMS_SPLIT , LABELTERMS , LABELTERMS_ABSTRACT , LABELTERMS_UNARY , LABELTERMS_CASE , 0";
addthmtextdep2 "LABELTERMS_FOUND" "LABELTERMS_FOUND , IGNOREFIRST , 0";
addthmtextdep2 "POP_CASE" "POP_CASE , IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "POP_CASE_1" "IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "POP_CASE_2" "IGNOREFIRST , POP_CASE_1 , POP_CASE_2 , (?x ** ?y) , 0";
addthmtextdep2 "ANTI_UNEVAL_TAC" "ANTI_UNEVAL_TAC , FNDIST , BOTH_CASES , 0";
addthmtextdep2 "FNDIST" "FNDIST , 0";
addthmtextdep2 "TYPEBIND" "TYPEBIND , STRONG_EVERYWHERE_CASE , EVERYWHERE2 , EVERYWHERE_INFIX , EVERYWHERE_PREFIX , EVERYWHERE_ABS , TYPES , (?x $ ?y) , 0";
addthmtextdep2 "TYPES" "TYPES , 0";
addthmtextdep2 "UNEVAL_TAC" "UNEVAL_TAC , BOTH_CASES , FNDIST , 0";
addthmtextdep2 "ALLASSOCS" "RIGHT , RIGHT1 , RIGHT2 , ALLASSOCS , ASSOCS , 0";
addthmtextdep2 "VIEWCASES" "VIEWCASES , 0";
addthmtextdep2 "LOOP_TAC" "LOOP_TAC , IGNOREFIRST , STOPLOOP , ALL_STEPS , RIGHT , RIGHT1 , RIGHT2 , STARTLOOP , 0";
addthmtextdep2 "ALL_STEPS" "IGNOREFIRST , STOPLOOP , ALL_STEPS , RIGHT , RIGHT1 , RIGHT2 , STARTLOOP , 0";
addthmtextdep2 "STARTLOOP" "STARTLOOP , IGNOREFIRST , 0";
addthmtextdep2 "STOPLOOP" "STOPLOOP , IGNOREFIRST , 0";
addthmtextdep2 "LISTBIND" "PAIRBIND , LEFT , LEFT1 , LEFT2 , VALUE , RIGHT , RIGHT1 , RIGHT2 , PI2F , P2 , PI1F , P1 , LISTBIND , 0";
addthmtextdep2 "PAIRBIND" "PAIRBIND , LEFT , LEFT1 , LEFT2 , VALUE , RIGHT , RIGHT1 , RIGHT2 , PI2F , P2 , PI1F , P1 , 0";
addthmtextdep2 "PI1F" "PI1F , P1 , 0";
addthmtextdep2 "PI2F" "PI2F , P2 , 0";
addthmtextdep2 "VALUE0" "VALUE0 , 0";
addthmtextdep2 "REVPIVOT" "REVPIVOT , LEFT_CASE , HYP , 0";
addthmtextdep2 "PCASEINTRO" "PCASEINTRO , 0";
addthmtextdep2 "PI2" "PI2 , P2 , 0";
addthmtextdep2 "PI1" "PI1 , P1 , 0";
addthmtextdep2 "NONTRIV" "NONTRIV , 0";
addthmtextdep2 "p2" "p2 , 0";
addthmtextdep2 "p1" "p1 , 0";
addthmtextdep2 "COMP" "COMP , 0";
quit();
