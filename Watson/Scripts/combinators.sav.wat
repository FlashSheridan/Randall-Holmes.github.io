declareconstant "BSTRONGSTEP";
declareconstant "BETASTEP";
declareconstant "STRONGSTEP";
declareconstant "ETASTEP";
declareconstant "CCH2";
declareconstant "BBH2";
declareconstant "SSH2";
declareconstant "SKI";
declareconstant "HDRED2";
declareconstant "CCH";
declareconstant "BBH";
declareconstant "SSH";
declareconstant "HDRED";
declareconstant "RED2STEP";
declareconstant "SR3a";
declareconstant "SR3";
declareconstant "ABSLIST3";
declareconstant "ABS3";
declareconstant "ABSFIX2CXY";
declareconstant "ABSFIX2BXY";
declareconstant "ABSFIX2SXY";
declareconstant "ABSFIX2CX";
declareconstant "ABSFIX2BX";
declareconstant "ABSFIX2SX";
declareconstant "ABSFIX2KX";
declareconstant "ABSFIX2C";
declareconstant "ABSFIX2B";
declareconstant "ABSFIX2S";
declareconstant "ABSFIX2K";
declareconstant "ABSFIX2I";
declareconstant "SR2";
declareconstant "ALLARGS";
declareconstant "CXY";
declareconstant "CX";
declareconstant "BXY";
declareconstant "BX";
declareconstant "SXY";
declareconstant "SX";
declareconstant "KX";
declareconstant "ZAP";
declareconstant "zap";
declareconstant "EXT";
declareconstant "RED2";
declareconstant "ABSLIST2";
declareconstant "ABSAPP2";
declareconstant "ABS2";
declareconstant "ABSFIXC";
declareconstant "ABSFIXB";
declareconstant "DD";
declareconstant "D";
declareconstant "WW";
declareconstant "W";
declareconstant "CC";
declareconstant "C";
declareconstant "ABSLIST";
declareconstant "BB";
declareconstant "B";
declareconstant "RED";
declareconstant "ABS";
declareconstant "ABSFIX2";
declareconstant "ABSFIX";
declareconstant "ABSAPP";
declareconstant "ABSS";
declareconstant "ABSK";
declareconstant "ABSI";
declareconstant "SS";
declareconstant "KK";
declareconstant "II";
declareconstant "S";
declareconstant "K";
declareconstant "I";
declareconstant "EVERYWHERE";
declareconstant "PIVOT";
declareconstant "LEFT_CASE";
declareconstant "RL";
declareconstant "RIGHT";
declareconstant "LEFT";
declareconstant "PCASEINTRO";
declareconstant "ID";
declareconstant "PI2";
declareconstant "PI1";
declareconstant "EQBOOL";
declareconstant "bool";
declareconstant "HYP";
declareconstant "ODDCHOICE";
declareconstant "EQUATION";
declareconstant "NONTRIV";
declareconstant "REFLEX";
declareconstant "CASEINTRO";
declareconstant "FNDIST";
declareconstant "Id";
declareconstant "p2";
declareconstant "p1";
declareconstant "P2";
declareconstant "P1";
declareconstant "COMP";
declareconstant "TYPES";
declareconstant "OUTPUT";
declareconstant "INPUT";
declareconstant "FLIP";
declareconstant "UNEVAL";
declareconstant "EVAL";
declareconstant "BIND";
declareconstant "false";
declareconstant "true";
addoperator "." "(0) , 0";
addoperator "$" "(0) , 0";
addoperator "**" "(0) , 0";
addoperator "@@" "(0) , 0";
addscout "=" "EQBOOL";
addscinleft "@!" "";
addscinleft "<=" "";
addscinleft "=>" "";
precedencereader "," "1";
precedencereader "." "1";
setdefaultprec 0;
prefixreader "$" "";
prefixreader "!$" "";
prefixreader "!@" "";
forcetheorem "TYPES" "TYPES , ((?t : ?t : ?x) , ((?t : ?x) , (TYPES , 0)))";
forcetheorem "COMP" "COMP , (((?f @@ ?g) @ ?x) , ((?f @ ?g @ ?x) , (COMP , 0)))";
forcetheorem "P1" "P1 , ((P1 @ ?x , ?y) , (?x , (P1 , 0)))";
forcetheorem "P2" "P2 , ((P2 @ ?x , ?y) , (?y , (P2 , 0)))";
forcetheorem "p1" "p1 , ((p1 @ ?x , ?y) , (?x , (p1 , 0)))";
forcetheorem "p2" "p2 , ((p2 @ ?x , ?y) , (?y , (p2 , 0)))";
forcetheorem "Id" "Id , ((Id @ ?x) , (?x , (Id , 0)))";
forcetheorem "FNDIST" "FNDIST , ((?f @ ?x || ?y , ?z) , ((?x || (?f @ ?y) , (?f @ ?z)) , (CASEINTRO , 0)))";
forcetheorem "REFLEX" "REFLEX , ((?a = ?a) , (true , (REFLEX , 0)))";
forcetheorem "NONTRIV" "NONTRIV , ((true = false) , (false , (NONTRIV , 0)))";
forcetheorem "EQUATION" "EQUATION , ((?a = ?b) , (((?a = ?b) || true , false) , (EQUATION , 0)))";
forcetheorem "ODDCHOICE" "ODDCHOICE , (?x , (?x , (ODDCHOICE , 0)))";
forcetheorem "HYP" "HYP , (((?a = ?b) || (?f @ ?a) , ?c) , (((?a = ?b) || (?f @ ?b) , ?c) , 0))";
forcetheorem "EQBOOL" "EQBOOL , ((?x = ?y) , ((bool : ?x = ?y) , (EQBOOL , 0)))";
forcetheorem "PI1" "PI1 , ((P1 @ ?x , ?y) , (?x , (P1 , 0)))";
forcetheorem "}P1" "P1 , ((P1 @ ?x , ?y) , (?x , (P1 , 0)))";
forcetheorem "PI2" "PI2 , ((P2 @ ?x , ?y) , (?y , (P2 , 0)))";
forcetheorem "}P2" "P2 , ((P2 @ ?x , ?y) , (?y , (P2 , 0)))";
forcetheorem "ID" "ID , ((Id @ ?x) , (?x , (Id , 0)))";
forcetheorem "}Id" "Id , ((Id @ ?x) , (?x , (Id , 0)))";
forcetheorem "CASEINTRO" "CASEINTRO , (?x , ((?y || ?x , ?x) , (CASEINTRO , 0)))";
forcetheorem "PCASEINTRO" "(PCASEINTRO @ ?p) , (?x , ((?p || ?x , ?x) , (CASEINTRO , 0)))";
forcetheorem "**" "(?thm1 ** ?thm2) , (?x , ((?thm2 => ?thm1 => ?x) , 0))";
forcetheorem "RL" "(RL @ ?thm) , ((?p ^+ ?q) , (((?thm => ?p) ^+ ?thm => ?q) , 0))";
forcetheorem "LEFT_CASE" "(LEFT_CASE @ ?thm) , ((?x || ?y , ?z) , ((?x || (?thm => ?y) , ?z) , 0))";
forcetheorem "PIVOT" "PIVOT , (((?a = ?b) || ?T , ?U) , (((LEFT_CASE @ EVAL) => HYP => (?a = ?b) || ((BIND @ ?a) => ?T) , ?U) , 0))";
forcetheorem "}ABS" "(ABS @ ?x) , (?t , ((ABSFIX2 => ABSFIX => ((ABSI @ ?x) =>> (ABSAPP @ ?x) =>> ABSK @ ?x) => ?t) , 0))";
forcetheorem "B" "B , (B , (S . (K . S) . K , (B , 0)))";
forcetheorem "C" "C , (C , (S . (S . (K . S) . (S . (K . K) . S)) . (K . K) , (C , 0)))";
forcetheorem "W" "W , (W , (S . S . (K . I) , (W , 0)))";
forcetheorem "WW" "WW , (W . ?x . ?y , (?x . ?y . ?y , (II , (KK , (SS , (W , 0))))))";
forcetheorem "EVERYWHERE" "(EVERYWHERE @ ?thm) , (?x . ?y , ((?thm => (((EVERYWHERE @ ?thm) =>> ?thm) => ?x) . (((EVERYWHERE @ ?thm) =>> ?thm) => ?y)) , 0))";
forcetheorem "D" "D , (D , (S . (S . (K . S) . (S . (K . K) . (S . (K . S) . (S . (K . (S . I)) . K)))) . (K . K) , (D , 0)))";
forcetheorem "DD" "DD , (D . ?x . ?y . ?z , (?z . ?x . ?y , (D , (II , (KK , (SS , 0))))))";
forcetheorem "BB" "BB , (B . ?x . ?y . ?z , (?x . (?y . ?z) , (B , (KK , (SS , 0)))))";
forcetheorem "RED" "RED , (?t , ((((II *> RED) =>> (KK *> RED) =>> SS *> RED) => (RIGHT @ RED) => (LEFT @ RED) => ?t) , 0))";
forcetheorem "RIGHT" "(RIGHT @ ?thm) , ((?p ^+ ?q) , ((?p ^+ ?thm => ?q) , 0))";
forcetheorem "II" "II , (I . ?x , (?x , (II , 0)))";
forcetheorem "KK" "KK , (K . ?x . ?y , (?x , (KK , 0)))";
forcetheorem "SS" "SS , (S . ?x . ?y . ?z , (?x . ?z . (?y . ?z) , (SS , 0)))";
forcetheorem "CC" "CC , (C . ?x . ?y . ?z , (?x . ?z . ?y , (C , (KK , (SS , 0)))))";
forcetheorem "ABSLIST2" "(ABSLIST2 @ ?x , ?y) , (?t , (((LEFT @ ABSLIST2 @ ?x) => (ABS2 @ ?y) => ?t) , 0))";
forcetheorem "RED2" "RED2 , (?t , ((((II *> RED2) =>> (KK *> RED2) =>> (SS *> RED2) =>> (BB *> RED2) =>> CC *> RED2) => (RIGHT @ RED2) => (LEFT @ RED2) => ?t) , 0))";
forcetheorem "EXT" "EXT , ((?x = ?y) , (([?x . ?1] = [?y . ?1]) , (EXT , 0)))";
forcetheorem "KX" "KX , (K . ?x , (K . ?x , 0))";
forcetheorem "SX" "SX , (S . ?x , (S . ?x , 0))";
forcetheorem "SXY" "SXY , (S . ?x . ?y , (S . ?x . ?y , 0))";
forcetheorem "BX" "BX , (B . ?x , (B . ?x , 0))";
forcetheorem "BXY" "BXY , (B . ?x . ?y , (B . ?x . ?y , 0))";
forcetheorem "CX" "CX , (C . ?x , (C . ?x , 0))";
forcetheorem "CXY" "CXY , (C . ?x . ?y , (C . ?x . ?y , 0))";
forcetheorem "ALLARGS" "(ALLARGS @ ?red) , (?x , (((LEFT @ ALLARGS @ ?red) => (RIGHT @ ?red) => ?x) , 0))";
forcetheorem "SR2" "SR2 , (?x . ?u , ((EVAL => (ZAP => zap @ [(ABS2 @ ?1) => ((KX *> SR2) =>> (SX *> SR2) =>> (BX *> SR2) =>> (CX *> SR2) =>> (SXY *> SR2) =>> (BXY *> SR2) =>> (CXY *> SR2) =>> ALLARGS @ SR2) => RED2 => ?x . ?u . ?1]) @ ?y) , (ZAP , 0)))";
forcetheorem "SR3a" "SR3a , (?x , ((EVAL => (ZAP => zap @ [(ABS3 @ ?1) => ((KX *> SR3) =>> (SX *> SR3) =>> (BX *> SR3) =>> (CX *> SR3) =>> (SXY *> SR3) =>> (BXY *> SR3) =>> (CXY *> SR3) =>> ALLARGS @ SR3) => RED2 => ?x . ?1]) @ ?y) , (ZAP , 0)))";
forcetheorem "SR3" "SR3 , (?x , ((((KX *> SR3a) =>> (SR3a *> SX) =>> (BX *> SR3a) =>> (CX *> SR3a) =>> (SXY *> SR3a) =>> (BXY *> SR3a) =>> CXY *> SR3a) => RED2 => ?x) , 0))";
forcetheorem "RED2STEP" "RED2STEP , (?t , (((II =>> KK =>> SS =>> BB =>> CC =>> LEFT @ RED2STEP) => (ALLARGS @ RED2STEP) => ?t) , 0))";
forcetheorem "ABS" "(ABS @ ?x) , (?t , ((ABSFIX2 => ABSFIX => ((ABSI @ ?x) =>> (ABSAPP @ ?x) =>> ABSK @ ?x) => ?t) , 0))";
forcetheorem "ABSAPP" "(ABSAPP @ ?x) , (?T . ?U , (((ABSS @ ?x) => ((ABS @ ?x) => ?T) . ((ABS @ ?x) => ?U)) , 0))";
forcetheorem "ABSLIST" "(ABSLIST @ ?x , ?y) , (?t , (((LEFT @ ABSLIST @ ?x) => (ABS @ ?y) => ?t) , 0))";
forcetheorem "SSH" "SSH , (S . ?x . ?y . ?z , ((HDRED => ?x . ?z) . (HDRED => ?y . ?z) , (SS , 0)))";
forcetheorem "BBH" "BBH , (B . ?x . ?y . ?z , (?x . (HDRED => ?y . ?z) , (B , (KK , (SS , 0)))))";
forcetheorem "CCH" "CCH , (C . ?x . ?y . ?z , ((HDRED => ?x . ?z) . ?y , (C , (KK , (SS , 0)))))";
forcetheorem "HDRED" "HDRED , (?x , (((II =>> KK =>> SSH =>> BBH =>> CCH) => ?x) , 0))";
forcetheorem "SKI" "SKI , (S . (K . ?x) . I . ?y , (((ABSFIX2I =>> ABSFIX2K =>> ABSFIX2S =>> ABSFIX2B =>> ABSFIX2C =>> ABSFIX2KX =>> ABSFIX2SX =>> ABSFIX2BX =>> ABSFIX2CX =>> ABSFIX2SXY =>> ABSFIX2BXY =>> ABSFIX2CXY) => S . (K . ?x) . I . ?y) , 0))";
forcetheorem "SSH2" "SSH2 , (S . ?x . ?y . ?z , ((HDRED2 => ?x . ?z) . (HDRED2 => ?y . ?z) , (SS , 0)))";
forcetheorem "}SS" "SS , (S . ?x . ?y . ?z , ((HDRED2 => ?x . ?z) . (HDRED2 => ?y . ?z) , (SS , 0)))";
forcetheorem "BBH2" "BBH2 , (B . ?x . ?y . ?z , (?x . (HDRED2 => ?y . ?z) , (B , (KK , (SS , 0)))))";
forcetheorem "}BB" "BB , (B . ?x . ?y . ?z , (?x . (HDRED2 => ?y . ?z) , (B , (KK , (SS , 0)))))";
forcetheorem "CCH2" "CCH2 , (C . ?x . ?y . ?z , ((HDRED2 => ?x . ?z) . ?y , (C , (KK , (SS , 0)))))";
forcetheorem "}CC" "CC , (C . ?x . ?y . ?z , ((HDRED2 => ?x . ?z) . ?y , (C , (KK , (SS , 0)))))";
forcetheorem "HDRED2" "HDRED2 , (?x , (((II =>> KK =>> SKI =>> SSH2 =>> BBH2 =>> CCH2) => ?x) , 0))";
forcetheorem "ETASTEP" "ETASTEP , (?x . ?y , (((II =>> SS =>> KK =>> BB =>> CC =>> (KX *> STRONGSTEP) =>> (SX *> STRONGSTEP) =>> (BX *> STRONGSTEP) =>> (CX *> STRONGSTEP) =>> (SXY *> STRONGSTEP) =>> (BXY *> STRONGSTEP) =>> (CXY *> STRONGSTEP) =>> RL @ ETASTEP) => ?x . ?y) , 0))";
forcetheorem "STRONGSTEP" "STRONGSTEP , (?x . ?u , ((EVAL => (ZAP => zap @ [(ABS2 @ ?1) => ETASTEP => HDRED => ?x . ?u . ?1]) @ ?y) , (ZAP , 0)))";
forcetheorem "BETASTEP" "BETASTEP , (?x . ?y , (((II =>> SS =>> KK =>> BB =>> CC =>> (KX *> BSTRONGSTEP) =>> (SX *> BSTRONGSTEP) =>> (BX *> BSTRONGSTEP) =>> (CX *> BSTRONGSTEP) =>> (SXY *> BSTRONGSTEP) =>> (BXY *> BSTRONGSTEP) =>> (CXY *> BSTRONGSTEP) =>> RL @ BETASTEP) => ?x . ?y) , 0))";
forcetheorem "$" "($ ?thm) , (?x , ((?thm <= ?x) , 0))";
forcetheorem "ZAP" "ZAP , ((zap @ [?x . ?1]) , ([?x] , (ZAP , 0)))";
forcetheorem "BSTRONGSTEP" "BSTRONGSTEP , (?x . ?u , ((EVAL => (ZAP => zap @ [(ABS3 @ ?1) => BETASTEP => HDRED2 => ?x . ?u . ?1]) @ ?y) , (ZAP , 0)))";
forcetheorem "}backup" "backup , (?x . ?u , ((EVAL => (ZAP => zap @ [(ABS3 @ ?1) => BETASTEP => HDRED2 => ?x . ?u . ?1]) @ ?y) , (ZAP , 0)))";
forcetheorem "ABS3" "(ABS3 @ ?x) , (?t , ((ABSFIXC => ABSFIXB => (ABSFIX2I =>> ABSFIX2K =>> ABSFIX2S =>> ABSFIX2B =>> ABSFIX2C =>> ABSFIX2KX =>> ABSFIX2SX =>> ABSFIX2BX =>> ABSFIX2CX =>> ABSFIX2SXY =>> ABSFIX2BXY =>> ABSFIX2CXY) => ABSFIX => ((ABSI @ ?x) =>> (ABSAPP2 @ ?x) =>> ABSK @ ?x) => ?t) , 0))";
forcetheorem "ABSAPP2" "(ABSAPP2 @ ?x) , (?y . ?z , (((ABSS @ ?x) => ((ABS2 @ ?x) => ?y) . ((ABS2 @ ?x) => ?z)) , 0))";
forcetheorem "ABSK" "(ABSK @ ?x) , (?y , (K . ?y . ?x , (KK , 0)))";
forcetheorem "ABS2" "(ABS2 @ ?x) , (?t , ((ABSFIXC => ABSFIXB => ABSFIX2 => ABSFIX => ((ABSI @ ?x) =>> (ABSAPP2 @ ?x) =>> ABSK @ ?x) => ?t) , 0))";
forcetheorem "ABSI" "(ABSI @ ?x) , (?x , (I . ?x , (II , 0)))";
forcetheorem "ABSFIX2" "ABSFIX2 , (S . (K . ?a) . I . ?x , (?a . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSS" "(ABSS @ ?x) , (?T . ?x . (?U . ?x) , (S . ?T . ?U . ?x , (SS , 0)))";
forcetheorem "ABSFIX" "ABSFIX , (S . (K . ?a) . (K . ?b) . ?x , (K . (?a . ?b) . ?x , (KK , (SS , 0))))";
forcetheorem "ABSFIX2I" "ABSFIX2I , (S . (K . I) . I . ?x , (I . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2K" "ABSFIX2K , (S . (K . K) . I . ?x , (K . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2S" "ABSFIX2S , (S . (K . S) . I . ?x , (S . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2B" "ABSFIX2B , (S . (K . B) . I . ?x , (B . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2C" "ABSFIX2C , (S . (K . C) . I . ?x , (C . ?x , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2KX" "ABSFIX2KX , (S . (K . (K . ?x)) . I . ?u , (K . ?x . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2SX" "ABSFIX2SX , (S . (K . (S . ?x)) . I . ?u , (S . ?x . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2BX" "ABSFIX2BX , (S . (K . (B . ?x)) . I . ?u , (B . ?x . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2CX" "ABSFIX2CX , (S . (K . (C . ?x)) . I . ?u , (C . ?x . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2SXY" "ABSFIX2SXY , (S . (K . (S . ?x . ?y)) . I . ?u , (S . ?x . ?y . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2BXY" "ABSFIX2BXY , (S . (K . (B . ?x . ?y)) . I . ?u , (B . ?x . ?y . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIX2CXY" "ABSFIX2CXY , (S . (K . (C . ?x . ?y)) . I . ?u , (C . ?x . ?y . ?u , (II , (KK , (SS , 0)))))";
forcetheorem "ABSFIXB" "ABSFIXB , (S . (K . ?a) . ?b . ?x , (B . ?a . ?b . ?x , (B , (KK , (SS , 0)))))";
forcetheorem "ABSFIXC" "ABSFIXC , (S . ?a . (K . ?b) . ?x , (C . ?a . ?b . ?x , (C , (KK , (SS , 0)))))";
forcetheorem "LEFT" "(LEFT @ ?thm) , ((?p ^+ ?q) , (((?thm => ?p) ^+ ?q) , 0))";
forcetheorem "ABSLIST3" "(ABSLIST3 @ ?x , ?y) , (?t , (((LEFT @ ABSLIST3 @ ?x) => (ABS3 @ ?y) => ?t) , 0))";
adddef "D" "D";
adddef "W" "W";
adddef "C" "C";
adddef "B" "B";
adddef "Id" "Id";
adddef "p2" "p2";
adddef "p1" "p1";
adddef "P2" "P2";
adddef "P1" "P1";
adddef "COMP" "@@";
addscript "combinators";
setprogram "p2" "p2";
setprogram "p1" "p1";
adddefdep2 "BSTRONGSTEP" "0";
adddefdep2 "BETASTEP" "0";
adddefdep2 "STRONGSTEP" "0";
adddefdep2 "ETASTEP" "0";
adddefdep2 "HDRED2" "0";
adddefdep2 "CCH2" "C , 0";
adddefdep2 "BBH2" "B , 0";
adddefdep2 "SSH2" "0";
adddefdep2 "SKI" "0";
adddefdep2 "HDRED" "0";
adddefdep2 "CCH" "C , 0";
adddefdep2 "BBH" "B , 0";
adddefdep2 "SSH" "0";
adddefdep2 "RED2STEP" "0";
adddefdep2 "SR3" "0";
adddefdep2 "SR3a" "0";
adddefdep2 "ABSLIST3" "0";
adddefdep2 "ABS3" "0";
adddefdep2 "ABSFIX2CXY" "C , 0";
adddefdep2 "ABSFIX2BXY" "B , 0";
adddefdep2 "ABSFIX2SXY" "0";
adddefdep2 "ABSFIX2CX" "C , 0";
adddefdep2 "ABSFIX2BX" "B , 0";
adddefdep2 "ABSFIX2SX" "0";
adddefdep2 "ABSFIX2KX" "0";
adddefdep2 "ABSFIX2C" "C , 0";
adddefdep2 "ABSFIX2B" "B , 0";
adddefdep2 "ABSFIX2S" "0";
adddefdep2 "ABSFIX2K" "0";
adddefdep2 "ABSFIX2I" "0";
adddefdep2 "SR2" "0";
adddefdep2 "ALLARGS" "0";
adddefdep2 "CXY" "C , 0";
adddefdep2 "CX" "C , 0";
adddefdep2 "BXY" "B , 0";
adddefdep2 "BX" "B , 0";
adddefdep2 "SXY" "0";
adddefdep2 "SX" "0";
adddefdep2 "KX" "0";
adddefdep2 "ZAP" "0";
adddefdep2 "EXT" "0";
adddefdep2 "RED2" "0";
adddefdep2 "ABSLIST2" "0";
adddefdep2 "ABS2" "0";
adddefdep2 "ABSAPP2" "0";
adddefdep2 "ABSFIXC" "C , 0";
adddefdep2 "ABSFIXB" "B , 0";
adddefdep2 "DD" "D , 0";
adddefdep2 "D" "D , 0";
adddefdep2 "WW" "W , 0";
adddefdep2 "W" "W , 0";
adddefdep2 "CC" "C , 0";
adddefdep2 "C" "C , 0";
adddefdep2 "ABSLIST" "0";
adddefdep2 "BB" "B , 0";
adddefdep2 "B" "B , 0";
adddefdep2 "RED" "0";
adddefdep2 "ABS" "0";
adddefdep2 "ABSFIX2" "0";
adddefdep2 "ABSFIX" "0";
adddefdep2 "ABSAPP" "0";
adddefdep2 "ABSS" "0";
adddefdep2 "ABSK" "0";
adddefdep2 "ABSI" "0";
adddefdep2 "SS" "0";
adddefdep2 "KK" "0";
adddefdep2 "II" "0";
adddefdep2 "EVERYWHERE" "0";
adddefdep2 "PIVOT" "0";
adddefdep2 "LEFT_CASE" "0";
adddefdep2 "RL" "0";
adddefdep2 "RIGHT" "0";
adddefdep2 "LEFT" "0";
adddefdep2 "$" "0";
adddefdep2 "**" "0";
adddefdep2 "PCASEINTRO" "0";
adddefdep2 "ID" "Id , 0";
adddefdep2 "PI2" "P2 , 0";
adddefdep2 "PI1" "P1 , 0";
adddefdep2 "EQBOOL" "0";
adddefdep2 "HYP" "0";
adddefdep2 "ODDCHOICE" "0";
adddefdep2 "EQUATION" "0";
adddefdep2 "NONTRIV" "0";
adddefdep2 "REFLEX" "0";
adddefdep2 "CASEINTRO" "0";
adddefdep2 "FNDIST" "0";
adddefdep2 "Id" "Id , 0";
adddefdep2 "p2" "p2 , 0";
adddefdep2 "p1" "p1 , 0";
adddefdep2 "P2" "P2 , 0";
adddefdep2 "P1" "P1 , 0";
adddefdep2 "COMP" "COMP , 0";
adddefdep2 "TYPES" "0";
addthmtextdep2 "BETASTEP" "ZAP , (ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , (II , (SS , (KK , (BB , (CC , (KX , (BSTRONGSTEP , (SX , (BX , (CX , (SXY , (BXY , (CXY , (RL , (BETASTEP , (SKI , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))))))))))))))))))))))))))";
addthmtextdep2 "BSTRONGSTEP" "ZAP , (ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , (II , (SS , (KK , (BB , (CC , (KX , (BSTRONGSTEP , (SX , (BX , (CX , (SXY , (BXY , (CXY , (RL , (BETASTEP , (SKI , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))))))))))))))))))))))))))";
addthmtextdep2 "HDRED2" "II , (KK , (SKI , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (B , (ABSFIX2C , (C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))";
addthmtextdep2 "CCH2" "C , (II , (KK , (SKI , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))";
addthmtextdep2 "BBH2" "B , (II , (KK , (SKI , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))";
addthmtextdep2 "SSH2" "II , (KK , (SKI , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (B , (ABSFIX2C , (C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (SSH2 , (HDRED2 , (BBH2 , (CCH2 , 0))))))))))))))))))))";
addthmtextdep2 "SKI" "SKI , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (B , (ABSFIX2C , (C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , 0))))))))))))))";
addthmtextdep2 "RL" "RL , 0";
addthmtextdep2 "CXY" "CXY , (C , 0)";
addthmtextdep2 "BXY" "BXY , (B , 0)";
addthmtextdep2 "SXY" "SXY , 0";
addthmtextdep2 "CX" "CX , (C , 0)";
addthmtextdep2 "BX" "BX , (B , 0)";
addthmtextdep2 "SX" "SX , 0";
addthmtextdep2 "KX" "KX , 0";
addthmtextdep2 "CC" "CC , (C , 0)";
addthmtextdep2 "BB" "BB , (B , 0)";
addthmtextdep2 "KK" "KK , 0";
addthmtextdep2 "SS" "SS , 0";
addthmtextdep2 "II" "II , 0";
addthmtextdep2 "ABS3" "ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , 0)))))))))))))))))))))))";
addthmtextdep2 "ABSAPP2" "ABSS , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSAPP2 , (ABS2 , (ABSK , 0))))))))))";
addthmtextdep2 "ABS2" "ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP2 , (ABS2 , (ABSK , 0))))))))))";
addthmtextdep2 "ABSK" "ABSK , 0";
addthmtextdep2 "ABSFIX2" "ABSFIX2 , 0";
addthmtextdep2 "ABSS" "ABSS , 0";
addthmtextdep2 "ABSI" "ABSI , 0";
addthmtextdep2 "ABSFIX" "ABSFIX , 0";
addthmtextdep2 "ABSFIX2CXY" "ABSFIX2CXY , (C , 0)";
addthmtextdep2 "ABSFIX2BXY" "ABSFIX2BXY , (B , 0)";
addthmtextdep2 "ABSFIX2SXY" "ABSFIX2SXY , 0";
addthmtextdep2 "ABSFIX2CX" "ABSFIX2CX , (C , 0)";
addthmtextdep2 "ABSFIX2BX" "ABSFIX2BX , (B , 0)";
addthmtextdep2 "ABSFIX2SX" "ABSFIX2SX , 0";
addthmtextdep2 "ABSFIX2KX" "ABSFIX2KX , 0";
addthmtextdep2 "ABSFIX2C" "ABSFIX2C , (C , 0)";
addthmtextdep2 "ABSFIX2B" "ABSFIX2B , (B , 0)";
addthmtextdep2 "ABSFIX2S" "ABSFIX2S , 0";
addthmtextdep2 "ABSFIX2K" "ABSFIX2K , 0";
addthmtextdep2 "ABSFIX2I" "ABSFIX2I , 0";
addthmtextdep2 "ABSFIXB" "ABSFIXB , (B , 0)";
addthmtextdep2 "B" "B , 0";
addthmtextdep2 "ABSFIXC" "ABSFIXC , (C , 0)";
addthmtextdep2 "C" "C , 0";
addthmtextdep2 "ZAP" "ZAP , 0";
addthmtextdep2 "ETASTEP" "ZAP , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP2 , (ABS2 , (ABSK , (II , (SS , (KK , (BB , (CC , (KX , (STRONGSTEP , (SX , (BX , (CX , (SXY , (BXY , (CXY , (RL , (ETASTEP , (SSH , (HDRED , (BBH , (CCH , 0))))))))))))))))))))))))))))))";
addthmtextdep2 "STRONGSTEP" "ZAP , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP2 , (ABS2 , (ABSK , (II , (SS , (KK , (BB , (CC , (KX , (STRONGSTEP , (SX , (BX , (CX , (SXY , (BXY , (CXY , (RL , (ETASTEP , (SSH , (HDRED , (BBH , (CCH , 0))))))))))))))))))))))))))))))";
addthmtextdep2 "HDRED" "II , (KK , (SSH , (HDRED , (BBH , (B , (CCH , (C , 0)))))))";
addthmtextdep2 "CCH" "C , (II , (KK , (SSH , (HDRED , (BBH , (B , (CCH , 0)))))))";
addthmtextdep2 "BBH" "B , (II , (KK , (SSH , (HDRED , (BBH , (CCH , (C , 0)))))))";
addthmtextdep2 "SSH" "II , (KK , (SSH , (HDRED , (BBH , (B , (CCH , (C , 0)))))))";
addthmtextdep2 "RED2STEP" "II , (KK , (SS , (BB , (B , (CC , (C , (LEFT , (RED2STEP , (ALLARGS , (RIGHT , 0))))))))))";
addthmtextdep2 "ALLARGS" "LEFT , (ALLARGS , (RIGHT , 0))";
addthmtextdep2 "RIGHT" "RIGHT , 0";
addthmtextdep2 "LEFT" "LEFT , 0";
addthmtextdep2 "SR3a" "KX , (SR3a , (ZAP , (ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , (SR3 , (SX , (BX , (CX , (SXY , (BXY , (CXY , (LEFT , (ALLARGS , (RIGHT , (II , (RED2 , (KK , (SS , (BB , (CC , 0))))))))))))))))))))))))))))))))))))))))))";
addthmtextdep2 "SR3" "KX , (SR3a , (ZAP , (ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , (SR3 , (SX , (BX , (CX , (SXY , (BXY , (CXY , (LEFT , (ALLARGS , (RIGHT , (II , (RED2 , (KK , (SS , (BB , (CC , 0))))))))))))))))))))))))))))))))))))))))))";
addthmtextdep2 "RED2" "II , (RED2 , (KK , (SS , (BB , (B , (CC , (C , (RIGHT , (LEFT , 0)))))))))";
addthmtextdep2 "ABSLIST3" "LEFT , (ABSLIST3 , (ABS3 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2I , (ABSFIX2K , (ABSFIX2S , (ABSFIX2B , (ABSFIX2C , (ABSFIX2KX , (ABSFIX2SX , (ABSFIX2BX , (ABSFIX2CX , (ABSFIX2SXY , (ABSFIX2BXY , (ABSFIX2CXY , (ABSFIX , (ABSI , (ABSS , (ABSFIX2 , (ABSAPP2 , (ABS2 , (ABSK , 0)))))))))))))))))))))))))";
addthmtextdep2 "SR2" "ZAP , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP2 , (ABS2 , (ABSK , (KX , (SR2 , (SX , (BX , (CX , (SXY , (BXY , (CXY , (LEFT , (ALLARGS , (RIGHT , (II , (RED2 , (KK , (SS , (BB , (CC , 0))))))))))))))))))))))))))))";
addthmtextdep2 "EXT" "EXT , 0";
addthmtextdep2 "ABSLIST2" "LEFT , (ABSLIST2 , (ABSFIXC , (C , (ABSFIXB , (B , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP2 , (ABS2 , (ABSK , 0))))))))))))";
addthmtextdep2 "DD" "DD , (D , 0)";
addthmtextdep2 "D" "D , 0";
addthmtextdep2 "WW" "WW , (W , 0)";
addthmtextdep2 "W" "W , 0";
addthmtextdep2 "ABSLIST" "LEFT , (ABSLIST , (ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP , (ABS , (ABSK , 0))))))))";
addthmtextdep2 "ABS" "ABSFIX2 , (ABSFIX , (ABSI , (ABSS , (ABSAPP , (ABS , (ABSK , 0))))))";
addthmtextdep2 "ABSAPP" "ABSS , (ABSFIX2 , (ABSFIX , (ABSI , (ABSAPP , (ABS , (ABSK , 0))))))";
addthmtextdep2 "RED" "II , (RED , (KK , (SS , (RIGHT , (LEFT , 0)))))";
addthmtextdep2 "EVERYWHERE" "EVERYWHERE , 0";
addthmtextdep2 "PIVOT" "PIVOT , (LEFT_CASE , (HYP , 0))";
addthmtextdep2 "HYP" "HYP , 0";
addthmtextdep2 "LEFT_CASE" "LEFT_CASE , 0";
addthmtextdep2 "$" "(?x $ ?y) , 0";
addthmtextdep2 "**" "(?x ** ?y) , 0";
addthmtextdep2 "PCASEINTRO" "PCASEINTRO , 0";
addthmtextdep2 "ID" "ID , (Id , 0)";
addthmtextdep2 "Id" "Id , 0";
addthmtextdep2 "PI2" "PI2 , (P2 , 0)";
addthmtextdep2 "P2" "P2 , 0";
addthmtextdep2 "PI1" "PI1 , (P1 , 0)";
addthmtextdep2 "P1" "P1 , 0";
addthmtextdep2 "EQBOOL" "EQBOOL , 0";
addthmtextdep2 "ODDCHOICE" "ODDCHOICE , 0";
addthmtextdep2 "EQUATION" "EQUATION , 0";
addthmtextdep2 "NONTRIV" "NONTRIV , 0";
addthmtextdep2 "REFLEX" "REFLEX , 0";
addthmtextdep2 "CASEINTRO" "CASEINTRO , 0";
addthmtextdep2 "FNDIST" "FNDIST , 0";
addthmtextdep2 "p2" "p2 , 0";
addthmtextdep2 "p1" "p1 , 0";
addthmtextdep2 "COMP" "COMP , 0";
addthmtextdep2 "TYPES" "TYPES , 0";
quit();
