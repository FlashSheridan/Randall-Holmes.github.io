declareconstant "NOR";
declareconstant "NAND";
declareconstant "DISTD2";
declareconstant "DISTC2";
declareconstant "NOT_FALSE";
declareconstant "CLEANUP";
declareconstant "ASSERT_FALSE";
declareconstant "ASSERT_TRUE";
declareconstant "COMMC_TAUT";
declareconstant "IRRELEVANCE";
declareconstant "SELFIMPLY";
declareconstant "XOR_DEF";
declareconstant "IFF_DEF";
declareconstant "CONVIF_DEF";
declareconstant "IF_DEF";
declareconstant "DEMD";
declareconstant "DEMC";
declareconstant "CANCELD";
declareconstant "CANCELC";
declareconstant "ZERD";
declareconstant "ZERC";
declareconstant "IDEMD";
declareconstant "IDEMC";
declareconstant "IDD";
declareconstant "IDC";
declareconstant "DISTD";
declareconstant "DISTC";
declareconstant "ASSOCD";
declareconstant "ASSOCC";
declareconstant "COMMD";
declareconstant "COMMC";
declareconstant "DNEG";
declareconstant "DRULE4";
declareconstant "DRULE3";
declareconstant "DRULE2";
declareconstant "DRULE1";
declareconstant "OR_TYPE";
declareconstant "CRULE4";
declareconstant "CRULE3";
declareconstant "CRULE2";
declareconstant "CRULE1";
declareconstant "AND_TYPE";
declareconstant "NRULE2";
declareconstant "NRULE1";
declareconstant "NOT_TYPE";
declareconstant "ASSERTS";
declareconstant "forsome";
declareconstant "forall";
declareconstant "NEQ";
declareconstant "XOR";
declareconstant "IFF";
declareconstant "CONVIF";
declareconstant "IF";
declareconstant "OR";
declareconstant "AND";
declareconstant "NOT";
declareconstant "ASSERT";
declareconstant "REVPIVOT";
declareconstant "PIVOT";
declareconstant "ALT_PUSH";
declareconstant "TOPDOWN_ABSTRACT";
declareconstant "TOPDOWN_PREFIX";
declareconstant "TOPDOWN_INFIX";
declareconstant "TOPDOWN_CASE";
declareconstant "TOPDOWN";
declareconstant "EVERYWHERE_CASES";
declareconstant "EVERYWHERE_ABSTRACT";
declareconstant "EVERYWHERE_PREFIX";
declareconstant "EVERYWHERE_INFIX";
declareconstant "EVERYWHERE";
declareconstant "VALUE";
declareconstant "BOTH_CASES";
declareconstant "RIGHT_CASE";
declareconstant "LEFT_CASE";
declareconstant "RL";
declareconstant "RIGHT";
declareconstant "RIGHT2";
declareconstant "RIGHT1";
declareconstant "LEFT";
declareconstant "LEFT2";
declareconstant "LEFT1";
declareconstant "HYP";
declareconstant "ODDCHOICE";
declareconstant "EQUATION";
declareconstant "NONTRIV";
declareconstant "REFLEX";
declareconstant "CASEINTRO";
declareconstant "FNDIST";
declareconstant "Id";
declareconstant "p2";
declareconstant "p1";
declareconstant "P2";
declareconstant "P1";
declareconstant "COMP";
declareconstant "TYPES";
declareconstant "SHELL";
declareconstant "STOPINPUT";
declareconstant "OUTPUT";
declareconstant "INPUT";
declareconstant "FLIP";
declareconstant "UNEVALM";
declareconstant "EVALM";
declareconstant "BINDM";
declareconstant "UNEVAL";
declareconstant "EVAL";
declareconstant "BIND";
declareconstant "false";
declareconstant "true";
addoperator "~|" "(0) , 0";
addoperator "~&" "(0) , 0";
addoperator "<>" "(0) , 0";
addoperator "<+>" "(0) , 0";
addoperator "<->" "(0) , 0";
addoperator "<-" "(0) , 0";
addoperator "->" "(0) , 0";
addoperator "|" "(0) , 0";
addoperator "&" "(0) , 0";
addoperator "~" "(0) , 0";
addoperator "|-" "(0) , 0";
addoperator "$" "(0) , 0";
addoperator "**" "(0) , 0";
addoperator "^-" "(0) , 0";
addoperator "^+" "(0) , 0";
addoperator "@@" "(0) , 0";
addscinleft "<=" "";
addscinleft "=>" "";
precedencereader "~|" "4";
precedencereader "~&" "4";
precedencereader "<+>" "0";
precedencereader "<->" "0";
precedencereader "<-" "2";
precedencereader "->" "2";
precedencereader "|" "4";
precedencereader "&" "4";
precedencereader "|-" "6";
precedencereader "~" "6";
setdefaultprec 0;
prefixreader "~" "";
prefixreader "|-" "";
prefixreader "$" "";
prefixreader "^-" "";
prefixreader "!$" "";
prefixreader "!@" "";
addopaque "^-";
addopaque "^+";
forcetheorem "TYPES" "TYPES , (?t : ?t : ?x) , (?t : ?x) , TYPES , 0";
forcetheorem "COMP" "COMP , ((?f @@ ?g) @ ?x) , (?f @ ?g @ ?x) , COMP , 0";
forcetheorem "P1" "P1 , (P1 @ ?x , ?y) , ?x , P1 , 0";
forcetheorem "P2" "P2 , (P2 @ ?x , ?y) , ?y , P2 , 0";
forcetheorem "p1" "p1 , (p1 @ ?x , ?y) , ?x , p1 , 0";
forcetheorem "p2" "p2 , (p2 @ ?x , ?y) , ?y , p2 , 0";
forcetheorem "Id" "Id , (Id @ ?x) , ?x , Id , 0";
forcetheorem "FNDIST" "FNDIST , (?f @ ?x || ?y , ?z) , (?x || (?f @ ?y) , ?f @ ?z) , FNDIST , 0";
forcetheorem "CASEINTRO" "CASEINTRO , ?x , (?y || ?x , ?x) , CASEINTRO , 0";
forcetheorem "REFLEX" "REFLEX , (?a = ?a) , true , REFLEX , 0";
forcetheorem "NONTRIV" "NONTRIV , (true = false) , false , NONTRIV , 0";
forcetheorem "EQUATION" "EQUATION , (?a = ?b) , ((?a = ?b) || true , false) , EQUATION , 0";
forcetheorem "ODDCHOICE" "ODDCHOICE , ?x , ?x , ODDCHOICE , 0";
forcetheorem "HYP" "HYP , ((?a = ?b) || (?f @ ?a) , ?c) , ((?a = ?b) || (?f @ ?b) , ?c) , HYP , 0";
forcetheorem "LEFT2" "(LEFT2 @ ?thm) , (?x || ?y , ?z) , ((?thm => ?x) || ?y , ?z) , 0";
forcetheorem "LEFT_CASE" "(LEFT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?z) , 0";
forcetheorem "RIGHT_CASE" "(RIGHT_CASE @ ?thm) , (?x || ?y , ?z) , (?x || ?y , ?thm => ?z) , 0";
forcetheorem "BOTH_CASES" "(BOTH_CASES @ ?thm) , (?x || ?y , ?z) , (?x || (?thm => ?y) , ?thm => ?z) , 0";
forcetheorem "VALUE" "(VALUE @ ?thm) , [?P @! ?1] , [(?thm @ ?1) => ?P @! ?1] , 0";
forcetheorem "**" "(?thm1 ** ?thm2) , ?x , (?thm2 => ?thm1 => ?x) , 0";
forcetheorem "TOPDOWN_CASE" "(TOPDOWN_CASE @ ?thm) , (?a || ?x , ?y) , ((BOTH_CASES @ TOPDOWN @ ?thm) => (LEFT @ ?thm) => ?thm => ?a || ?x , ?y) , 0";
forcetheorem "TOPDOWN_INFIX" "(TOPDOWN_INFIX @ ?thm) , (?x ^+ ?y) , ((RL @ TOPDOWN @ ?thm) => ?thm => ?x ^+ ?y) , 0";
forcetheorem "TOPDOWN_PREFIX" "(TOPDOWN_PREFIX @ ?thm) , (^- ?x) , ((RIGHT @ TOPDOWN @ ?thm) => ?thm => ^- ?x) , 0";
forcetheorem "TOPDOWN_ABSTRACT" "(TOPDOWN_ABSTRACT @ ?thm) , [?P @! ?1] , ((VALUE @ [?thm]) => ?thm => [?P @! ?1]) , 0";
forcetheorem "TOPDOWN" "(TOPDOWN @ ?thm) , ?x , (((TOPDOWN_CASE @ ?thm) =>> (TOPDOWN_INFIX @ ?thm) =>> (TOPDOWN_PREFIX @ ?thm) =>> (TOPDOWN_ABSTRACT @ ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "ALT_PUSH" "ALT_PUSH , (?x || ?y , ?z) , (?x || ((EVERYWHERE @ 1 |-| 1) => ALT_PUSH => ?y) , (EVERYWHERE @ 1 |-| 1) => ALT_PUSH => ?z) , 0";
forcetheorem "PIVOT" "PIVOT , (?x || ?y , ?z) , (?x || ((EVERYWHERE @ 0 |-| 1) => ?y) , ?z) , 0";
forcetheorem "REVPIVOT" "REVPIVOT , (?x || ?y , ?z) , (?x || ((EVERYWHERE @ $ 0 |-| 1) => ?y) , ?z) , 0";
forcetheorem "ASSERT" "ASSERT , |- ?p , (?p || true , false) , ASSERT , 0";
forcetheorem "NOT" "NOT , ~ ?p , (?p || false , true) , NOT , 0";
forcetheorem "AND" "AND , ?p & ?q , (?p || (?q || true , false) , false) , AND , 0";
forcetheorem "OR" "OR , ?p | ?q , (?p || true , ?q || true , false) , OR , 0";
forcetheorem "IF" "IF , ?p -> ?q , (?p || (?q || true , false) , true) , IF , 0";
forcetheorem "CONVIF" "CONVIF , ?p <- ?q , (?p || true , ?q || false , true) , CONVIF , 0";
forcetheorem "IFF" "IFF , (?p <-> ?q) , (?p || (?q || true , false) , ?q || false , true) , IFF , 0";
forcetheorem "XOR" "XOR , (?p <+> ?q) , (?p || (?q || false , true) , ?q || true , false) , XOR , 0";
forcetheorem "NEQ" "NEQ , (?x <> ?y) , ((?x = ?y) || false , true) , NEQ , 0";
forcetheorem "forall" "forall , (forall @ ?P) , (?P = [true]) , forall , 0";
forcetheorem "forsome" "forsome , (forsome @ ?P) , (?P <> [false]) , forsome , 0";
forcetheorem "NRULE1" "NRULE1 , ~ ?x , |- ~ ?x , ASSERTS , NOT_TYPE , 0";
forcetheorem "NOT_TYPE" "NOT_TYPE , ~ ?x , |- ~ |- ?x , NOT_TYPE , 0";
forcetheorem "NRULE2" "NRULE2 , ~ ?x , ~ |- ?x , ASSERTS , NOT_TYPE , 0";
forcetheorem "CRULE2" "CRULE2 , ?x & ?y , |- ?x & ?y , AND_TYPE , ASSERTS , 0";
forcetheorem "CRULE3" "CRULE3 , ?x & ?y , ?x & |- ?y , AND_TYPE , ASSERTS , 0";
forcetheorem "AND_TYPE" "AND_TYPE , ?x & ?y , |- (|- ?x & |- ?y) , AND_TYPE , 0";
forcetheorem "CRULE4" "CRULE4 , ?x & ?y , |- ?x & |- ?y , AND_TYPE , ASSERTS , 0";
forcetheorem "DRULE3" "DRULE3 , ?x | ?y , ?x | |- ?y , ASSERTS , OR_TYPE , 0";
forcetheorem "ASSERTS" "ASSERTS , |- ?x , |- |- ?x , ASSERTS , 0";
forcetheorem "OR_TYPE" "OR_TYPE , ?x | ?y , |- (|- ?x | |- ?y) , OR_TYPE , 0";
forcetheorem "DRULE4" "DRULE4 , ?x | ?y , |- ?x | |- ?y , ASSERTS , OR_TYPE , 0";
forcetheorem "ASSOCC" "ASSOCC , (?x & ?y) & ?z , ?x & ?y & ?z , ASSOCC , 0";
forcetheorem "IDD" "IDD , ?x | false , |- ?x , IDD , 0";
forcetheorem "IDEMC" "IDEMC , ?x & ?x , |- ?x , IDEMC , 0";
forcetheorem "IDEMD" "IDEMD , ?x | ?x , |- ?x , IDEMD , 0";
forcetheorem "ZERC" "ZERC , ?x & false , false , ZERC , 0";
forcetheorem "DEMD" "DEMD , ~ (?x | ?y) , ~ ?x & ~ ?y , DEMD , 0";
forcetheorem "CONVIF_DEF" "CONVIF_DEF , ?x <- ?y , ?y -> ?x , CONVIF_DEF , 0";
forcetheorem "XOR_DEF" "XOR_DEF , (?x <+> ?y) , ~ (?x <-> ?y) , XOR_DEF , 0";
forcetheorem "EVERYWHERE" "(EVERYWHERE @ ?thm) , ?x , (((EVERYWHERE_INFIX @ ?thm) =>> (EVERYWHERE_PREFIX @ ?thm) =>> (EVERYWHERE_ABSTRACT @ ?thm) =>> (EVERYWHERE_CASES @ ?thm) =>> ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE_INFIX" "(EVERYWHERE_INFIX @ ?thm) , (?x ^+ ?y) , (?thm => ((EVERYWHERE @ ?thm) => ?x) ^+ (EVERYWHERE @ ?thm) => ?y) , 0";
forcetheorem "EVERYWHERE_PREFIX" "(EVERYWHERE_PREFIX @ ?thm) , (^- ?x) , (?thm => ^- (EVERYWHERE @ ?thm) => ?x) , 0";
forcetheorem "EVERYWHERE_ABSTRACT" "(EVERYWHERE_ABSTRACT @ ?thm) , [?P @! ?1] , (?thm => [(EVERYWHERE @ ?thm) => ?P @! ?1]) , 0";
forcetheorem "EVERYWHERE_CASES" "(EVERYWHERE_CASES @ ?thm) , (?x || ?y , ?z) , (?thm => ((EVERYWHERE @ ?thm) => ?x) || ((EVERYWHERE @ ?thm) => ?y) , (EVERYWHERE @ ?thm) => ?z) , 0";
forcetheorem "IF_DEF" "IF_DEF , ?x -> ?y , ~ ?x | ?y , IF_DEF , 0";
forcetheorem "ASSOCD" "ASSOCD , (?x | ?y) | ?z , ?x | ?y | ?z , ASSOCD , 0";
forcetheorem "ZERD" "ZERD , ?x | true , true , ZERD , 0";
forcetheorem "IRRELEVANCE" "IRRELEVANCE , ?p -> ?q -> ?p , (?p | ~ ?q) | ~ ?p , COMMD , IF_DEF , 0";
forcetheorem "IFF_DEF" "IFF_DEF , (?x <-> ?y) , (?x -> ?y) & (?y -> ?x) , IFF_DEF , 0";
forcetheorem "SELFIMPLY" "SELFIMPLY , ?p -> ?p , true , CANCELD , COMMD , IF_DEF , 0";
forcetheorem "IDC" "IDC , ?x & true , |- ?x , IDC , 0";
forcetheorem "COMMC_TAUT" "COMMC_TAUT , (?p & ?q <-> ?q & ?p) , true , ASSERTS , CANCELD , COMMC , COMMD , IDC , IFF_DEF , IF_DEF , OR_TYPE , 0";
forcetheorem "DRULE1" "DRULE1 , ?x | ?y , |- (?x | ?y) , ASSERTS , OR_TYPE , 0";
forcetheorem "ASSERT_TRUE" "ASSERT_TRUE , |- true , true , ASSERTS , CANCELD , OR_TYPE , 0";
forcetheorem "CRULE1" "CRULE1 , ?x & ?y , |- (?x & ?y) , AND_TYPE , ASSERTS , 0";
forcetheorem "ASSERT_FALSE" "ASSERT_FALSE , |- false , false , AND_TYPE , ASSERTS , CANCELC , 0";
forcetheorem "CLEANUP" "CLEANUP , ?x , (ASSERT_FALSE => ASSERT_TRUE => CRULE1 <= DRULE1 <= NRULE1 <= (EVERYWHERE @ ($ NRULE2) ** ($ DRULE4) ** $ CRULE4) => (EVERYWHERE @ $ ASSERTS) => (EVERYWHERE @ NRULE2 ** CRULE4 ** DRULE4) => CRULE1 => DRULE1 => NRULE1 => ?x) , 0";
forcetheorem "}CLEANUP" "CLEANUP , ?x , (ASSERT_FALSE => ASSERT_TRUE => CRULE1 <= DRULE1 <= NRULE1 <= (EVERYWHERE @ ($ NRULE2) ** ($ DRULE4) ** $ CRULE4) => (EVERYWHERE @ $ ASSERTS) => (EVERYWHERE @ NRULE2 ** CRULE4 ** DRULE4) => CRULE1 => DRULE1 => NRULE1 => ?x) , 0";
forcetheorem "RIGHT" "(RIGHT @ ?thm) , ?x , (((RIGHT1 @ ?thm) =>> RIGHT2 @ ?thm) => ?x) , 0";
forcetheorem "RIGHT1" "(RIGHT1 @ ?thm) , (?x ^+ ?y) , (?x ^+ ?thm => ?y) , 0";
forcetheorem "RIGHT2" "(RIGHT2 @ ?thm) , (^- ?x) , (^- ?thm => ?x) , 0";
forcetheorem "$" "($ ?thm) , ?x , (?thm <= ?x) , 0";
forcetheorem "CANCELC" "CANCELC , ?x & ~ ?x , false , CANCELC , 0";
forcetheorem "DEMC" "DEMC , ~ (?x & ?y) , ~ ?x | ~ ?y , DEMC , 0";
forcetheorem "LEFT" "(LEFT @ ?thm) , ?x , (((LEFT1 @ ?thm) =>> LEFT2 @ ?thm) => ?x) , 0";
forcetheorem "LEFT1" "(LEFT1 @ ?thm) , (?x ^+ ?y) , ((?thm => ?x) ^+ ?y) , 0";
forcetheorem "DNEG" "DNEG , ~ ~ ?x , |- ?x , DNEG , 0";
forcetheorem "DRULE2" "DRULE2 , ?x | ?y , |- ?x | ?y , ASSERTS , OR_TYPE , 0";
forcetheorem "CANCELD" "CANCELD , ?x | ~ ?x , true , CANCELD , 0";
forcetheorem "NOT_FALSE" "NOT_FALSE , ~ false , true , ASSERTS , CANCELC , CANCELD , COMMD , DEMC , DNEG , OR_TYPE , 0";
forcetheorem "DISTC" "DISTC , ?x & ?y | ?z , (?x & ?y) | ?x & ?z , DISTC , 0";
forcetheorem "COMMC" "COMMC , ?x & ?y , ?y & ?x , COMMC , 0";
forcetheorem "DISTC2" "DISTC2 , (?x | ?y) & ?z , (?x & ?z) | ?y & ?z , COMMC , DISTC , 0";
forcetheorem "}backup" "backup , (?x | ?y) & ?z , (?x & ?z) | ?y & ?z , COMMC , DISTC , 0";
forcetheorem "DISTD" "DISTD , ?x | ?y & ?z , (?x | ?y) & ?x | ?z , DISTD , 0";
forcetheorem "RL" "(RL @ ?thm) , (?x ^+ ?y) , ((?thm => ?x) ^+ ?thm => ?y) , 0";
forcetheorem "COMMD" "COMMD , ?x | ?y , ?y | ?x , COMMD , 0";
forcetheorem "DISTD2" "DISTD2 , (?x & ?y) | ?z , (?x | ?z) & ?y | ?z , COMMD , DISTD , 0";
forcetheorem "NAND" "NAND , ?x ~& ?y , ~ (?x & ?y) , NAND , 0";
forcetheorem "NOR" "NOR , ?x ~| ?y , ~ (?x | ?y) , NOR , 0";
adddef "NOR" "~|";
adddef "NAND" "~&";
adddef "forsome" "forsome";
adddef "forall" "forall";
adddef "NEQ" "<>";
adddef "XOR" "<+>";
adddef "IFF" "<->";
adddef "CONVIF" "<-";
adddef "IF" "->";
adddef "OR" "|";
adddef "AND" "&";
adddef "NOT" "~";
adddef "ASSERT" "|-";
adddef "Id" "Id";
adddef "p2" "p2";
adddef "p1" "p1";
adddef "P2" "P2";
adddef "P1" "P1";
adddef "COMP" "@@";
addscript "prop_equational";
addscript "definitions";
setprogram "p2" "p2";
setprogram "p1" "p1";
adddefdep2 "NOR" "NOT , OR , NOR , 0";
adddefdep2 "NAND" "NOT , AND , NAND , 0";
adddefdep2 "DISTD2" "AND , OR , 0";
adddefdep2 "DISTC2" "OR , AND , 0";
adddefdep2 "NOT_FALSE" "NOT , 0";
adddefdep2 "CLEANUP" "0";
adddefdep2 "ASSERT_FALSE" "ASSERT , 0";
adddefdep2 "ASSERT_TRUE" "ASSERT , 0";
adddefdep2 "COMMC_TAUT" "IFF , AND , 0";
adddefdep2 "IRRELEVANCE" "OR , NOT , IF , 0";
adddefdep2 "SELFIMPLY" "IF , 0";
adddefdep2 "XOR_DEF" "NOT , IFF , XOR , 0";
adddefdep2 "IFF_DEF" "AND , IF , IFF , 0";
adddefdep2 "CONVIF_DEF" "IF , CONVIF , 0";
adddefdep2 "IF_DEF" "OR , NOT , IF , 0";
adddefdep2 "DEMD" "AND , NOT , OR , 0";
adddefdep2 "DEMC" "OR , NOT , AND , 0";
adddefdep2 "CANCELD" "OR , NOT , 0";
adddefdep2 "CANCELC" "AND , NOT , 0";
adddefdep2 "ZERD" "OR , 0";
adddefdep2 "ZERC" "AND , 0";
adddefdep2 "IDEMD" "ASSERT , OR , 0";
adddefdep2 "IDEMC" "ASSERT , AND , 0";
adddefdep2 "IDD" "ASSERT , OR , 0";
adddefdep2 "IDC" "ASSERT , AND , 0";
adddefdep2 "DISTD" "AND , OR , 0";
adddefdep2 "DISTC" "OR , AND , 0";
adddefdep2 "ASSOCD" "OR , 0";
adddefdep2 "ASSOCC" "AND , 0";
adddefdep2 "COMMD" "OR , 0";
adddefdep2 "COMMC" "AND , 0";
adddefdep2 "DNEG" "ASSERT , NOT , 0";
adddefdep2 "DRULE4" "OR , ASSERT , 0";
adddefdep2 "DRULE3" "OR , ASSERT , 0";
adddefdep2 "DRULE2" "OR , ASSERT , 0";
adddefdep2 "DRULE1" "ASSERT , OR , 0";
adddefdep2 "OR_TYPE" "ASSERT , OR , 0";
adddefdep2 "CRULE4" "AND , ASSERT , 0";
adddefdep2 "CRULE3" "AND , ASSERT , 0";
adddefdep2 "CRULE2" "AND , ASSERT , 0";
adddefdep2 "CRULE1" "ASSERT , AND , 0";
adddefdep2 "AND_TYPE" "ASSERT , AND , 0";
adddefdep2 "NRULE2" "NOT , ASSERT , 0";
adddefdep2 "NRULE1" "ASSERT , NOT , 0";
adddefdep2 "NOT_TYPE" "ASSERT , NOT , 0";
adddefdep2 "ASSERTS" "ASSERT , 0";
adddefdep2 "forsome" "NEQ , forsome , 0";
adddefdep2 "forall" "forall , 0";
adddefdep2 "NEQ" "NEQ , 0";
adddefdep2 "XOR" "XOR , 0";
adddefdep2 "IFF" "IFF , 0";
adddefdep2 "CONVIF" "CONVIF , 0";
adddefdep2 "IF" "IF , 0";
adddefdep2 "OR" "OR , 0";
adddefdep2 "AND" "AND , 0";
adddefdep2 "NOT" "NOT , 0";
adddefdep2 "ASSERT" "ASSERT , 0";
adddefdep2 "REVPIVOT" "0";
adddefdep2 "PIVOT" "0";
adddefdep2 "ALT_PUSH" "0";
adddefdep2 "TOPDOWN" "0";
adddefdep2 "TOPDOWN_ABSTRACT" "0";
adddefdep2 "TOPDOWN_PREFIX" "0";
adddefdep2 "TOPDOWN_INFIX" "0";
adddefdep2 "TOPDOWN_CASE" "0";
adddefdep2 "EVERYWHERE" "0";
adddefdep2 "EVERYWHERE_CASES" "0";
adddefdep2 "EVERYWHERE_ABSTRACT" "0";
adddefdep2 "EVERYWHERE_PREFIX" "0";
adddefdep2 "EVERYWHERE_INFIX" "0";
adddefdep2 "$" "0";
adddefdep2 "**" "0";
adddefdep2 "VALUE" "0";
adddefdep2 "BOTH_CASES" "0";
adddefdep2 "RIGHT_CASE" "0";
adddefdep2 "LEFT_CASE" "0";
adddefdep2 "RL" "0";
adddefdep2 "RIGHT" "0";
adddefdep2 "RIGHT2" "0";
adddefdep2 "RIGHT1" "0";
adddefdep2 "LEFT" "0";
adddefdep2 "LEFT2" "0";
adddefdep2 "LEFT1" "0";
adddefdep2 "HYP" "0";
adddefdep2 "ODDCHOICE" "0";
adddefdep2 "EQUATION" "0";
adddefdep2 "NONTRIV" "0";
adddefdep2 "REFLEX" "0";
adddefdep2 "CASEINTRO" "0";
adddefdep2 "FNDIST" "0";
adddefdep2 "Id" "Id , 0";
adddefdep2 "p2" "p2 , 0";
adddefdep2 "p1" "p1 , 0";
adddefdep2 "P2" "P2 , 0";
adddefdep2 "P1" "P1 , 0";
adddefdep2 "COMP" "COMP , 0";
adddefdep2 "TYPES" "0";
addthmtextdep2 "NOR" "NOR , OR , NOT , 0";
addthmtextdep2 "NOT" "NOT , 0";
addthmtextdep2 "OR" "OR , 0";
addthmtextdep2 "NAND" "NAND , AND , NOT , 0";
addthmtextdep2 "AND" "AND , 0";
addthmtextdep2 "DISTD2" "DISTD2 , AND , OR , 0";
addthmtextdep2 "DISTC2" "DISTC2 , OR , AND , 0";
addthmtextdep2 "NOT_FALSE" "NOT_FALSE , NOT , 0";
addthmtextdep2 "CLEANUP" "CLEANUP , ASSERT_FALSE , ASSERT , ASSERT_TRUE , CRULE1 , AND , DRULE1 , OR , NRULE1 , NOT , EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , NRULE2 , (?x $ ?y) , DRULE4 , CRULE4 , (?x ** ?y) , ASSERTS , 0";
addthmtextdep2 "ASSERTS" "ASSERTS , ASSERT , 0";
addthmtextdep2 "**" "(?x ** ?y) , 0";
addthmtextdep2 "CRULE4" "CRULE4 , AND , ASSERT , 0";
addthmtextdep2 "DRULE4" "DRULE4 , OR , ASSERT , 0";
addthmtextdep2 "$" "(?x $ ?y) , 0";
addthmtextdep2 "NRULE2" "NRULE2 , NOT , ASSERT , 0";
addthmtextdep2 "EVERYWHERE" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "EVERYWHERE_CASES" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "EVERYWHERE_ABSTRACT" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "EVERYWHERE_PREFIX" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "EVERYWHERE_INFIX" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "NRULE1" "NRULE1 , NOT , ASSERT , 0";
addthmtextdep2 "DRULE1" "DRULE1 , OR , ASSERT , 0";
addthmtextdep2 "CRULE1" "CRULE1 , AND , ASSERT , 0";
addthmtextdep2 "ASSERT_TRUE" "ASSERT_TRUE , ASSERT , 0";
addthmtextdep2 "ASSERT_FALSE" "ASSERT_FALSE , ASSERT , 0";
addthmtextdep2 "ASSERT" "ASSERT , 0";
addthmtextdep2 "COMMC_TAUT" "COMMC_TAUT , AND , IFF , 0";
addthmtextdep2 "IFF" "IFF , 0";
addthmtextdep2 "IRRELEVANCE" "IRRELEVANCE , IF , NOT , OR , 0";
addthmtextdep2 "IF" "IF , 0";
addthmtextdep2 "SELFIMPLY" "SELFIMPLY , IF , 0";
addthmtextdep2 "XOR_DEF" "XOR_DEF , XOR , IFF , NOT , 0";
addthmtextdep2 "XOR" "XOR , 0";
addthmtextdep2 "IFF_DEF" "IFF_DEF , IFF , IF , AND , 0";
addthmtextdep2 "CONVIF_DEF" "CONVIF_DEF , CONVIF , IF , 0";
addthmtextdep2 "CONVIF" "CONVIF , 0";
addthmtextdep2 "IF_DEF" "IF_DEF , IF , NOT , OR , 0";
addthmtextdep2 "DEMD" "DEMD , OR , NOT , AND , 0";
addthmtextdep2 "DEMC" "DEMC , AND , NOT , OR , 0";
addthmtextdep2 "CANCELD" "CANCELD , NOT , OR , 0";
addthmtextdep2 "CANCELC" "CANCELC , NOT , AND , 0";
addthmtextdep2 "ZERD" "ZERD , OR , 0";
addthmtextdep2 "ZERC" "ZERC , AND , 0";
addthmtextdep2 "IDEMD" "IDEMD , OR , ASSERT , 0";
addthmtextdep2 "IDEMC" "IDEMC , AND , ASSERT , 0";
addthmtextdep2 "IDD" "IDD , OR , ASSERT , 0";
addthmtextdep2 "IDC" "IDC , AND , ASSERT , 0";
addthmtextdep2 "DISTD" "DISTD , AND , OR , 0";
addthmtextdep2 "DISTC" "DISTC , OR , AND , 0";
addthmtextdep2 "ASSOCD" "ASSOCD , OR , 0";
addthmtextdep2 "ASSOCC" "ASSOCC , AND , 0";
addthmtextdep2 "COMMD" "COMMD , OR , 0";
addthmtextdep2 "COMMC" "COMMC , AND , 0";
addthmtextdep2 "DNEG" "DNEG , NOT , ASSERT , 0";
addthmtextdep2 "DRULE3" "DRULE3 , OR , ASSERT , 0";
addthmtextdep2 "DRULE2" "DRULE2 , OR , ASSERT , 0";
addthmtextdep2 "OR_TYPE" "OR_TYPE , OR , ASSERT , 0";
addthmtextdep2 "CRULE3" "CRULE3 , AND , ASSERT , 0";
addthmtextdep2 "CRULE2" "CRULE2 , AND , ASSERT , 0";
addthmtextdep2 "AND_TYPE" "AND_TYPE , AND , ASSERT , 0";
addthmtextdep2 "NOT_TYPE" "NOT_TYPE , NOT , ASSERT , 0";
addthmtextdep2 "forsome" "forsome , NEQ , 0";
addthmtextdep2 "NEQ" "NEQ , 0";
addthmtextdep2 "forall" "forall , 0";
addthmtextdep2 "REVPIVOT" "REVPIVOT , EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , (?x $ ?y) , 0";
addthmtextdep2 "PIVOT" "PIVOT , EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , 0";
addthmtextdep2 "ALT_PUSH" "EVERYWHERE_INFIX , EVERYWHERE , EVERYWHERE_PREFIX , EVERYWHERE_ABSTRACT , EVERYWHERE_CASES , ALT_PUSH , 0";
addthmtextdep2 "TOPDOWN_CASE" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , LEFT , LEFT1 , LEFT2 , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , TOPDOWN_ABSTRACT , VALUE , 0";
addthmtextdep2 "TOPDOWN_INFIX" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , LEFT , LEFT1 , LEFT2 , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , TOPDOWN_ABSTRACT , VALUE , 0";
addthmtextdep2 "TOPDOWN_PREFIX" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , LEFT , LEFT1 , LEFT2 , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , TOPDOWN_ABSTRACT , VALUE , 0";
addthmtextdep2 "TOPDOWN" "TOPDOWN_CASE , BOTH_CASES , TOPDOWN , LEFT , LEFT1 , LEFT2 , TOPDOWN_INFIX , RL , TOPDOWN_PREFIX , RIGHT , RIGHT1 , RIGHT2 , TOPDOWN_ABSTRACT , VALUE , 0";
addthmtextdep2 "TOPDOWN_ABSTRACT" "TOPDOWN_ABSTRACT , VALUE , 0";
addthmtextdep2 "VALUE" "VALUE , 0";
addthmtextdep2 "RIGHT" "RIGHT , RIGHT1 , RIGHT2 , 0";
addthmtextdep2 "RIGHT2" "RIGHT2 , 0";
addthmtextdep2 "RIGHT1" "RIGHT1 , 0";
addthmtextdep2 "RL" "RL , 0";
addthmtextdep2 "LEFT" "LEFT , LEFT1 , LEFT2 , 0";
addthmtextdep2 "LEFT2" "LEFT2 , 0";
addthmtextdep2 "LEFT1" "LEFT1 , 0";
addthmtextdep2 "BOTH_CASES" "BOTH_CASES , 0";
addthmtextdep2 "RIGHT_CASE" "RIGHT_CASE , 0";
addthmtextdep2 "LEFT_CASE" "LEFT_CASE , 0";
addthmtextdep2 "HYP" "HYP , 0";
addthmtextdep2 "ODDCHOICE" "ODDCHOICE , 0";
addthmtextdep2 "EQUATION" "EQUATION , 0";
addthmtextdep2 "NONTRIV" "NONTRIV , 0";
addthmtextdep2 "REFLEX" "REFLEX , 0";
addthmtextdep2 "CASEINTRO" "CASEINTRO , 0";
addthmtextdep2 "FNDIST" "FNDIST , 0";
addthmtextdep2 "Id" "Id , 0";
addthmtextdep2 "p2" "p2 , 0";
addthmtextdep2 "p1" "p1 , 0";
addthmtextdep2 "P2" "P2 , 0";
addthmtextdep2 "P1" "P1 , 0";
addthmtextdep2 "COMP" "COMP , 0";
addthmtextdep2 "TYPES" "TYPES , 0";
quit();
