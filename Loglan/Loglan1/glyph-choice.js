// glyph-choice.js//// A way to control how to display certain unusual characters that show up in Loglan 1.////	by James Jennings * October 1, 2005var glyph_image = new Array();var glyph_entity = new Array();var glyph = new Array();var glyph_keys = new Array('Theta', 'theta', 'chi', 'epsilon', 'kappa', 'exist', 			'engma', 's hachek', 'z hachek', 'open o', 'ah', 'schwa', 			'ma', 'mo');// Greek letters...glyph_image['Theta'] = '<img src="glyph-UTheta.GIF" alt="Theta">';glyph_entity['Theta'] = '&Theta;';glyph_image['theta'] = '<img src="glyph-theta.GIF" alt="theta">';glyph_entity['theta'] = '&theta;';glyph_image['chi'] = '<img src="glyph-chi.GIF" alt="chi">';glyph_entity['chi'] = '&chi;';glyph_image['epsilon'] = '<img src="glyph-epsilon.GIF" alt="epsilon">';glyph_entity['epsilon'] = '&epsilon;';glyph_image['kappa'] = '<img src="glyph-kappa.GIF" alt="kappa">';glyph_entity['kappa'] = '&kappa;';// Math Symbols...glyph_image['exist'] = '<img src="glyph-exists.GIF" alt="there exists">';glyph_entity['exist'] = '&exist;';// IPA Symbols...glyph_image['engma'] = '<img src="glyph-IPA-ng.GIF" alt="IPA engma">';glyph_entity['engma'] = '&#x014B';glyph_image['s hachek'] = '<img src="glyph-IPA-sh.GIF" alt="IPA s hachek">';glyph_entity['s hachek'] = '&#x0161;';glyph_image['z hachek'] = '<img src="glyph-IPA-zh.GIF" alt="IPA z hachek">';glyph_entity['z hachek'] = '&#x017E;';glyph_image['open o'] = '<img src="glyph-IPA-aw.GIF" alt="IPA open o">';glyph_entity['open o'] = '&#x0254';glyph_image['ah'] = '<img src="glyph-IPA-ah.GIF" alt="IPA ah">';glyph_entity['ah'] = '<i>a</i>';glyph_image['schwa'] = '<img src="glyph-IPA-ah-uk.GIF" alt="IPA schwa">';glyph_entity['schwa'] = '&#x0259;';// Loglan Symbols...glyph_image['ma'] = '<img src="glyph-loglan-ma.GIF" alt="loglan ma">';glyph_entity['ma'] = '<strike>0</strike>';glyph_image['mo'] = '<img src="glyph-loglan-mo.GIF" alt="loglan mo">';glyph_entity['mo'] = '<div style="font-family: Monaco;">0</div>';function setGlyphArray(hasGreek, hasMath, hasIPA, hasLoglan){//	glyph['Theta'] = if (hasGreek) glyph_entity['Theta'] else glyph_image['Theta'];	if (hasGreek) {		glyph['Theta'] = glyph_entity['Theta'];		glyph['theta'] = glyph_entity['theta'];		glyph['chi'] = glyph_entity['chi'];		glyph['epsilon'] = glyph_entity['epsilon'];		glyph['kappa'] = glyph_entity['kappa'];		} else {		glyph['Theta'] = glyph_image['Theta'];		glyph['theta'] = glyph_image['theta'];		glyph['chi'] = glyph_image['chi'];		glyph['epsilon'] = glyph_image['epsilon'];		glyph['kappa'] = glyph_image['kappa'];		}	if (hasMath) {		glyph['exist'] = glyph_entity['exist'];	} else {		glyph['exist'] = glyph_image['exist'];	}	if (hasIPA) {		glyph['engma'] = glyph_entity['engma'];		glyph['s hachek'] = glyph_entity['s hachek'];		glyph['z hachek'] = glyph_entity['z hachek'];		glyph['open o'] = glyph_entity['open o'];		glyph['ah'] = glyph_entity['ah'];		glyph['schwa'] = glyph_entity['schwa'];	} else {		glyph['engma'] = glyph_image['engma'];		glyph['s hachek'] = glyph_image['s hachek'];		glyph['z hachek'] = glyph_image['z hachek'];		glyph['open o'] = glyph_image['open o'];		glyph['ah'] = glyph_image['ah'];		glyph['schwa'] = glyph_image['schwa'];	}	if (hasLoglan) {		glyph['ma'] = glyph_entity['ma'];		glyph['mo'] = glyph_entity['mo'];	} else {		glyph['ma'] = glyph_image['ma'];		glyph['mo'] = glyph_image['mo'];	}	}setGlyphArray(true, true, false, true);function setGlyphCookie(){	// Save the current glyph choices in a cookie.	var cookie = "X";	for (var i=0; i<glyph_keys.length; i++) {		if (glyph[glyph_keys[i]] == glyph_entity[glyph_keys[i]]) 			cookie += '1';		else			cookie += '0';	}	document.cookie = "glyph-preferences="+cookie+";path=http://www.loglan.org/Loglan1";}setGlyphCookie();//alert(document.cookie);